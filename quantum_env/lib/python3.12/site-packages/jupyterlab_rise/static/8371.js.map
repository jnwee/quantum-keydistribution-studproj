{"version":3,"file":"8371.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/cellexecutor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/tool-widgets/activeCellToolWidget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/tool-widgets/metadataEditorFields.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { INotebookCellExecutor, runCell } from '@jupyterlab/notebook';\n/**\n * Notebook cell executor plugin.\n */\nexport const cellExecutor = {\n    id: '@jupyterlab/notebook-extension:cell-executor',\n    description: 'Provides the notebook cell executor.',\n    autoStart: true,\n    provides: INotebookCellExecutor,\n    activate: () => {\n        return Object.freeze({ runCell });\n    }\n};\n//# sourceMappingURL=cellexecutor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    description: 'Adds cell outputs log to the application logger.',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = {\n                    ...msg.content,\n                    output_type: msg.header.msg_type\n                };\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport React from 'react';\nimport { NotebookTools } from '@jupyterlab/notebook';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { InputPrompt } from '@jupyterlab/cells';\nimport { Debouncer } from '@lumino/polling';\n/**\n * The class name added to the ActiveCellTool.\n */\nconst ACTIVE_CELL_TOOL_CLASS = 'jp-ActiveCellTool';\n/**\n * The class name added to the ActiveCellTool content.\n */\nconst ACTIVE_CELL_TOOL_CONTENT_CLASS = 'jp-ActiveCellTool-Content';\n/**\n * The class name added to the ActiveCellTool cell content.\n */\nconst ACTIVE_CELL_TOOL_CELL_CONTENT_CLASS = 'jp-ActiveCellTool-CellContent';\n/**\n * The active cell field, displaying the first line and execution count of the active cell.\n *\n * ## Note\n * This field does not work as other metadata form fields, as it does not update metadata.\n */\nexport class ActiveCellTool extends NotebookTools.Tool {\n    constructor(options) {\n        super();\n        const { languages } = options;\n        this._tracker = options.tracker;\n        this.addClass(ACTIVE_CELL_TOOL_CLASS);\n        this.layout = new PanelLayout();\n        this._inputPrompt = new InputPrompt();\n        this.layout.addWidget(this._inputPrompt);\n        // First code line container\n        const node = document.createElement('div');\n        node.classList.add(ACTIVE_CELL_TOOL_CONTENT_CLASS);\n        const container = node.appendChild(document.createElement('div'));\n        const editor = container.appendChild(document.createElement('pre'));\n        container.className = ACTIVE_CELL_TOOL_CELL_CONTENT_CLASS;\n        this._editorEl = editor;\n        this.layout.addWidget(new Widget({ node }));\n        const update = async () => {\n            var _a, _b;\n            this._editorEl.innerHTML = '';\n            if (((_a = this._cellModel) === null || _a === void 0 ? void 0 : _a.type) === 'code') {\n                this._inputPrompt.executionCount = `${(_b = this._cellModel.executionCount) !== null && _b !== void 0 ? _b : ''}`;\n                this._inputPrompt.show();\n            }\n            else {\n                this._inputPrompt.executionCount = null;\n                this._inputPrompt.hide();\n            }\n            if (this._cellModel) {\n                await languages.highlight(this._cellModel.sharedModel.getSource().split('\\n')[0], languages.findByMIME(this._cellModel.mimeType), this._editorEl);\n            }\n        };\n        this._refreshDebouncer = new Debouncer(update, 150);\n    }\n    render(props) {\n        var _a, _b;\n        const activeCell = this._tracker.activeCell;\n        if (activeCell)\n            this._cellModel = (activeCell === null || activeCell === void 0 ? void 0 : activeCell.model) || null;\n        ((_a = this._cellModel) === null || _a === void 0 ? void 0 : _a.sharedModel).changed.connect(this.refresh, this);\n        (_b = this._cellModel) === null || _b === void 0 ? void 0 : _b.mimeTypeChanged.connect(this.refresh, this);\n        this.refresh()\n            .then(() => undefined)\n            .catch(() => undefined);\n        return React.createElement(\"div\", { ref: ref => ref === null || ref === void 0 ? void 0 : ref.appendChild(this.node) });\n    }\n    async refresh() {\n        await this._refreshDebouncer.invoke();\n    }\n}\n//# sourceMappingURL=activeCellToolWidget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILabShell, ILayoutRestorer, IRouter } from '@jupyterlab/application';\nimport { createToolbarFactory, Dialog, ICommandPalette, IKernelStatusModel, InputDialog, ISanitizer, ISessionContextDialogs, IToolbarWidgetRegistry, MainAreaWidget, Sanitizer, SessionContextDialogs, showDialog, Toolbar, WidgetTracker } from '@jupyterlab/apputils';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { IEditorServices, IPositionModel } from '@jupyterlab/codeeditor';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IEditorExtensionRegistry, IEditorLanguageRegistry } from '@jupyterlab/codemirror';\nimport { ICompletionProviderManager } from '@jupyterlab/completer';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ToolbarItems as DocToolbarItems } from '@jupyterlab/docmanager-extension';\nimport { ISearchProviderRegistry } from '@jupyterlab/documentsearch';\nimport { IDefaultFileBrowser, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { ILSPCodeExtractorsManager, ILSPDocumentConnectionManager, ILSPFeatureManager, IWidgetLSPAdapterTracker } from '@jupyterlab/lsp';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IMetadataFormProvider } from '@jupyterlab/metadataform';\nimport { CommandEditStatus, ExecutionIndicator, INotebookCellExecutor, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookAdapter, NotebookModelFactory, NotebookPanel, NotebookSearchProvider, NotebookToCFactory, NotebookTools, NotebookTracker, NotebookTrustStatus, NotebookWidgetFactory, setCellExecutor, StaticNotebook, ToolbarItems } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IMarkdownParser, IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITableOfContentsRegistry } from '@jupyterlab/toc';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { addAboveIcon, addBelowIcon, buildIcon, copyIcon, cutIcon, duplicateIcon, fastForwardIcon, IFormRendererRegistry, moveDownIcon, moveUpIcon, notebookIcon, pasteIcon, refreshIcon, runIcon, stopIcon, tableRowsIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel } from '@lumino/widgets';\nimport { cellExecutor } from './cellexecutor';\nimport { logNotebookOutput } from './nboutput';\nimport { ActiveCellTool } from './tool-widgets/activeCellToolWidget';\nimport { CellMetadataField, NotebookMetadataField } from './tool-widgets/metadataEditorFields';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.getKernel = 'notebook:get-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.shutdown = 'notebook:shutdown-kernel';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.duplicateBelow = 'notebook:duplicate-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.selectHeadingAboveOrCollapse = 'notebook:move-cursor-heading-above-or-collapse';\n    CommandIDs.selectHeadingBelowOrExpand = 'notebook:move-cursor-heading-below-or-expand';\n    CommandIDs.insertHeadingAbove = 'notebook:insert-heading-above';\n    CommandIDs.insertHeadingBelow = 'notebook:insert-heading-below';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.redo = 'notebook:redo';\n    CommandIDs.undo = 'notebook:undo';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.toggleOutput = 'notebook:toggle-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.toggleRenderSideBySideCurrentNotebook = 'notebook:toggle-render-side-by-side-current';\n    CommandIDs.setSideBySideRatio = 'notebook:set-side-by-side-ratio';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n    CommandIDs.autoClosingBrackets = 'notebook:toggle-autoclosing-brackets';\n    CommandIDs.toggleCollapseCmd = 'notebook:toggle-heading-collapse';\n    CommandIDs.collapseAllCmd = 'notebook:collapse-all-headings';\n    CommandIDs.expandAllCmd = 'notebook:expand-all-headings';\n    CommandIDs.copyToClipboard = 'notebook:copy-to-clipboard';\n    CommandIDs.invokeCompleter = 'completer:invoke-notebook';\n    CommandIDs.selectCompleter = 'completer:select-notebook';\n    CommandIDs.tocRunCells = 'toc:run-cells';\n    CommandIDs.accessPreviousHistory = 'notebook:access-previous-history-entry';\n    CommandIDs.accessNextHistory = 'notebook:access-next-history-entry';\n    CommandIDs.virtualScrollbar = 'notebook:toggle-virtual-scrollbar';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The excluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * Setting Id storing the customized toolbar definition.\n */\nconst PANEL_SETTINGS = '@jupyterlab/notebook-extension:panel';\n/**\n * The id to use on the style tag for the side by side margins.\n */\nconst SIDE_BY_SIDE_STYLE_ID = 'jp-NotebookExtension-sideBySideMargins';\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    description: 'Provides the notebook widget tracker.',\n    provides: INotebookTracker,\n    requires: [\n        INotebookWidgetFactory,\n        IEditorExtensionRegistry,\n        INotebookCellExecutor\n    ],\n    optional: [\n        ICommandPalette,\n        IDefaultFileBrowser,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        IRouter,\n        ISettingRegistry,\n        ISessionContextDialogs,\n        ITranslator,\n        IFormRendererRegistry,\n        IFileBrowserFactory\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    description: 'Provides the notebook cell factory.',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    description: 'Provides the notebook tools.',\n    autoStart: true,\n    requires: [\n        INotebookTracker,\n        IEditorServices,\n        IEditorLanguageRegistry,\n        IStateDB,\n        ITranslator\n    ],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    description: 'Adds a notebook mode status widget.',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            priority: 1,\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin that provides a execution indicator item to the status bar.\n */\nexport const executionIndicator = {\n    id: '@jupyterlab/notebook-extension:execution-indicator',\n    description: 'Adds a notebook execution status widget.',\n    autoStart: true,\n    requires: [INotebookTracker, ILabShell, ITranslator],\n    optional: [IStatusBar, ISettingRegistry],\n    activate: (app, notebookTracker, labShell, translator, statusBar, settingRegistry) => {\n        let statusbarItem;\n        let labShellCurrentChanged;\n        let statusBarDisposable;\n        const updateSettings = (settings) => {\n            var _a, _b;\n            let { showOnToolBar, showProgress } = settings;\n            if (!showOnToolBar) {\n                // Status bar mode, only one `ExecutionIndicator` is needed.\n                if (!statusBar) {\n                    // Automatically disable if statusbar missing\n                    return;\n                }\n                if (!(statusbarItem === null || statusbarItem === void 0 ? void 0 : statusbarItem.model)) {\n                    statusbarItem = new ExecutionIndicator(translator);\n                    labShellCurrentChanged = (_, change) => {\n                        const { newValue } = change;\n                        if (newValue && notebookTracker.has(newValue)) {\n                            const panel = newValue;\n                            statusbarItem.model.attachNotebook({\n                                content: panel.content,\n                                context: panel.sessionContext\n                            });\n                        }\n                    };\n                    statusBarDisposable = statusBar.registerStatusItem('@jupyterlab/notebook-extension:execution-indicator', {\n                        item: statusbarItem,\n                        align: 'left',\n                        rank: 3,\n                        isActive: () => {\n                            const current = labShell.currentWidget;\n                            return !!current && notebookTracker.has(current);\n                        }\n                    });\n                    statusbarItem.model.attachNotebook({\n                        content: (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content,\n                        context: (_b = notebookTracker.currentWidget) === null || _b === void 0 ? void 0 : _b.sessionContext\n                    });\n                    labShell.currentChanged.connect(labShellCurrentChanged);\n                    statusbarItem.disposed.connect(() => {\n                        labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    });\n                }\n                statusbarItem.model.displayOption = {\n                    showOnToolBar,\n                    showProgress\n                };\n            }\n            else {\n                //Remove old indicator widget on status bar\n                if (statusBarDisposable) {\n                    labShell.currentChanged.disconnect(labShellCurrentChanged);\n                    statusBarDisposable.dispose();\n                }\n            }\n        };\n        if (settingRegistry) {\n            // Indicator is default in tool bar, user needs to specify its\n            // position in settings in order to have indicator on status bar.\n            const loadSettings = settingRegistry.load(trackerPlugin.id);\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(ExecutionIndicator.getSettingValue(settings));\n                settings.changed.connect(sender => updateSettings(ExecutionIndicator.getSettingValue(sender)));\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    description: 'Adds the export notebook commands.',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                if (args.label === undefined) {\n                    return trans.__('Save and Export Notebook to the given `format`.');\n                }\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Save and Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const { context } = current;\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        window.open(url, '_blank', 'noopener');\n                    });\n                }\n                return new Promise(resolve => {\n                    window.open(url, '_blank', 'noopener');\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        let exportTo;\n        if (mainMenu) {\n            exportTo = (_a = mainMenu.fileMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-file-notebookexport';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n        }\n        let formatsInitialized = false;\n        /** Request formats only when a notebook might use them. */\n        const maybeInitializeFormats = async () => {\n            if (formatsInitialized) {\n                return;\n            }\n            tracker.widgetAdded.disconnect(maybeInitializeFormats);\n            formatsInitialized = true;\n            const response = await services.nbconvert.getExportFormats(false);\n            if (!response) {\n                return;\n            }\n            const formatLabels = Private.getFormatLabels(translator);\n            // Convert export list to palette and menu items.\n            const formatList = Object.keys(response);\n            formatList.forEach(function (key) {\n                const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                let args = {\n                    format: key,\n                    label: labelStr,\n                    isPalette: false\n                };\n                if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                    if (exportTo) {\n                        exportTo.addItem({\n                            command: CommandIDs.exportToFormat,\n                            args: args\n                        });\n                    }\n                    if (palette) {\n                        args = {\n                            format: key,\n                            label: labelStr,\n                            isPalette: true\n                        };\n                        const category = trans.__('Notebook Operations');\n                        palette.addItem({\n                            command: CommandIDs.exportToFormat,\n                            category,\n                            args\n                        });\n                    }\n                }\n            });\n        };\n        tracker.widgetAdded.connect(maybeInitializeFormats);\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    description: 'Adds the notebook trusted status widget.',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    description: 'Provides the notebook widget factory.',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        IToolbarWidgetRegistry\n    ],\n    optional: [ISettingRegistry, ISessionContextDialogs, ITranslator],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    description: 'Adds the clone output feature.',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    description: 'Adds the notebook code consoles features.',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * A plugin to copy CodeCell outputs.\n */\nconst copyOutputPlugin = {\n    id: '@jupyterlab/notebook-extension:copy-output',\n    description: 'Adds the copy cell outputs feature.',\n    activate: activateCopyOutput,\n    requires: [ITranslator, INotebookTracker],\n    autoStart: true\n};\n/**\n * Kernel status indicator.\n */\nconst kernelStatus = {\n    id: '@jupyterlab/notebook-extension:kernel-status',\n    description: 'Adds the notebook kernel status.',\n    activate: (app, tracker, kernelStatus) => {\n        const provider = (widget) => {\n            let session = null;\n            if (widget && tracker.has(widget)) {\n                return widget.sessionContext;\n            }\n            return session;\n        };\n        kernelStatus.addSessionProvider(provider);\n    },\n    requires: [INotebookTracker, IKernelStatusModel],\n    autoStart: true\n};\n/**\n * Cursor position.\n */\nconst lineColStatus = {\n    id: '@jupyterlab/notebook-extension:cursor-position',\n    description: 'Adds the notebook cursor position status.',\n    activate: (app, tracker, positionModel) => {\n        let previousWidget = null;\n        const provider = async (widget) => {\n            let editor = null;\n            if (widget !== previousWidget) {\n                previousWidget === null || previousWidget === void 0 ? void 0 : previousWidget.content.activeCellChanged.disconnect(positionModel.update);\n                previousWidget = null;\n                if (widget && tracker.has(widget)) {\n                    widget.content.activeCellChanged.connect(positionModel.update);\n                    const activeCell = widget.content.activeCell;\n                    editor = null;\n                    if (activeCell) {\n                        await activeCell.ready;\n                        editor = activeCell.editor;\n                    }\n                    previousWidget = widget;\n                }\n            }\n            else if (widget) {\n                const activeCell = widget.content.activeCell;\n                editor = null;\n                if (activeCell) {\n                    await activeCell.ready;\n                    editor = activeCell.editor;\n                }\n            }\n            return editor;\n        };\n        positionModel.addEditorProvider(provider);\n    },\n    requires: [INotebookTracker, IPositionModel],\n    autoStart: true\n};\nconst completerPlugin = {\n    id: '@jupyterlab/notebook-extension:completer',\n    description: 'Adds the code completion capability to notebooks.',\n    requires: [INotebookTracker],\n    optional: [ICompletionProviderManager, ITranslator, ISanitizer],\n    activate: activateNotebookCompleterService,\n    autoStart: true\n};\n/**\n * A plugin to search notebook documents\n */\nconst searchProvider = {\n    id: '@jupyterlab/notebook-extension:search',\n    description: 'Adds search capability to notebooks.',\n    requires: [ISearchProviderRegistry],\n    autoStart: true,\n    activate: (app, registry) => {\n        registry.add('jp-notebookSearchProvider', NotebookSearchProvider);\n    }\n};\nconst tocPlugin = {\n    id: '@jupyterlab/notebook-extension:toc',\n    description: 'Adds table of content capability to the notebooks',\n    requires: [INotebookTracker, ITableOfContentsRegistry, ISanitizer],\n    optional: [IMarkdownParser, ISettingRegistry],\n    autoStart: true,\n    activate: (app, tracker, tocRegistry, sanitizer, mdParser, settingRegistry) => {\n        const nbTocFactory = new NotebookToCFactory(tracker, mdParser, sanitizer);\n        tocRegistry.add(nbTocFactory);\n        if (settingRegistry) {\n            Promise.all([app.restored, settingRegistry.load(trackerPlugin.id)])\n                .then(([_, setting]) => {\n                const onSettingsUpdate = () => {\n                    var _a;\n                    nbTocFactory.scrollToTop =\n                        (_a = setting.composite['scrollHeadingToTop']) !== null && _a !== void 0 ? _a : true;\n                };\n                onSettingsUpdate();\n                setting.changed.connect(onSettingsUpdate);\n            })\n                .catch(error => {\n                console.error('Failed to load notebook table of content settings.', error);\n            });\n        }\n    }\n};\nconst languageServerPlugin = {\n    id: '@jupyterlab/notebook-extension:language-server',\n    description: 'Adds language server capability to the notebooks.',\n    requires: [\n        INotebookTracker,\n        ILSPDocumentConnectionManager,\n        ILSPFeatureManager,\n        ILSPCodeExtractorsManager,\n        IWidgetLSPAdapterTracker\n    ],\n    activate: activateNotebookLanguageServer,\n    autoStart: true\n};\n/**\n * Metadata editor for the raw cell mimetype.\n */\nconst updateRawMimetype = {\n    id: '@jupyterlab/notebook-extension:update-raw-mimetype',\n    description: 'Adds metadata form editor for raw cell mimetype.',\n    autoStart: true,\n    requires: [INotebookTracker, IMetadataFormProvider, ITranslator],\n    activate: (app, tracker, metadataForms, translator) => {\n        const trans = translator.load('jupyterlab');\n        let formatsInitialized = false;\n        async function maybeInitializeFormats() {\n            if (formatsInitialized) {\n                return;\n            }\n            if (!metadataForms.get('commonToolsSection')) {\n                return;\n            }\n            const properties = metadataForms\n                .get('commonToolsSection')\n                .getProperties('/raw_mimetype');\n            if (!properties) {\n                return;\n            }\n            tracker.widgetAdded.disconnect(maybeInitializeFormats);\n            formatsInitialized = true;\n            const services = app.serviceManager;\n            const response = await services.nbconvert.getExportFormats(false);\n            if (!response) {\n                return;\n            }\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                var _a;\n                const mimetypeExists = ((_a = properties.oneOf) === null || _a === void 0 ? void 0 : _a.filter(value => value.const === key).length) > 0;\n                if (!mimetypeExists) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    properties.oneOf.push({\n                        const: mimeTypeValue,\n                        title: option\n                    });\n                }\n            });\n            metadataForms\n                .get('commonToolsSection')\n                .setProperties('/raw_mimetype', properties);\n        }\n        tracker.widgetAdded.connect(maybeInitializeFormats);\n    }\n};\n/**\n * Registering metadata editor fields.\n */\nconst customMetadataEditorFields = {\n    id: '@jupyterlab/notebook-extension:metadata-editor',\n    description: 'Adds metadata form for full metadata editor.',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IFormRendererRegistry],\n    optional: [ITranslator],\n    activate: (app, tracker, editorServices, formRegistry, translator) => {\n        const editorFactory = options => editorServices.factoryService.newInlineEditor(options);\n        // Register the custom fields.\n        const cellComponent = {\n            fieldRenderer: (props) => {\n                return new CellMetadataField({\n                    editorFactory,\n                    tracker,\n                    label: 'Cell metadata',\n                    translator: translator\n                }).render(props);\n            }\n        };\n        formRegistry.addRenderer('@jupyterlab/notebook-extension:metadata-editor.cell-metadata', cellComponent);\n        const notebookComponent = {\n            fieldRenderer: (props) => {\n                return new NotebookMetadataField({\n                    editorFactory,\n                    tracker,\n                    label: 'Notebook metadata',\n                    translator: translator\n                }).render(props);\n            }\n        };\n        formRegistry.addRenderer('@jupyterlab/notebook-extension:metadata-editor.notebook-metadata', notebookComponent);\n    }\n};\n/**\n * Registering active cell field.\n */\nconst activeCellTool = {\n    id: '@jupyterlab/notebook-extension:active-cell-tool',\n    description: 'Adds active cell field in the metadata editor tab.',\n    autoStart: true,\n    requires: [INotebookTracker, IFormRendererRegistry, IEditorLanguageRegistry],\n    activate: (\n    // Register the custom field.\n    app, tracker, formRegistry, languages) => {\n        const component = {\n            fieldRenderer: (props) => {\n                return new ActiveCellTool({\n                    tracker,\n                    languages\n                }).render(props);\n            }\n        };\n        formRegistry.addRenderer('@jupyterlab/notebook-extension:active-cell-tool.renderer', component);\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    cellExecutor,\n    factory,\n    trackerPlugin,\n    executionIndicator,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin,\n    copyOutputPlugin,\n    kernelStatus,\n    lineColStatus,\n    completerPlugin,\n    searchProvider,\n    tocPlugin,\n    languageServerPlugin,\n    updateRawMimetype,\n    customMetadataEditorFields,\n    activeCellTool\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, languages, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, toolbarRegistry, settingRegistry, sessionContextDialogs_, translator_) {\n    const translator = translator_ !== null && translator_ !== void 0 ? translator_ : nullTranslator;\n    const sessionContextDialogs = sessionContextDialogs_ !== null && sessionContextDialogs_ !== void 0 ? sessionContextDialogs_ : new SessionContextDialogs({ translator });\n    const preferKernelOption = PageConfig.getOption('notebookStartsKernel');\n    // If the option is not set, assume `true`\n    const preferKernelValue = preferKernelOption === '' || preferKernelOption.toLowerCase() === 'true';\n    const { commands } = app;\n    let toolbarFactory;\n    // Register notebook toolbar widgets\n    toolbarRegistry.addFactory(FACTORY, 'save', panel => DocToolbarItems.createSaveButton(commands, panel.context.fileChanged));\n    toolbarRegistry.addFactory(FACTORY, 'cellType', panel => ToolbarItems.createCellTypeItem(panel, translator));\n    toolbarRegistry.addFactory(FACTORY, 'kernelName', panel => Toolbar.createKernelNameItem(panel.sessionContext, sessionContextDialogs, translator));\n    toolbarRegistry.addFactory(FACTORY, 'executionProgress', panel => {\n        const loadingSettings = settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load(trackerPlugin.id);\n        const indicator = ExecutionIndicator.createExecutionIndicatorItem(panel, translator, loadingSettings);\n        void (loadingSettings === null || loadingSettings === void 0 ? void 0 : loadingSettings.then(settings => {\n            panel.disposed.connect(() => {\n                settings.dispose();\n            });\n        }));\n        return indicator;\n    });\n    if (settingRegistry) {\n        // Create the factory\n        toolbarFactory = createToolbarFactory(toolbarRegistry, settingRegistry, FACTORY, PANEL_SETTINGS, translator);\n    }\n    const trans = translator.load('jupyterlab');\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        label: trans.__('Notebook'),\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: preferKernelValue,\n        canStartKernel: true,\n        rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        toolbarFactory,\n        translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Cell Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom',\n                type: 'Cloned Output'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata;\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            if (!editor) {\n                return;\n            }\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.sharedModel.getSource().substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.sharedModel.getSource().split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the output copying extension\n */\nfunction activateCopyOutput(app, translator, tracker) {\n    const trans = translator.load('jupyterlab');\n    /**\n     * Copy the contents of an HTMLElement to the system clipboard\n     */\n    function copyElement(e) {\n        const sel = window.getSelection();\n        if (sel == null) {\n            return;\n        }\n        // Save the current selection.\n        const savedRanges = [];\n        for (let i = 0; i < sel.rangeCount; ++i) {\n            savedRanges[i] = sel.getRangeAt(i).cloneRange();\n        }\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand('copy');\n        // Restore the saved selection.\n        sel.removeAllRanges();\n        savedRanges.forEach(r => sel.addRange(r));\n    }\n    app.commands.addCommand(CommandIDs.copyToClipboard, {\n        label: trans.__('Copy Output to Clipboard'),\n        execute: args => {\n            var _a;\n            const cell = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n            if (cell == null) {\n                return;\n            }\n            const output = cell.outputArea.outputTracker.currentWidget;\n            if (output == null) {\n                return;\n            }\n            const outputAreaAreas = output.node.getElementsByClassName('jp-OutputArea-output');\n            if (outputAreaAreas.length > 0) {\n                const area = outputAreaAreas[0];\n                copyElement(area);\n            }\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyToClipboard,\n        selector: '.jp-OutputArea-child',\n        rank: 0\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, extensions, executor, palette, defaultBrowser, launcher, restorer, mainMenu, router, settingRegistry, sessionDialogs_, translator_, formRegistry, filebrowserFactory) {\n    setCellExecutor(executor);\n    const translator = translator_ !== null && translator_ !== void 0 ? translator_ : nullTranslator;\n    const sessionDialogs = sessionDialogs_ !== null && sessionDialogs_ !== void 0 ? sessionDialogs_ : new SessionContextDialogs({ translator });\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands, shell } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    // Use the router to deal with hash navigation\n    function onRouted(router, location) {\n        if (location.hash && tracker.currentWidget) {\n            tracker.currentWidget.setFragment(location.hash);\n        }\n    }\n    router === null || router === void 0 ? void 0 : router.routed.connect(onRouted);\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const setSideBySideOutputRatio = (sideBySideOutputRatio) => document.documentElement.style.setProperty('--jp-side-by-side-output-size', `${sideBySideOutputRatio}fr`);\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    fetchSettings\n        .then(settings => {\n        updateConfig(settings);\n        settings.changed.connect(() => {\n            updateConfig(settings);\n            commands.notifyCommandChanged(CommandIDs.virtualScrollbar);\n        });\n        const updateSessionSettings = (session, changes) => {\n            const { newValue, oldValue } = changes;\n            const autoStartDefault = newValue.autoStartDefault;\n            if (typeof autoStartDefault === 'boolean' &&\n                autoStartDefault !== oldValue.autoStartDefault) {\n                // Ensure we break the cycle\n                if (autoStartDefault !==\n                    settings.get('autoStartDefaultKernel').composite)\n                    // Once the settings is changed `updateConfig` will take care\n                    // of the propagation to existing session context.\n                    settings\n                        .set('autoStartDefaultKernel', autoStartDefault)\n                        .catch(reason => {\n                        console.error(`Failed to set ${settings.id}.autoStartDefaultKernel`);\n                    });\n            }\n        };\n        const sessionContexts = new WeakSet();\n        const listenToKernelPreference = (panel) => {\n            const session = panel.context.sessionContext;\n            if (!session.isDisposed && !sessionContexts.has(session)) {\n                sessionContexts.add(session);\n                session.kernelPreferenceChanged.connect(updateSessionSettings);\n                session.disposed.connect(() => {\n                    session.kernelPreferenceChanged.disconnect(updateSessionSettings);\n                });\n            }\n        };\n        tracker.forEach(listenToKernelPreference);\n        tracker.widgetAdded.connect((tracker, panel) => {\n            listenToKernelPreference(panel);\n        });\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: args => {\n                var _a;\n                const codeConfig = settings.get('codeCellConfig')\n                    .composite;\n                const markdownConfig = settings.get('markdownCellConfig')\n                    .composite;\n                const rawConfig = settings.get('rawCellConfig')\n                    .composite;\n                const anyToggled = codeConfig.autoClosingBrackets ||\n                    markdownConfig.autoClosingBrackets ||\n                    rawConfig.autoClosingBrackets;\n                const toggled = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !anyToggled);\n                [\n                    codeConfig.autoClosingBrackets,\n                    markdownConfig.autoClosingBrackets,\n                    rawConfig.autoClosingBrackets\n                ] = [toggled, toggled, toggled];\n                void settings.set('codeCellConfig', codeConfig);\n                void settings.set('markdownCellConfig', markdownConfig);\n                void settings.set('rawCellConfig', rawConfig);\n            },\n            label: trans.__('Auto Close Brackets for All Notebook Cell Types'),\n            isToggled: () => ['codeCellConfig', 'markdownCellConfig', 'rawCellConfig'].some(x => {\n                var _a;\n                return ((_a = settings.get(x).composite.autoClosingBrackets) !== null && _a !== void 0 ? _a : extensions.baseConfiguration['autoClosingBrackets']) === true;\n            })\n        });\n        commands.addCommand(CommandIDs.setSideBySideRatio, {\n            label: trans.__('Set side-by-side ratio'),\n            execute: args => {\n                InputDialog.getNumber({\n                    title: trans.__('Width of the output in side-by-side mode'),\n                    value: settings.get('sideBySideOutputRatio').composite\n                })\n                    .then(result => {\n                    setSideBySideOutputRatio(result.value);\n                    if (result.value) {\n                        void settings.set('sideBySideOutputRatio', result.value);\n                    }\n                })\n                    .catch(console.error);\n            }\n        });\n        addCommands(app, tracker, translator, sessionDialogs, settings, isEnabled);\n    })\n        .catch((reason) => {\n        console.warn(reason.message);\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose,\n            autoStartDefault: factory.autoStartDefault\n        });\n        addCommands(app, tracker, translator, sessionDialogs, null, isEnabled);\n    });\n    if (formRegistry) {\n        const CMRenderer = formRegistry.getRenderer('@jupyterlab/codemirror-extension:plugin.defaultConfig');\n        if (CMRenderer) {\n            formRegistry.addRenderer('@jupyterlab/notebook-extension:tracker.codeCellConfig', CMRenderer);\n            formRegistry.addRenderer('@jupyterlab/notebook-extension:tracker.markdownCellConfig', CMRenderer);\n            formRegistry.addRenderer('@jupyterlab/notebook-extension:tracker.rawCellConfig', CMRenderer);\n        }\n    }\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    const modelFactory = new NotebookModelFactory({\n        disableDocumentWideUndoRedo: factory.notebookConfig.disableDocumentWideUndoRedo,\n        collaborative: true\n    });\n    registry.addModelFactory(modelFactory);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n        if (options.notebookConfig.windowingMode !== 'full') {\n            // Disable all virtual scrollbars if any was enabled\n            tracker.forEach(widget => {\n                if (widget.content.scrollbar) {\n                    widget.content.scrollbar = false;\n                }\n            });\n        }\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = {\n            ...StaticNotebook.defaultEditorConfig.code,\n            ...settings.get('codeCellConfig').composite\n        };\n        const markdown = {\n            ...StaticNotebook.defaultEditorConfig.markdown,\n            ...settings.get('markdownCellConfig').composite\n        };\n        const raw = {\n            ...StaticNotebook.defaultEditorConfig.raw,\n            ...settings.get('rawCellConfig').composite\n        };\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            enableKernelInitNotification: settings.get('enableKernelInitNotification')\n                .composite,\n            showHiddenCellsButton: settings.get('showHiddenCellsButton')\n                .composite,\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            overscanCount: settings.get('overscanCount').composite,\n            inputHistoryScope: settings.get('inputHistoryScope').composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite,\n            showEditorForReadOnlyMarkdown: settings.get('showEditorForReadOnlyMarkdown').composite,\n            disableDocumentWideUndoRedo: !settings.get('documentWideUndoRedo')\n                .composite,\n            renderingLayout: settings.get('renderingLayout').composite,\n            sideBySideLeftMarginOverride: settings.get('sideBySideLeftMarginOverride')\n                .composite,\n            sideBySideRightMarginOverride: settings.get('sideBySideRightMarginOverride').composite,\n            sideBySideOutputRatio: settings.get('sideBySideOutputRatio')\n                .composite,\n            windowingMode: settings.get('windowingMode').composite,\n            accessKernelHistory: settings.get('accessKernelHistory')\n                .composite\n        };\n        setSideBySideOutputRatio(factory.notebookConfig.sideBySideOutputRatio);\n        const sideBySideMarginStyle = `.jp-mod-sideBySide.jp-Notebook .jp-Notebook-cell {\n      margin-left: ${factory.notebookConfig.sideBySideLeftMarginOverride} !important;\n      margin-right: ${factory.notebookConfig.sideBySideRightMarginOverride} !important;`;\n        const sideBySideMarginTag = document.getElementById(SIDE_BY_SIDE_STYLE_ID);\n        if (sideBySideMarginTag) {\n            sideBySideMarginTag.innerText = sideBySideMarginStyle;\n        }\n        else {\n            document.head.insertAdjacentHTML('beforeend', `<style id=\"${SIDE_BY_SIDE_STYLE_ID}\">${sideBySideMarginStyle}}</style>`);\n        }\n        factory.autoStartDefault = settings.get('autoStartDefaultKernel')\n            .composite;\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        modelFactory.disableDocumentWideUndoRedo = !settings.get('documentWideUndoRedo').composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose,\n            autoStartDefault: factory.autoStartDefault\n        });\n    }\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(mainMenu, isEnabled);\n    }\n    // Utility function to create a new notebook.\n    const createNew = async (cwd, kernelId, kernelName) => {\n        const model = await commands.execute('docmanager:new-untitled', {\n            path: cwd,\n            type: 'notebook'\n        });\n        if (model !== undefined) {\n            const widget = (await commands.execute('docmanager:open', {\n                path: model.path,\n                factory: FACTORY,\n                kernel: { id: kernelId, name: kernelName }\n            }));\n            widget.isUntitled = true;\n            return widget;\n        }\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette'] || args['isContextMenu']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            var _a, _b;\n            const currentBrowser = (_a = filebrowserFactory === null || filebrowserFactory === void 0 ? void 0 : filebrowserFactory.tracker.currentWidget) !== null && _a !== void 0 ? _a : defaultBrowser;\n            const cwd = args['cwd'] || ((_b = currentBrowser === null || currentBrowser === void 0 ? void 0 : currentBrowser.model.path) !== null && _b !== void 0 ? _b : '');\n            const kernelId = args['kernelId'] || '';\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelId, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    const kernelIconUrl = spec.resources['logo-svg'] || spec.resources['logo-64x64'];\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    return tracker;\n}\n/**\n * Activate the completer service for notebook.\n */\nfunction activateNotebookCompleterService(app, notebooks, manager, translator, appSanitizer) {\n    if (!manager) {\n        return;\n    }\n    const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n    const sanitizer = appSanitizer !== null && appSanitizer !== void 0 ? appSanitizer : new Sanitizer();\n    app.commands.addCommand(CommandIDs.invokeCompleter, {\n        label: trans.__('Display the completion helper.'),\n        execute: args => {\n            var _a;\n            const panel = notebooks.currentWidget;\n            if (panel && ((_a = panel.content.activeCell) === null || _a === void 0 ? void 0 : _a.model.type) === 'code') {\n                manager.invoke(panel.id);\n            }\n        }\n    });\n    app.commands.addCommand(CommandIDs.selectCompleter, {\n        label: trans.__('Select the completion suggestion.'),\n        execute: () => {\n            const id = notebooks.currentWidget && notebooks.currentWidget.id;\n            if (id) {\n                return manager.select(id);\n            }\n        }\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.selectCompleter,\n        keys: ['Enter'],\n        selector: '.jp-Notebook .jp-mod-completer-active'\n    });\n    const updateCompleter = async (_, notebook) => {\n        var _a, _b;\n        const completerContext = {\n            editor: (_b = (_a = notebook.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null,\n            session: notebook.sessionContext.session,\n            widget: notebook,\n            sanitizer: sanitizer\n        };\n        await manager.updateCompleter(completerContext);\n        notebook.content.activeCellChanged.connect((_, cell) => {\n            // Ensure the editor will exist on the cell before adding the completer\n            cell === null || cell === void 0 ? void 0 : cell.ready.then(() => {\n                const newCompleterContext = {\n                    editor: cell.editor,\n                    session: notebook.sessionContext.session,\n                    widget: notebook,\n                    sanitizer: sanitizer\n                };\n                return manager.updateCompleter(newCompleterContext);\n            }).catch(console.error);\n        });\n        notebook.sessionContext.sessionChanged.connect(() => {\n            var _a;\n            // Ensure the editor will exist on the cell before adding the completer\n            (_a = notebook.content.activeCell) === null || _a === void 0 ? void 0 : _a.ready.then(() => {\n                var _a, _b;\n                const newCompleterContext = {\n                    editor: (_b = (_a = notebook.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null,\n                    session: notebook.sessionContext.session,\n                    widget: notebook\n                };\n                return manager.updateCompleter(newCompleterContext);\n            }).catch(console.error);\n        });\n    };\n    notebooks.widgetAdded.connect(updateCompleter);\n    manager.activeProvidersChanged.connect(() => {\n        notebooks.forEach(panel => {\n            updateCompleter(undefined, panel).catch(e => console.error(e));\n        });\n    });\n}\n/**\n * Activate the language server for notebook.\n */\nfunction activateNotebookLanguageServer(app, notebooks, connectionManager, featureManager, codeExtractorManager, adapterTracker) {\n    notebooks.widgetAdded.connect(async (_, notebook) => {\n        const adapter = new NotebookAdapter(notebook, {\n            connectionManager,\n            featureManager,\n            foreignCodeExtractorsManager: codeExtractorManager\n        });\n        adapterTracker.add(adapter);\n    });\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs, settings, isEnabled) {\n    var _a;\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    const refreshCellCollapsed = (notebook) => {\n        var _a, _b;\n        for (const cell of notebook.widgets) {\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n            }\n            if (cell.model.id === ((_b = (_a = notebook.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.id)) {\n                NotebookActions.expandParent(cell, notebook);\n            }\n        }\n    };\n    const isEnabledAndHeadingSelected = () => {\n        return Private.isEnabledAndHeadingSelected(shell, tracker);\n    };\n    // Set up signal handler to keep the collapse state consistent\n    tracker.currentChanged.connect((sender, panel) => {\n        var _a, _b;\n        if (!((_b = (_a = panel === null || panel === void 0 ? void 0 : panel.content) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells)) {\n            return;\n        }\n        panel.content.model.cells.changed.connect((list, args) => {\n            // Might be overkill to refresh this every time, but\n            // it helps to keep the collapse state consistent.\n            refreshCellCollapsed(panel.content);\n        });\n        panel.content.activeCellChanged.connect((notebook, cell) => {\n            NotebookActions.expandParent(cell, notebook);\n        });\n    });\n    tracker.selectionChanged.connect(() => {\n        commands.notifyCommandChanged(CommandIDs.duplicateBelow);\n        commands.notifyCommandChanged(CommandIDs.deleteCell);\n        commands.notifyCommandChanged(CommandIDs.copy);\n        commands.notifyCommandChanged(CommandIDs.cut);\n        commands.notifyCommandChanged(CommandIDs.pasteBelow);\n        commands.notifyCommandChanged(CommandIDs.pasteAbove);\n        commands.notifyCommandChanged(CommandIDs.pasteAndReplace);\n        commands.notifyCommandChanged(CommandIDs.moveUp);\n        commands.notifyCommandChanged(CommandIDs.moveDown);\n        commands.notifyCommandChanged(CommandIDs.run);\n        commands.notifyCommandChanged(CommandIDs.runAll);\n        commands.notifyCommandChanged(CommandIDs.runAndAdvance);\n        commands.notifyCommandChanged(CommandIDs.runAndInsert);\n    });\n    tracker.activeCellChanged.connect(() => {\n        commands.notifyCommandChanged(CommandIDs.moveUp);\n        commands.notifyCommandChanged(CommandIDs.moveDown);\n    });\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Run Selected Cell', 'Run Selected Cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Run this cell and advance', 'Run these %1 cells and advance', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled: args => (args.toolbar ? true : isEnabled()),\n        icon: args => (args.toolbar ? runIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Run Selected Cell and Do not Advance', 'Run Selected Cells and Do not Advance', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Run Selected Cell and Insert Below', 'Run Selected Cells and Insert Below', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        caption: trans.__('Run all cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content } = current;\n                return NotebookActions.renderAllMarkdown(content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        caption: trans.__('Restart the kernel'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext);\n            }\n        },\n        isEnabled: args => (args.toolbar ? true : isEnabled()),\n        icon: args => (args.toolbar ? refreshIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        label: trans.__('Shut Down Kernel'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            return current.context.sessionContext.shutdown();\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down Notebook…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return commands\n                        .execute(CommandIDs.shutdown, { activate: false })\n                        .then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear Outputs of All Cells…'),\n        caption: trans.__('Restart the kernel and clear all outputs of all cells'),\n        execute: async () => {\n            const restarted = await commands.execute(CommandIDs.restart, {\n                activate: false\n            });\n            if (restarted) {\n                await commands.execute(CommandIDs.clearAllOutputs);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: async (args) => {\n            const current = getCurrent(tracker, shell, { activate: false, ...args });\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cells = content.widgets.slice(0, content.activeCellIndex + 1);\n            const restarted = await sessionDialogs.restart(current.sessionContext);\n            if (restarted) {\n                return NotebookActions.runCells(content, cells, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        caption: trans.__('Restart the kernel and run all cells'),\n        execute: async (args) => {\n            const current = getCurrent(tracker, shell, { activate: false, ...args });\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cells = content.widgets;\n            const restarted = await sessionDialogs.restart(current.sessionContext);\n            if (restarted) {\n                return NotebookActions.runCells(content, cells, context.sessionContext, sessionDialogs, translator);\n            }\n        },\n        isEnabled: args => (args.toolbar ? true : isEnabled()),\n        icon: args => (args.toolbar ? fastForwardIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear Outputs of All Cells'),\n        caption: trans.__('Clear all outputs of all cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Cell Output'),\n        caption: trans.__('Clear outputs for the selected cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        caption: trans.__('Interrupt the kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled: args => (args.toolbar ? true : isEnabled()),\n        icon: args => (args.toolbar ? stopIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code', translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown', translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw', translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Cut Cell', 'Cut Cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Cut this cell', 'Cut these %1 cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? cutIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Copy Cell', 'Copy Cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Copy this cell', 'Copy these %1 cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? copyIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Paste Cell Below', 'Paste Cells Below', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Paste this cell from the clipboard', 'Paste these %1 cells from the clipboard', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        icon: args => (args.toolbar ? pasteIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Paste Cell Above', 'Paste Cells Above', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Paste this cell from the clipboard', 'Paste these %1 cells from the clipboard', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.duplicateBelow, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Duplicate Cell Below', 'Duplicate Cells Below', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Create a duplicate of this cell below', 'Create duplicates of %1 cells below', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                NotebookActions.duplicate(current.content, 'belowSelected');\n            }\n        },\n        icon: args => (args.toolbar ? duplicateIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Paste Cell and Replace', 'Paste Cells and Replace', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Delete Cell', 'Delete Cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Delete this cell', 'Delete these %1 cells', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        caption: trans.__('Insert a cell above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addAboveIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        caption: trans.__('Insert a cell below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        icon: args => (args.toolbar ? addBelowIcon : undefined),\n        isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertHeadingAbove, {\n        label: trans.__('Insert Heading Above Current Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertSameLevelHeadingAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertHeadingBelow, {\n        label: trans.__('Insert Heading Below Current Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertSameLevelHeadingBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectHeadingAboveOrCollapse, {\n        label: trans.__('Select Heading Above or Collapse Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectHeadingAboveOrCollapseHeading(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectHeadingBelowOrExpand, {\n        label: trans.__('Select Heading Below or Expand Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectHeadingBelowOrExpandHeading(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Move Cell Up', 'Move Cells Up', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Move this cell up', 'Move these %1 cells up', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                NotebookActions.moveUp(current.content);\n                Private.raiseSilentNotification(trans.__('Notebook cell shifted up successfully'), current.node);\n            }\n        },\n        isEnabled: args => {\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            if (!current) {\n                return false;\n            }\n            return current.content.activeCellIndex >= 1;\n        },\n        icon: args => (args.toolbar ? moveUpIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Move Cell Down', 'Move Cells Down', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        caption: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            return trans._n('Move this cell down', 'Move these %1 cells down', (_a = current === null || current === void 0 ? void 0 : current.content.selectedCells.length) !== null && _a !== void 0 ? _a : 1);\n        },\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                NotebookActions.moveDown(current.content);\n                Private.raiseSilentNotification(trans.__('Notebook cell shifted down successfully'), current.node);\n            }\n        },\n        isEnabled: args => {\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            if (!current || !current.content.model) {\n                return false;\n            }\n            const length = current.content.model.cells.length;\n            return current.content.activeCellIndex < length - 1;\n        },\n        icon: args => (args.toolbar ? moveDownIcon : undefined)\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Show Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled,\n        isToggled: args => {\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            if (current) {\n                const config = current.content.editorConfig;\n                return !!(config.code.lineNumbers &&\n                    config.markdown.lineNumbers &&\n                    config.raw.lineNumbers);\n            }\n            else {\n                return false;\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redo, {\n        label: trans.__('Redo'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const cell = current.content.activeCell;\n                if (cell) {\n                    cell.inputHidden = false;\n                    return (_a = cell.editor) === null || _a === void 0 ? void 0 : _a.redo();\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.undo, {\n        label: trans.__('Undo'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const cell = current.content.activeCell;\n                if (cell) {\n                    cell.inputHidden = false;\n                    return (_a = cell.editor) === null || _a === void 0 ? void 0 : _a.undo();\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.getKernel, {\n        label: trans.__('Get Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, { activate: false, ...args });\n            if (current) {\n                return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect to Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleOutput, {\n        label: trans.__('Toggle Visibility of Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleRenderSideBySideCurrentNotebook, {\n        label: trans.__('Render Side-by-Side'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                if (current.content.renderingLayout === 'side-by-side') {\n                    return NotebookActions.renderDefault(current.content);\n                }\n                return NotebookActions.renderSideBySide(current.content);\n            }\n        },\n        isEnabled,\n        isToggled: args => {\n            const current = getCurrent(tracker, shell, { ...args, activate: false });\n            if (current) {\n                return current.content.renderingLayout === 'side-by-side';\n            }\n            else {\n                return false;\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleCollapseCmd, {\n        label: trans.__('Toggle Collapse Notebook Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleCurrentHeadingCollapse(current.content);\n            }\n        },\n        isEnabled: isEnabledAndHeadingSelected\n    });\n    commands.addCommand(CommandIDs.collapseAllCmd, {\n        label: trans.__('Collapse All Headings'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.collapseAllHeadings(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.expandAllCmd, {\n        label: trans.__('Expand All Headings'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.expandAllHeadings(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.tocRunCells, {\n        label: trans.__('Select and Run Cell(s) for this Heading'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, { activate: false, ...args });\n            if (current === null) {\n                return;\n            }\n            const activeCell = current.content.activeCell;\n            let lastIndex = current.content.activeCellIndex;\n            if (activeCell instanceof MarkdownCell) {\n                const cells = current.content.widgets;\n                const level = activeCell.headingInfo.level;\n                for (let i = current.content.activeCellIndex + 1; i < cells.length; i++) {\n                    const cell = cells[i];\n                    if (cell instanceof MarkdownCell &&\n                        // cell.headingInfo.level === -1 if no heading\n                        cell.headingInfo.level >= 0 &&\n                        cell.headingInfo.level <= level) {\n                        break;\n                    }\n                    lastIndex = i;\n                }\n            }\n            current.content.extendContiguousSelectionTo(lastIndex);\n            void NotebookActions.run(current.content, current.sessionContext, sessionDialogs, translator);\n        }\n    });\n    commands.addCommand(CommandIDs.accessPreviousHistory, {\n        label: trans.__('Access Previous Kernel History Entry'),\n        execute: async (args) => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return await NotebookActions.accessPreviousHistory(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.accessNextHistory, {\n        label: trans.__('Access Next Kernel History Entry'),\n        execute: async (args) => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return await NotebookActions.accessNextHistory(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.virtualScrollbar, {\n        label: trans.__('Show Minimap'),\n        caption: trans.__('Show Minimap (virtual scrollbar, enabled with windowing mode: full)'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.scrollbar = !current.content.scrollbar;\n            }\n        },\n        icon: args => (args.toolbar ? tableRowsIcon : undefined),\n        isEnabled: args => {\n            var _a;\n            const enabled = (args.toolbar ? true : isEnabled()) &&\n                ((_a = (settings === null || settings === void 0 ? void 0 : settings.composite.windowingMode) === 'full') !== null && _a !== void 0 ? _a : false);\n            return enabled;\n        },\n        isToggled: () => {\n            var _a;\n            const current = tracker.currentWidget;\n            return (_a = current === null || current === void 0 ? void 0 : current.content.scrollbar) !== null && _a !== void 0 ? _a : false;\n        },\n        isVisible: args => {\n            var _a;\n            const visible = (args.toolbar ? true : isEnabled()) &&\n                ((_a = (settings === null || settings === void 0 ? void 0 : settings.composite.windowingMode) === 'full') !== null && _a !== void 0 ? _a : false);\n            return visible;\n        }\n    });\n    // All commands with isEnabled defined directly or in a semantic commands\n    // To simplify here we added all commands as most of them have isEnabled\n    const skip = [CommandIDs.createNew, CommandIDs.createOutputView];\n    const notify = () => {\n        Object.values(CommandIDs)\n            .filter(id => !skip.includes(id) && app.commands.hasCommand(id))\n            .forEach(id => app.commands.notifyCommandChanged(id));\n    };\n    tracker.currentChanged.connect(notify);\n    (_a = shell.currentChanged) === null || _a === void 0 ? void 0 : _a.connect(notify);\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust,\n        CommandIDs.toggleCollapseCmd,\n        CommandIDs.collapseAllCmd,\n        CommandIDs.expandAllCmd,\n        CommandIDs.accessPreviousHistory,\n        CommandIDs.accessNextHistory,\n        CommandIDs.virtualScrollbar\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.selectHeadingAboveOrCollapse,\n        CommandIDs.selectHeadingBelowOrExpand,\n        CommandIDs.insertHeadingAbove,\n        CommandIDs.insertHeadingBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.toggleOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.toggleRenderSideBySideCurrentNotebook,\n        CommandIDs.setSideBySideRatio,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(mainMenu, isEnabled) {\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.redo.add({\n        id: CommandIDs.redo,\n        isEnabled\n    });\n    mainMenu.editMenu.undoers.undo.add({\n        id: CommandIDs.undo,\n        isEnabled\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.clearAll.add({\n        id: CommandIDs.clearAllOutputs,\n        isEnabled\n    });\n    mainMenu.editMenu.clearers.clearCurrent.add({\n        id: CommandIDs.clearOutputs,\n        isEnabled\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        id: CommandIDs.createConsole,\n        isEnabled\n    });\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        id: CommandIDs.closeAndShutdown,\n        isEnabled\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.changeKernel.add({\n        id: CommandIDs.changeKernel,\n        isEnabled\n    });\n    mainMenu.kernelMenu.kernelUsers.clearWidget.add({\n        id: CommandIDs.clearAllOutputs,\n        isEnabled\n    });\n    mainMenu.kernelMenu.kernelUsers.interruptKernel.add({\n        id: CommandIDs.interrupt,\n        isEnabled\n    });\n    mainMenu.kernelMenu.kernelUsers.reconnectToKernel.add({\n        id: CommandIDs.reconnectToKernel,\n        isEnabled\n    });\n    mainMenu.kernelMenu.kernelUsers.restartKernel.add({\n        id: CommandIDs.restart,\n        isEnabled\n    });\n    mainMenu.kernelMenu.kernelUsers.shutdownKernel.add({\n        id: CommandIDs.shutdown,\n        isEnabled\n    });\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.toggleLineNumbers.add({\n        id: CommandIDs.toggleAllLines,\n        isEnabled\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.restart.add({\n        id: CommandIDs.restart,\n        isEnabled\n    });\n    mainMenu.runMenu.codeRunners.run.add({\n        id: CommandIDs.runAndAdvance,\n        isEnabled\n    });\n    mainMenu.runMenu.codeRunners.runAll.add({ id: CommandIDs.runAll, isEnabled });\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.getKernel.add({\n        id: CommandIDs.getKernel,\n        isEnabled\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom',\n            type: 'Linked Console'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndHeadingSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        if (!(content.activeCell instanceof MarkdownCell)) {\n            return false;\n        }\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndHeadingSelected = isEnabledAndHeadingSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * Raises a silent notification that is read by screen readers\n     *\n     * FIXME: Once a notificatiom API is introduced (https://github.com/jupyterlab/jupyterlab/issues/689),\n     * this can be refactored to use the same.\n     *\n     * More discussion at https://github.com/jupyterlab/jupyterlab/pull/9031#issuecomment-773541469\n     *\n     *\n     * @param message Message to be relayed to screen readers\n     * @param notebookNode DOM node to which the notification container is attached\n     */\n    function raiseSilentNotification(message, notebookNode) {\n        const hiddenAlertContainerId = `sr-message-container-${notebookNode.id}`;\n        const hiddenAlertContainer = document.getElementById(hiddenAlertContainerId) ||\n            document.createElement('div');\n        // If the container is not available, append the newly created container\n        // to the current notebook panel and set related properties\n        if (hiddenAlertContainer.getAttribute('id') !== hiddenAlertContainerId) {\n            hiddenAlertContainer.classList.add('sr-only');\n            hiddenAlertContainer.setAttribute('id', hiddenAlertContainerId);\n            hiddenAlertContainer.setAttribute('role', 'alert');\n            hiddenAlertContainer.hidden = true;\n            notebookNode.appendChild(hiddenAlertContainer);\n        }\n        // Insert/Update alert container with the notification message\n        hiddenAlertContainer.innerText = message;\n    }\n    Private.raiseSilentNotification = raiseSilentNotification;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport React from 'react';\nimport { NotebookTools } from '@jupyterlab/notebook';\nimport { ObservableJSON } from '@jupyterlab/observables';\nconst CELL_METADATA_EDITOR_CLASS = 'jp-CellMetadataEditor';\nconst NOTEBOOK_METADATA_EDITOR_CLASS = 'jp-NotebookMetadataEditor';\n/**\n * The cell metadata field.\n *\n * ## Note\n * This field does not work as other metadata form fields, as it does not use RJSF to update metadata.\n * It extends the MetadataEditorTool which updates itself the metadata.\n * It only renders the node of MetadataEditorTool in a React element instead of displaying a RJSF field.\n */\nexport class CellMetadataField extends NotebookTools.MetadataEditorTool {\n    constructor(options) {\n        super(options);\n        this._tracker = options.tracker;\n        this.editor.editorHostNode.addEventListener('blur', this.editor, true);\n        this.editor.editorHostNode.addEventListener('click', this.editor, true);\n        this.editor.headerNode.addEventListener('click', this.editor);\n    }\n    _onSourceChanged() {\n        var _a;\n        if (this.editor.source) {\n            (_a = this._tracker.activeCell) === null || _a === void 0 ? void 0 : _a.model.sharedModel.setMetadata(this.editor.source.toJSON());\n        }\n    }\n    render(props) {\n        var _a;\n        const cell = this._tracker.activeCell;\n        this.editor.source = cell\n            ? new ObservableJSON({ values: cell.model.metadata })\n            : null;\n        (_a = this.editor.source) === null || _a === void 0 ? void 0 : _a.changed.connect(this._onSourceChanged, this);\n        return (React.createElement(\"div\", { className: CELL_METADATA_EDITOR_CLASS },\n            React.createElement(\"div\", { ref: ref => ref === null || ref === void 0 ? void 0 : ref.appendChild(this.node) })));\n    }\n}\n/**\n * The notebook metadata field.\n *\n * ## Note\n * This field does not work as other metadata form fields, as it does not use RJSF to update metadata.\n * It extends the MetadataEditorTool which updates itself the metadata.\n * It only renders the node of MetadataEditorTool in a React element instead of displaying a RJSF field.\n */\nexport class NotebookMetadataField extends NotebookTools.MetadataEditorTool {\n    constructor(options) {\n        super(options);\n        this._tracker = options.tracker;\n        this.editor.editorHostNode.addEventListener('blur', this.editor, true);\n        this.editor.editorHostNode.addEventListener('click', this.editor, true);\n        this.editor.headerNode.addEventListener('click', this.editor);\n    }\n    _onSourceChanged() {\n        var _a, _b;\n        if (this.editor.source) {\n            (_b = (_a = this._tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.sharedModel.setMetadata(this.editor.source.toJSON());\n        }\n    }\n    render(props) {\n        var _a, _b;\n        const notebook = this._tracker.currentWidget;\n        this.editor.source = notebook\n            ? new ObservableJSON({ values: (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.metadata })\n            : null;\n        (_b = this.editor.source) === null || _b === void 0 ? void 0 : _b.changed.connect(this._onSourceChanged, this);\n        return (React.createElement(\"div\", { className: NOTEBOOK_METADATA_EDITOR_CLASS },\n            React.createElement(\"div\", { ref: ref => ref === null || ref === void 0 ? void 0 : ref.appendChild(this.node) })));\n    }\n}\n//# sourceMappingURL=metadataEditorFields.js.map"],"names":["cellExecutor","id","description","autoStart","provides","INotebookCellExecutor","activate","Object","freeze","runCell","logNotebookOutput","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","isDisplayDataMsg","isStreamMsg","isErrorMsg","isExecuteResultMsg","logger","getLogger","context","path","rendermime","content","data","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","requires","INotebookTracker","optional","ILoggerRegistry","ActiveCellTool","NotebookTools","Tool","constructor","options","super","languages","this","_tracker","tracker","addClass","layout","PanelLayout","_inputPrompt","InputPrompt","addWidget","node","document","createElement","classList","add","container","appendChild","editor","className","_editorEl","Widget","_refreshDebouncer","Debouncer","async","_a","_b","innerHTML","_cellModel","executionCount","show","hide","highlight","sharedModel","getSource","split","findByMIME","mimeType","render","props","activeCell","model","changed","refresh","mimeTypeChanged","then","catch","ref","invoke","CommandIDs","CellMetadataField","MetadataEditorTool","editorHostNode","addEventListener","headerNode","_onSourceChanged","source","setMetadata","toJSON","cell","ObservableJSON","values","metadata","NotebookMetadataField","currentWidget","notebook","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","getKernel","createConsole","createOutputView","clearAllOutputs","shutdown","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","duplicateBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","selectHeadingAboveOrCollapse","selectHeadingBelowOrExpand","insertHeadingAbove","insertHeadingBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","commandMode","toggleAllLines","undoCellAction","redoCellAction","redo","undo","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","toggleOutput","hideAllOutputs","showAllOutputs","toggleRenderSideBySideCurrentNotebook","setSideBySideRatio","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","autoClosingBrackets","toggleCollapseCmd","collapseAllCmd","expandAllCmd","copyToClipboard","invokeCompleter","selectCompleter","tocRunCells","accessPreviousHistory","accessNextHistory","virtualScrollbar","FACTORY","FORMAT_EXCLUDE","SIDE_BY_SIDE_STYLE_ID","trackerPlugin","INotebookWidgetFactory","IEditorExtensionRegistry","ICommandPalette","IDefaultFileBrowser","ILauncher","ILayoutRestorer","IMainMenu","IRouter","ISettingRegistry","ISessionContextDialogs","ITranslator","IFormRendererRegistry","IFileBrowserFactory","factory","extensions","executor","palette","defaultBrowser","launcher","restorer","mainMenu","router","settingRegistry","sessionDialogs_","translator_","formRegistry","filebrowserFactory","setCellExecutor","translator","nullTranslator","sessionDialogs","SessionContextDialogs","trans","load","services","serviceManager","commands","shell","NotebookTracker","namespace","routed","location","hash","setFragment","isEnabled","Private","setSideBySideOutputRatio","sideBySideOutputRatio","documentElement","style","setProperty","Promise","reject","Error","settings","updateConfig","notifyCommandChanged","updateSessionSettings","session","changes","newValue","oldValue","autoStartDefault","get","composite","set","reason","console","error","sessionContexts","WeakSet","listenToKernelPreference","panel","isDisposed","has","kernelPreferenceChanged","disposed","disconnect","addCommand","execute","args","codeConfig","markdownConfig","rawConfig","anyToggled","toggled","label","__","isToggled","some","x","baseConfiguration","InputDialog","getNumber","title","value","result","addCommands","warn","message","updateTracker","editorConfig","notebookConfig","kernelShutdown","shutdownOnClose","CMRenderer","getRenderer","addRenderer","restore","command","when","ready","registry","docRegistry","modelFactory","NotebookModelFactory","disableDocumentWideUndoRedo","collaborative","addModelFactory","category","addItem","isPalette","populatePalette","ft","getFileType","widget","setConfig","windowingMode","scrollbar","code","StaticNotebook","defaultEditorConfig","markdown","raw","enableKernelInitNotification","showHiddenCellsButton","scrollPastEnd","defaultCell","recordTiming","overscanCount","inputHistoryScope","maxNumberOutputs","showEditorForReadOnlyMarkdown","renderingLayout","sideBySideLeftMarginOverride","sideBySideRightMarginOverride","accessKernelHistory","sideBySideMarginStyle","sideBySideMarginTag","getElementById","innerText","head","insertAdjacentHTML","widgetCreated","sender","icon","iconClass","iconLabel","pathChanged","save","editMenu","undoers","clearers","clearAll","clearCurrent","fileMenu","consoleCreators","closeAndCleaners","kernelMenu","kernelUsers","clearWidget","interruptKernel","restartKernel","shutdownKernel","viewMenu","editorViewers","toggleLineNumbers","runMenu","codeRunners","helpMenu","populateMenus","_c","kernelName","kernelspecs","specs","display_name","caption","undefined","notebookIcon","currentBrowser","cwd","kernelId","kernel","isUntitled","disposables","onSpecsChanged","dispose","DisposableSet","rank","default","Infinity","spec","kernelIconUrl","resources","isLauncher","JSONExt","deepCopy","specsChanged","NotebookPanel","IContentFactory","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","ContentFactory","tools","state","inspectorProvider","notebookTools","buildIcon","MessageLoop","installMessageHook","open","remove","register","INotebookTools","IEditorLanguageRegistry","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","currentChanged","current","registerStatusItem","priority","align","isActive","executionIndicator","ILabShell","notebookTracker","labShell","statusbarItem","labShellCurrentChanged","statusBarDisposable","updateSettings","showOnToolBar","showProgress","ExecutionIndicator","change","attachNotebook","displayOption","loadSettings","all","restored","getSettingValue","exportPlugin","exportTo","formatLabel","getCurrent","url","PageConfig","getNBConvertURL","format","download","dirty","readOnly","window","resolve","items","find","submenu","formatsInitialized","maybeInitializeFormats","response","nbconvert","getExportFormats","formatLabels","getFormatLabels","keys","key","capCaseKey","toUpperCase","substr","labelStr","indexOf","notebookTrustItem","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","IToolbarWidgetRegistry","contentFactory","toolbarRegistry","sessionContextDialogs_","sessionContextDialogs","preferKernelOption","getOption","preferKernelValue","toLowerCase","toolbarFactory","addFactory","createSaveButton","fileChanged","ToolbarItems","createCellTypeItem","Toolbar","createKernelNameItem","loadingSettings","indicator","createExecutionIndicatorItem","createToolbarFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","defaultNotebookConfig","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","clonedOutputs","WidgetTracker","index","findWidget","activeCellIndex","ClonedOutputArea","MainAreaWidget","addSibling","mode","updateCloned","cells","isEnabledAndSingleSelected","codeConsolePlugin","selection","getSelection","start","end","column","line","getOffsetAt","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","length","fromFirst","firstLine","lastLine","slice","join","reply","requestIsComplete","status","setCursorPosition","insertMode","copyOutputPlugin","output","outputArea","outputTracker","outputAreaAreas","getElementsByClassName","e","sel","savedRanges","i","rangeCount","getRangeAt","cloneRange","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","r","copyElement","contextMenu","selector","kernelStatus","addSessionProvider","IKernelStatusModel","lineColStatus","positionModel","previousWidget","addEditorProvider","activeCellChanged","update","IPositionModel","completerPlugin","ICompletionProviderManager","ISanitizer","notebooks","manager","appSanitizer","sanitizer","Sanitizer","select","addKeyBinding","updateCompleter","completerContext","newCompleterContext","sessionChanged","activeProvidersChanged","searchProvider","ISearchProviderRegistry","NotebookSearchProvider","tocPlugin","ITableOfContentsRegistry","IMarkdownParser","tocRegistry","mdParser","nbTocFactory","NotebookToCFactory","setting","onSettingsUpdate","scrollToTop","languageServerPlugin","ILSPDocumentConnectionManager","ILSPFeatureManager","ILSPCodeExtractorsManager","IWidgetLSPAdapterTracker","connectionManager","featureManager","codeExtractorManager","adapterTracker","adapter","NotebookAdapter","foreignCodeExtractorsManager","updateRawMimetype","IMetadataFormProvider","metadataForms","properties","getProperties","formatList","oneOf","filter","const","altOption","option","mimeTypeValue","output_mimetype","push","setProperties","customMetadataEditorFields","cellComponent","fieldRenderer","notebookComponent","activeCellTool","component","activateById","list","widgets","MarkdownCell","headingCollapsed","NotebookActions","setHeadingCollapse","expandParent","refreshCellCollapsed","selectionChanged","_n","selectedCells","toolbar","runIcon","refreshIcon","fileName","showDialog","body","buttons","Dialog","cancelButton","warnButton","button","accept","runCells","fastForwardIcon","stopIcon","changeCellType","cutIcon","copyIcon","paste","pasteIcon","duplicate","duplicateIcon","deleteCells","splitCell","mergeCells","addAboveIcon","addBelowIcon","insertSameLevelHeadingAbove","insertSameLevelHeadingBelow","selectHeadingAboveOrCollapseHeading","selectHeadingBelowOrExpandHeading","extendSelectionAbove","extendSelectionBelow","raiseSilentNotification","moveUpIcon","moveDownIcon","toggleAllLineNumbers","config","lineNumbers","inputHidden","selectKernel","reconnect","setMarkdownHeader","renderDefault","renderSideBySide","text","toggleCurrentHeadingCollapse","isEnabledAndHeadingSelected","collapseAllHeadings","expandAllHeadings","lastIndex","headingInfo","extendContiguousSelectionTo","tableRowsIcon","isVisible","skip","notify","includes","hasCommand","preferredLanguage","defaultKernelLanguage","isSelected","html","latex","pdf","rst","script","slides","notebookNode","hiddenAlertContainerId","hiddenAlertContainer","getAttribute","setAttribute","hidden","Panel","_cell","_notebook","_index","UUID","uuid4","clone","cloneOutputArea","ArrayExt","findFirstIndex","c"],"sourceRoot":""}