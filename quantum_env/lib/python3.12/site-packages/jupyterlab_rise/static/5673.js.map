{"version":3,"file":"5673.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, homeIcon as preferredIcon, folderIcon as rootIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_ROOT_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name for the breadcrumbs preferred node\n */\nconst BREADCRUMB_PREFERRED_CLASS = 'jp-BreadCrumbs-preferred';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param options Constructor options.\n     */\n    constructor(options) {\n        super();\n        this._previousState = null;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._fullPath = options.fullPath || false;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        const hasPreferred = PageConfig.getOption('preferredPath');\n        this._hasPreferred = hasPreferred && hasPreferred !== '/' ? true : false;\n        if (this._hasPreferred) {\n            this.node.appendChild(this._crumbs[Private.Crumb.Preferred]);\n        }\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Whether to show the full path in the breadcrumbs\n     */\n    get fullPath() {\n        return this._fullPath;\n    }\n    set fullPath(value) {\n        this._fullPath = value;\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        const state = {\n            path: localPath,\n            hasPreferred: this._hasPreferred,\n            fullPath: this._fullPath\n        };\n        if (this._previousState && JSONExt.deepEqual(state, this._previousState)) {\n            return;\n        }\n        this._previousState = state;\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, state);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_PREFERRED_CLASS)) {\n                this._model\n                    .cd(PageConfig.getOption('preferredPath'))\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_ROOT_CLASS)) {\n                let index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                let destination = BREAD_CRUMB_PATHS[index];\n                if (this._fullPath &&\n                    index < 0 &&\n                    !node.classList.contains(BREADCRUMB_ROOT_CLASS)) {\n                    destination = node.title;\n                }\n                this._model\n                    .cd(destination)\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n        Crumb[Crumb[\"Preferred\"] = 4] = \"Preferred\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, state) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the home or preferred node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        if (state.hasPreferred) {\n            node.appendChild(breadcrumbs[Crumb.Home]);\n            node.appendChild(separators[0]);\n        }\n        else {\n            node.appendChild(separators[0]);\n        }\n        const parts = state.path.split('/');\n        if (!state.fullPath && parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (state.path) {\n            if (!state.fullPath) {\n                if (parts.length >= 2) {\n                    breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                    node.appendChild(breadcrumbs[Crumb.Parent]);\n                    const parent = parts.slice(0, parts.length - 1).join('/');\n                    breadcrumbs[Crumb.Parent].title = parent;\n                    node.appendChild(separators[2]);\n                }\n                breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n                node.appendChild(breadcrumbs[Crumb.Current]);\n                breadcrumbs[Crumb.Current].title = state.path;\n                node.appendChild(separators[3]);\n            }\n            else {\n                for (let i = 0; i < parts.length; i++) {\n                    const elem = document.createElement('span');\n                    elem.className = BREADCRUMB_ITEM_CLASS;\n                    elem.textContent = parts[i];\n                    const elemPath = `/${parts.slice(0, i + 1).join('/')}`;\n                    elem.title = elemPath;\n                    node.appendChild(elem);\n                    const separator = document.createElement('span');\n                    separator.textContent = '/';\n                    node.appendChild(separator);\n                }\n            }\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = rootIcon.element({\n            className: BREADCRUMB_ROOT_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        const preferred = preferredIcon.element({\n            className: BREADCRUMB_PREFERRED_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('preferredPath') || 'Jupyter Preferred Path',\n            stylesheet: 'breadCrumb'\n        });\n        return [home, ellipsis, parent, current, preferred];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, filter, StringExt } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_NAME_COLUMN_CLASS = 'jp-DirListing-itemName';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the listing item file size cell.\n */\nconst ITEM_FILE_SIZE_CLASS = 'jp-DirListing-itemFileSize';\n/**\n * The class name added to the label element that wraps each item's checkbox and\n * the header's check-all checkbox.\n */\nconst CHECKBOX_WRAPPER_CLASS = 'jp-DirListing-checkboxWrapper';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the file size column header cell.\n */\nconst FILE_SIZE_ID_CLASS = 'jp-id-filesize';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to column resize handle.\n */\nconst RESIZE_HANDLE_CLASS = 'jp-DirListing-resizeHandle';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added to indicate the active element.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The class name added for a descending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The default width of the resize handle.\n */\nconst DEFAULT_HANDLE_WIDTH = 5;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param options The constructor options\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._resizeData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this.selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this._hiddenColumns = new Set();\n        this._columnSizes = {\n            name: null,\n            file_size: null,\n            is_selected: null,\n            last_modified: null\n        };\n        this._sortNotebooksFirst = false;\n        this._allowSingleClick = false;\n        // _focusIndex should never be set outside the range [0, this._items.length - 1]\n        this._focusIndex = 0;\n        this._allUploaded = new Signal(this);\n        this._width = null;\n        this._state = null;\n        this._contentScrollbarWidth = 0;\n        this._contentSizeObserver = new ResizeObserver(this._onContentResize.bind(this));\n        this._paddingWidth = 0;\n        this._handleWidth = DEFAULT_HANDLE_WIDTH;\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        this._state = options.state || null;\n        // Get the width of the \"modified\" column\n        this._updateModifiedSize(this.node);\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        // hide the file size column by default\n        this._hiddenColumns.add('file_size');\n        this._renderer.populateHeaderNode(headerNode, this.translator, this._hiddenColumns, this._columnSizes);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this.selection[item.path]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return this._sortedItems[Symbol.iterator]();\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state, this._sortNotebooksFirst, this.translator);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        for (const path of this._clipboard) {\n            if (this._isCut) {\n                const localPath = this._manager.services.contents.localPath(path);\n                const parts = localPath.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        }\n        // Remove any cut modifiers.\n        for (const item of this._items) {\n            item.classList.remove(CUT_CLASS);\n        }\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this.selection[item.path]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ],\n            // By default focus on \"Cancel\" to protect from accidental deletion\n            // (\"delete\" and \"Enter\" are next to each other on many keyboards).\n            defaultButton: 0\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n        // Re-focus\n        let focusIndex = this._focusIndex;\n        const lastIndexAfterDelete = this._sortedItems.length - items.length - 1;\n        if (focusIndex > lastIndexAfterDelete) {\n            // If the focus index after deleting items is out of bounds, set it to the\n            // last item.\n            focusIndex = Math.max(0, lastIndexAfterDelete);\n        }\n        this._focusItem(focusIndex);\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        for (const item of this.selectedItems()) {\n            if (item.type !== 'directory') {\n                promises.push(this._model.manager.copy(item.path, basePath));\n            }\n        }\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(Array.from(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Restore the state of the file browser listing.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     */\n    async restore(id) {\n        const key = `file-browser-${id}:columns`;\n        const state = this._state;\n        this._stateColumnsKey = key;\n        if (!state) {\n            return;\n        }\n        try {\n            const columns = await state.fetch(key);\n            if (!columns) {\n                return;\n            }\n            const sizes = columns['sizes'];\n            if (!sizes) {\n                return;\n            }\n            for (const [key, size] of Object.entries(sizes)) {\n                this._columnSizes[key] = size;\n            }\n            this._updateColumnSizes();\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = Array.from(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this.selection[items[index].path];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const path = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this.selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const path = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        const items = this._sortedItems;\n        return (Array.from(filter(items, item => item.name === name && this.selection[item.path])).length !== 0);\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this.selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus to the selected item.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name, focus = false) {\n        return this._selectItemByName(name, focus);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     * @param focus - Whether to move focus to the selected item.\n     * @param force - Whether to proceed with selection even if the file was already selected.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async _selectItemByName(name, focus = false, force = false) {\n        if (!force && this.isSelected(name)) {\n            // Avoid API polling and DOM updates if already selected\n            return;\n        }\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false, focus);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this.evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this.evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this.evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this.evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this.evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this.evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this.evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        this._width = this._computeContentWidth();\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        this._contentSizeObserver.observe(content);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        this._contentSizeObserver.disconnect();\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    _onContentResize() {\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const scrollbarWidth = content.offsetWidth - content.clientWidth;\n        if (scrollbarWidth != this._contentScrollbarWidth) {\n            this._contentScrollbarWidth = scrollbarWidth;\n            this._width = this._computeContentWidth();\n            this._updateColumnSizes();\n        }\n    }\n    _computeContentWidth(width = null) {\n        if (!width) {\n            width = this.node.getBoundingClientRect().width;\n        }\n        this._paddingWidth = parseFloat(window\n            .getComputedStyle(this.node)\n            .getPropertyValue('--jp-dirlisting-padding-width'));\n        const handle = this.node.querySelector(`.${RESIZE_HANDLE_CLASS}`);\n        this._handleWidth = handle\n            ? handle.getBoundingClientRect().width\n            : DEFAULT_HANDLE_WIDTH;\n        return width - this._paddingWidth * 2 - this._contentScrollbarWidth;\n    }\n    /**\n     * Update the modified column's size\n     */\n    _updateModifiedSize(node) {\n        var _a, _b;\n        // Look for the modified column's header\n        const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n        this._modifiedWidth =\n            (_b = (_a = this._columnSizes['last_modified']) !== null && _a !== void 0 ? _a : modified === null || modified === void 0 ? void 0 : modified.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 83;\n        this._modifiedStyle =\n            this._modifiedWidth < 100\n                ? 'narrow'\n                : this._modifiedWidth > 120\n                    ? 'long'\n                    : 'short';\n    }\n    /**\n     * Rerender item nodes' modified dates, if the modified style has changed.\n     */\n    _updateModifiedStyleAndSize() {\n        const oldModifiedStyle = this._modifiedStyle;\n        // Update both size and style\n        this._updateModifiedSize(this.node);\n        if (oldModifiedStyle !== this._modifiedStyle) {\n            this.updateModified(this._sortedItems, this._items);\n        }\n    }\n    /**\n     * Update only the modified dates.\n     */\n    updateModified(items, nodes) {\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            if (node && item.last_modified) {\n                const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n                if (this.renderer.updateItemModified !== undefined) {\n                    this.renderer.updateItemModified(modified, item.last_modified, this._modifiedStyle);\n                }\n                else {\n                    DirListing.defaultRenderer.updateItemModified(modified, item.last_modified, this._modifiedStyle);\n                }\n            }\n        });\n    }\n    // Update item nodes based on widget state.\n    updateNodes(items, nodes, sizeOnly = false) {\n        var _a;\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            if (sizeOnly && this.renderer.updateItemSize) {\n                if (!node) {\n                    // short-circuit in case if node is not yet ready\n                    return;\n                }\n                return this.renderer.updateItemSize(node, item, this._modifiedStyle, this._columnSizes);\n            }\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            this.renderer.updateItemNode(node, item, ft, this.translator, this._hiddenColumns, this.selection[item.path], this._modifiedStyle, this._columnSizes);\n            if (this.selection[item.path] &&\n                this._isCut &&\n                this._model.path === this._prevPath) {\n                node.classList.add(CUT_CLASS);\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this.selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        for (const session of this._model.sessions()) {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : this._trans.__('unknown');\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode(this._hiddenColumns, this._columnSizes);\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        nodes.forEach((node, i) => {\n            // Remove extra classes from the nodes.\n            node.classList.remove(SELECTED_CLASS);\n            node.classList.remove(RUNNING_CLASS);\n            node.classList.remove(CUT_CLASS);\n            // Uncheck each file checkbox\n            const checkbox = renderer.getCheckboxNode(node);\n            if (checkbox) {\n                checkbox.checked = false;\n            }\n            // Handle `tabIndex`\n            const nameNode = renderer.getNameNode(node);\n            if (nameNode) {\n                // Must check if the name node is there because it gets replaced by the\n                // edit node when editing the name of the file or directory.\n                nameNode.tabIndex = i === this._focusIndex ? 0 : -1;\n            }\n        });\n        // Put the check-all checkbox in the header into the correct state\n        const checkAllCheckbox = renderer.getCheckboxNode(this.headerNode);\n        if (checkAllCheckbox) {\n            const totalSelected = Object.keys(this.selection).length;\n            const allSelected = items.length > 0 && totalSelected === items.length;\n            const someSelected = !allSelected && totalSelected > 0;\n            checkAllCheckbox.checked = allSelected;\n            checkAllCheckbox.indeterminate = someSelected;\n            // Stash the state in data attributes so we can access them in the click\n            // handler (because in the click handler, checkbox.checked and\n            // checkbox.indeterminate do not hold the previous value; they hold the\n            // next value).\n            checkAllCheckbox.dataset.checked = String(allSelected);\n            checkAllCheckbox.dataset.indeterminate = String(someSelected);\n            const trans = this.translator.load('jupyterlab');\n            checkAllCheckbox === null || checkAllCheckbox === void 0 ? void 0 : checkAllCheckbox.setAttribute('aria-label', allSelected || someSelected\n                ? trans.__('Deselect all files and directories')\n                : trans.__('Select all files and directories'));\n        }\n        this.updateNodes(items, nodes);\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this._width = this._computeContentWidth(width);\n        this._updateColumnSizes();\n    }\n    setColumnVisibility(name, visible) {\n        if (visible) {\n            this._hiddenColumns.delete(name);\n        }\n        else {\n            this._hiddenColumns.add(name);\n        }\n        this.headerNode.innerHTML = '';\n        this._renderer.populateHeaderNode(this.headerNode, this.translator, this._hiddenColumns, this._columnSizes);\n        this._updateColumnSizes();\n    }\n    _updateColumnSizes(doNotGrowBeforeInclusive = null) {\n        // Adjust column sizes so that they add up to the total width available, preserving ratios\n        const visibleColumns = this._visibleColumns\n            .map(column => ({\n            ...column,\n            element: DOMUtils.findElement(this.node, column.className)\n        }))\n            .filter(column => {\n            // While all visible column will have an element, some extensions like jupyter-unfold\n            // do not render columns even if user requests them to be visible; this filter exists\n            // to ensure backward compatibility with such extensions and may be removed in the future.\n            return column.element;\n        });\n        // read from DOM\n        let total = 0;\n        for (const column of visibleColumns) {\n            let size = this._columnSizes[column.id];\n            if (size === null) {\n                size = column.element.getBoundingClientRect().width;\n            }\n            // restrict the minimum and maximum width\n            size = Math.max(size, column.minWidth);\n            if (this._width) {\n                let reservedForOtherColumns = 0;\n                for (const other of visibleColumns) {\n                    if (other.id === column.id) {\n                        continue;\n                    }\n                    reservedForOtherColumns += other.minWidth;\n                }\n                size = Math.min(size, this._width - reservedForOtherColumns);\n            }\n            this._columnSizes[column.id] = size;\n            total += size;\n        }\n        // Ensure that total fits\n        if (this._width) {\n            // Distribute the excess/shortfall over the columns which should stretch.\n            const excess = this._width - total;\n            let growAllowed = doNotGrowBeforeInclusive === null;\n            const growColumns = visibleColumns.filter(c => {\n                if (growAllowed) {\n                    return true;\n                }\n                if (c.id === doNotGrowBeforeInclusive) {\n                    growAllowed = true;\n                }\n                return false;\n            });\n            const totalWeight = growColumns\n                .map(c => c.grow)\n                .reduce((a, b) => a + b, 0);\n            for (const column of growColumns) {\n                // The value of `growBy` will be negative when the down-sizing\n                const growBy = (excess * column.grow) / totalWeight;\n                this._columnSizes[column.id] = this._columnSizes[column.id] + growBy;\n            }\n        }\n        const resizeHandles = this.node.getElementsByClassName(RESIZE_HANDLE_CLASS);\n        const resizableColumns = visibleColumns.map(column => Private.isResizable(column));\n        // Write to DOM\n        let i = 0;\n        for (const column of visibleColumns) {\n            let size = this._columnSizes[column.id];\n            if (Private.isResizable(column) && size) {\n                size -=\n                    (this._handleWidth * resizeHandles.length) / resizableColumns.length;\n                // if this is first resizable or last resizable column\n                if (i === 0 || i === resizableColumns.length - 1) {\n                    size += this._paddingWidth;\n                }\n                i += 1;\n            }\n            column.element.style.width = size === null ? '' : size + 'px';\n        }\n        this._updateModifiedStyleAndSize();\n        // Refresh sizes on the per item widths\n        if (this.isVisible) {\n            const items = this._items;\n            if (items.length !== 0) {\n                this.updateNodes(this._sortedItems, this._items, true);\n            }\n        }\n        if (this._state && this._stateColumnsKey) {\n            void this._state.save(this._stateColumnsKey, {\n                sizes: this._columnSizes\n            });\n        }\n    }\n    get _visibleColumns() {\n        return DirListing.columns.filter(column => { var _a; return column.id === 'name' || !((_a = this._hiddenColumns) === null || _a === void 0 ? void 0 : _a.has(column.id)); });\n    }\n    _setColumnSize(name, size) {\n        var _a;\n        const previousSize = this._columnSizes[name];\n        if (previousSize && size && size > previousSize) {\n            // check if we can resize up\n            let total = 0;\n            let before = true;\n            for (const column of this._visibleColumns) {\n                if (column.id === name) {\n                    // add proposed size for the current columns\n                    total += size;\n                    before = false;\n                    continue;\n                }\n                if (before) {\n                    // add size as-is for columns before\n                    const element = DOMUtils.findElement(this.node, column.className);\n                    total +=\n                        (_a = this._columnSizes[column.id]) !== null && _a !== void 0 ? _a : element.getBoundingClientRect().width;\n                }\n                else {\n                    // add minimum acceptable size for columns after\n                    total += column.minWidth;\n                }\n            }\n            if (this._width && total > this._width) {\n                // up sizing is no longer possible\n                return;\n            }\n        }\n        this._columnSizes[name] = size;\n        this._updateColumnSizes(name);\n    }\n    /**\n     * Update the setting to sort notebooks above files.\n     * This sorts the items again if the internal value is modified.\n     */\n    setNotebooksFirstSorting(isEnabled) {\n        let previousValue = this._sortNotebooksFirst;\n        this._sortNotebooksFirst = isEnabled;\n        if (this._sortNotebooksFirst !== previousValue) {\n            this.sort(this._sortState);\n        }\n    }\n    /**\n     * Update the setting to allow single click navigation.\n     * This enables opening files/directories with a single click.\n     */\n    setAllowSingleClickNavigation(isEnabled) {\n        this._allowSingleClick = isEnabled;\n    }\n    /**\n     * Would this click (or other event type) hit the checkbox by default?\n     */\n    isWithinCheckboxHitArea(event) {\n        let element = event.target;\n        while (element) {\n            if (element.classList.contains(CHECKBOX_WRAPPER_CLASS)) {\n                return true;\n            }\n            element = element.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        const renderer = this._renderer;\n        if (header.contains(target)) {\n            const checkbox = renderer.getCheckboxNode(header);\n            if (checkbox && this.isWithinCheckboxHitArea(event)) {\n                const previouslyUnchecked = checkbox.dataset.indeterminate === 'false' &&\n                    checkbox.dataset.checked === 'false';\n                // The only time a click on the check-all checkbox should check all is\n                // when it was previously unchecked; otherwise, if the checkbox was\n                // either checked (all selected) or indeterminate (some selected), the\n                // click should clear all.\n                if (previouslyUnchecked) {\n                    // Select all items\n                    this._sortedItems.forEach((item) => (this.selection[item.path] = true));\n                }\n                else {\n                    // Unselect all items\n                    this.clearSelectedItems();\n                }\n                this.update();\n            }\n            else {\n                const state = this.renderer.handleHeaderClick(header, event);\n                if (state) {\n                    this.sort(state);\n                }\n            }\n            return;\n        }\n        else {\n            // Focus the selected file on click to ensure a couple of things:\n            // 1. If a user clicks on the item node, its name node will receive focus.\n            // 2. If a user clicks on blank space in the directory listing, the\n            //    previously focussed item will be focussed.\n            this._focusItem(this._focusIndex);\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            // Left mouse press for drag or resize start.\n            if (event.button === 0) {\n                const resizeHandle = event.target;\n                if (resizeHandle instanceof HTMLElement &&\n                    resizeHandle.classList.contains(RESIZE_HANDLE_CLASS)) {\n                    const columnId = resizeHandle.dataset.column;\n                    if (!columnId) {\n                        throw Error('Column resize handle is missing data-column attribute');\n                    }\n                    const column = DirListing.columns.find(c => c.id === columnId);\n                    if (!column) {\n                        throw Error(`Column with identifier ${columnId} not found`);\n                    }\n                    const element = DOMUtils.findElement(this.node, column.className);\n                    resizeHandle.classList.add(ACTIVE_CLASS);\n                    const cursorOverride = Drag.overrideCursor('col-resize');\n                    this._resizeData = {\n                        pressX: event.clientX,\n                        column: columnId,\n                        initialSize: element.getBoundingClientRect().width,\n                        overrides: new DisposableDelegate(() => {\n                            cursorOverride.dispose();\n                            resizeHandle.classList.remove(ACTIVE_CLASS);\n                        })\n                    };\n                    document.addEventListener('mouseup', this, true);\n                    document.addEventListener('mousemove', this, true);\n                    return;\n                }\n            }\n            return;\n        }\n        this.handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag or resize start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n        if (this._allowSingleClick) {\n            this.evtDblClick(event);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this.selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Re-focus. This is needed because nodes corresponding to files selected in\n        // mousedown handler will not retain the focus as mousedown event is always\n        // followed by a blur/focus event.\n        if (event.button === 0) {\n            this._focusItem(this._focusIndex);\n        }\n        // Remove the resize listeners if necessary.\n        if (this._resizeData) {\n            this._resizeData.overrides.dispose();\n            this._resizeData = null;\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this._resizeData) {\n            const { initialSize, column, pressX } = this._resizeData;\n            this._setColumnSize(column, initialSize + event.clientX - pressX);\n            return;\n        }\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Calculate the next focus index, given the current focus index and a\n     * direction, keeping within the bounds of the directory listing.\n     *\n     * @param index Current focus index\n     * @param direction -1 (up) or 1 (down)\n     * @returns The next focus index, which could be the same as the current focus\n     * index if at the boundary.\n     */\n    _getNextFocusIndex(index, direction) {\n        const nextIndex = index + direction;\n        if (nextIndex === -1 || nextIndex === this._items.length) {\n            // keep focus index within bounds\n            return index;\n        }\n        else {\n            return nextIndex;\n        }\n    }\n    /**\n     * Handle the up or down arrow key.\n     *\n     * @param event The keyboard event\n     * @param direction -1 (up) or 1 (down)\n     */\n    _handleArrowY(event, direction) {\n        // We only handle the `ctrl` and `shift` modifiers. If other modifiers are\n        // present, then do nothing.\n        if (event.altKey || event.metaKey) {\n            return;\n        }\n        // If folder is empty, there's nothing to do with the up/down key.\n        if (!this._items.length) {\n            return;\n        }\n        // Don't handle the arrow key press if it's not on directory item. This\n        // avoids a confusing user experience that can result from when the user\n        // moves the selection and focus index apart (via ctrl + up/down). The last\n        // selected item remains highlighted but the last focussed item loses its\n        // focus ring if it's not actively focussed.  This forces the user to\n        // visibly reveal the last focussed item before moving the focus.\n        if (!event.target.classList.contains(ITEM_TEXT_CLASS)) {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        const focusIndex = this._focusIndex;\n        let nextFocusIndex = this._getNextFocusIndex(focusIndex, direction);\n        // The following if-block allows the first press of the down arrow to select\n        // the first (rather than the second) file/directory in the list. This is\n        // the situation when the page first loads or when a user changes directory.\n        if (direction > 0 &&\n            focusIndex === 0 &&\n            !event.ctrlKey &&\n            Object.keys(this.selection).length === 0) {\n            nextFocusIndex = 0;\n        }\n        // Shift key indicates multi-selection. Either the user is trying to grow\n        // the selection, or shrink it.\n        if (event.shiftKey) {\n            this._handleMultiSelect(nextFocusIndex);\n        }\n        else if (!event.ctrlKey) {\n            // If neither the shift nor ctrl keys were used with the up/down arrow,\n            // then we treat it as a normal, unmodified key press and select the\n            // next item.\n            this._selectItem(nextFocusIndex, event.shiftKey, false /* focus = false because we call focus method directly following this */);\n        }\n        this._focusItem(nextFocusIndex);\n        this.update();\n    }\n    /**\n     * cd ..\n     *\n     * Go up one level in the directory tree.\n     */\n    async goUp() {\n        const model = this.model;\n        if (model.path === model.rootPath) {\n            return;\n        }\n        try {\n            await model.cd('..');\n        }\n        catch (reason) {\n            console.warn(`Failed to go to parent directory of ${model.path}`, reason);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    evtKeydown(event) {\n        // Do not handle any keydown events here if in the middle of a file rename.\n        if (this._inRename) {\n            return;\n        }\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                for (const item of this.selectedItems()) {\n                    this.handleOpen(item);\n                }\n                return;\n            }\n            case 38:\n                // Up arrow\n                this._handleArrowY(event, -1);\n                return;\n            case 40:\n                // Down arrow\n                this._handleArrowY(event, 1);\n                return;\n            case 32: {\n                // Space\n                if (event.ctrlKey) {\n                    // Follow the Windows and Ubuntu convention: you must press `ctrl` +\n                    // `space` in order to toggle whether an item is selected.\n                    // However, do not handle if any other modifiers were pressed.\n                    if (event.metaKey || event.shiftKey || event.altKey) {\n                        return;\n                    }\n                    // Make sure the ctrl+space key stroke was on a valid, focussed target.\n                    const node = this._items[this._focusIndex];\n                    if (!(\n                    // Event must have occurred within a node whose item can be toggled.\n                    (node.contains(event.target) &&\n                        // That node must also contain the currently focussed element.\n                        node.contains(document.activeElement)))) {\n                        return;\n                    }\n                    event.stopPropagation();\n                    // Prevent default, otherwise the container will scroll.\n                    event.preventDefault();\n                    // Toggle item selected\n                    const { path } = this._sortedItems[this._focusIndex];\n                    if (this.selection[path]) {\n                        delete this.selection[path];\n                    }\n                    else {\n                        this.selection[path] = true;\n                    }\n                    this.update();\n                    // Key was handled, so return.\n                    return;\n                }\n                break;\n            }\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (event.key !== undefined &&\n            event.key.length === 1 &&\n            // Don't gobble up the space key on the check-all checkbox (which the\n            // browser treats as a click event).\n            !((event.key === ' ' || event.keyCode === 32) &&\n                event.target.type === 'checkbox')) {\n            if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                return;\n            }\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Do nothing if the double click is on a checkbox. (Otherwise a rapid\n        // check-uncheck on the checkbox will cause the adjacent file/folder to\n        // open, which is probably not what the user intended.)\n        if (this.isWithinCheckboxHitArea(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this.handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    evtNativeDrop(event) {\n        var _a, _b, _c;\n        // Prevent navigation\n        event.preventDefault();\n        const items = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.items;\n        if (!items) {\n            // Fallback to simple upload of files (if any)\n            const files = (_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.files;\n            if (!files || files.length === 0) {\n                return;\n            }\n            const promises = [];\n            for (const file of files) {\n                const promise = this._model.upload(file);\n                promises.push(promise);\n            }\n            Promise.all(promises)\n                .then(() => this._allUploaded.emit())\n                .catch(err => {\n                console.error('Error while uploading files: ', err);\n            });\n            return;\n        }\n        const uploadEntry = async (entry, path) => {\n            if (Private.isDirectoryEntry(entry)) {\n                const dirPath = await Private.createDirectory(this._model.manager, path, entry.name);\n                const directoryReader = entry.createReader();\n                const allEntries = await Private.collectEntries(directoryReader);\n                for (const childEntry of allEntries) {\n                    await uploadEntry(childEntry, dirPath);\n                }\n            }\n            else if (Private.isFileEntry(entry)) {\n                const file = await Private.readFile(entry);\n                await this._model.upload(file, path);\n            }\n        };\n        const promises = [];\n        for (const item of items) {\n            const entry = Private.defensiveGetAsEntry(item);\n            if (!entry) {\n                continue;\n            }\n            const promise = uploadEntry(entry, (_c = this._model.path) !== null && _c !== void 0 ? _c : '/');\n            promises.push(promise);\n        }\n        Promise.all(promises)\n            .then(() => this._allUploaded.emit())\n            .catch(err => {\n            console.error('Error while uploading files: ', err);\n        });\n    }\n    /**\n     * Signal emitted on when all files were uploaded after native drag.\n     */\n    get allUploaded() {\n        return this._allUploaded;\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this.selection[item.path]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedPaths = Object.keys(this.selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedPaths = [item.path];\n            selectedItems = [item];\n        }\n        else {\n            const path = selectedPaths[0];\n            item = items.find(value => value.path === path);\n            selectedItems = this.selectedItems();\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedPaths.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        this._drag.mimeData.setData(CONTENTS_MIME, selectedPaths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = selectedPaths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const path = items[index].path;\n        const selected = Object.keys(this.selection);\n        const isLeftClickOnCheckbox = event.button === 0 &&\n            // On Mac, a left-click with the ctrlKey is treated as a right-click.\n            !(IS_MAC && event.ctrlKey) &&\n            this.isWithinCheckboxHitArea(event);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) ||\n            (!IS_MAC && event.ctrlKey) ||\n            isLeftClickOnCheckbox) {\n            if (this.selection[path]) {\n                delete this.selection[path];\n            }\n            else {\n                this.selection[path] = true;\n            }\n            this._focusItem(index);\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(index);\n            this._focusItem(index);\n            // Handle a 'soft' selection\n        }\n        else if (path in this.selection && selected.length > 1) {\n            this._softSelection = path;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            return this._selectItem(index, false, true);\n        }\n        this.update();\n    }\n    /**\n     * (Re-)focus an item in the directory listing.\n     *\n     * @param index The index of the item node to focus\n     */\n    _focusItem(index) {\n        const items = this._items;\n        if (items.length === 0) {\n            // Focus the top node if the folder is empty and therefore there are no\n            // items inside the folder to focus.\n            this._focusIndex = 0;\n            this.node.focus();\n            return;\n        }\n        this._focusIndex = index;\n        const node = items[index];\n        const nameNode = this.renderer.getNameNode(node);\n        if (nameNode) {\n            // Make the filename text node focusable so that it receives keyboard\n            // events; text node was specifically chosen to receive shortcuts because\n            // it gets substituted with input element during file name edits which\n            // conveniently deactivates irrelevant shortcuts.\n            nameNode.tabIndex = 0;\n            nameNode.focus();\n        }\n    }\n    /**\n     * Are all of the items between two provided indices selected?\n     *\n     * The items at the indices are not considered.\n     *\n     * @param j Index of one item.\n     * @param k Index of another item. Note: may be less or greater than first\n     *          index.\n     * @returns True if and only if all items between the j and k are selected.\n     *          Returns undefined if j and k are the same.\n     */\n    _allSelectedBetween(j, k) {\n        if (j === k) {\n            return;\n        }\n        const [start, end] = j < k ? [j + 1, k] : [k + 1, j];\n        return this._sortedItems\n            .slice(start, end)\n            .reduce((result, item) => result && this.selection[item.path], true);\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(index) {\n        const items = this._sortedItems;\n        const fromIndex = this._focusIndex;\n        const target = items[index];\n        let shouldAdd = true;\n        if (index === fromIndex) {\n            // This follows the convention in Ubuntu and Windows, which is to allow\n            // the focussed item to gain but not lose selected status on shift-click.\n            // (MacOS is irrelevant here because MacOS Finder has no notion of a\n            // focused-but-not-selected state.)\n            this.selection[target.path] = true;\n            return;\n        }\n        // If the target and all items in-between are selected, then we assume that\n        // the user is trying to shrink rather than grow the group of selected\n        // items.\n        if (this.selection[target.path]) {\n            // However, there is a special case when the distance between the from-\n            // and to- index is just one (for example, when the user is pressing the\n            // shift key plus arrow-up/down). If and only if the situation looks like\n            // the following when going down (or reverse when going up) ...\n            //\n            // - [ante-anchor / previous item] unselected (or boundary)\n            // - [anchor / currently focussed item / item at from-index] selected\n            // - [target / next item / item at to-index] selected\n            //\n            // ... then we shrink the selection / unselect the currently focussed\n            // item.\n            if (Math.abs(index - fromIndex) === 1) {\n                const anchor = items[fromIndex];\n                const anteAnchor = items[fromIndex + (index < fromIndex ? 1 : -1)];\n                if (\n                // Currently focussed item is selected\n                this.selection[anchor.path] &&\n                    // Item on other side of focussed item (away from target) is either a\n                    // boundary or unselected\n                    (!anteAnchor || !this.selection[anteAnchor.path])) {\n                    delete this.selection[anchor.path];\n                }\n            }\n            else if (this._allSelectedBetween(fromIndex, index)) {\n                shouldAdd = false;\n            }\n        }\n        // Select (or unselect) the rows between chosen index (target) and the last\n        // focussed.\n        const step = fromIndex < index ? 1 : -1;\n        for (let i = fromIndex; i !== index + step; i += step) {\n            if (shouldAdd) {\n                if (i === fromIndex) {\n                    // Do not change the selection state of the starting (fromIndex) item.\n                    continue;\n                }\n                this.selection[items[i].path] = true;\n            }\n            else {\n                if (i === index) {\n                    // Do not unselect the target item.\n                    continue;\n                }\n                delete this.selection[items[i].path];\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        for (const item of this.selectedItems()) {\n            this._clipboard.push(item.path);\n        }\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    async _doRename() {\n        this._inRename = true;\n        const selectedPaths = Object.keys(this.selection);\n        // Bail out if nothing has been selected.\n        if (selectedPaths.length === 0) {\n            this._inRename = false;\n            return Promise.resolve('');\n        }\n        // Figure out which selected path to use for the rename.\n        const items = this._sortedItems;\n        let { path } = items[this._focusIndex];\n        if (!this.selection[path]) {\n            // If the currently focused item is not selected, then choose the last\n            // selected item.\n            path = selectedPaths.slice(-1)[0];\n        }\n        // Get the corresponding model, nodes, and file name.\n        const index = ArrayExt.findFirstIndex(items, value => value.path === path);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        // Seed the text input with current file name, and select and focus it.\n        this._editNode.value = original;\n        this._selectItem(index, false, true);\n        // Wait for user input\n        const newName = await Private.userInputForRename(nameNode, this._editNode, original);\n        // Check if the widget was disposed during the `await`.\n        if (this.isDisposed) {\n            this._inRename = false;\n            throw new Error('File browser is disposed.');\n        }\n        let finalFilename = newName;\n        if (!newName || newName === original) {\n            finalFilename = original;\n        }\n        else if (!isValidFileName(newName)) {\n            void showErrorMessage(this._trans.__('Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n            finalFilename = original;\n        }\n        else {\n            // Attempt rename at the file system level.\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            try {\n                await renameFile(manager, oldPath, newPath);\n            }\n            catch (error) {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                finalFilename = original;\n            }\n            // Check if the widget was disposed during the `await`.\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n        }\n        // If nothing else has been selected, then select the renamed file. In\n        // other words, don't select the renamed file if the user has clicked\n        // away to some other file.\n        if (!this.isDisposed &&\n            Object.keys(this.selection).length === 1 &&\n            // We haven't updated the instance yet to reflect the rename, so unless\n            // the user or something else has updated the selection, the original file\n            // path and not the new file path will be in `this.selection`.\n            this.selection[item.path]) {\n            try {\n                await this._selectItemByName(finalFilename, true, true);\n            }\n            catch (_a) {\n                // do nothing\n                console.warn('After rename, failed to select file', finalFilename);\n            }\n        }\n        this._inRename = false;\n        return finalFilename;\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting, focus = true) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const path = items[index].path;\n        this.selection[path] = true;\n        if (focus) {\n            this._focusItem(index);\n        }\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this.selection);\n        this.clearSelectedItems();\n        for (const item of this._model.items()) {\n            const path = item.path;\n            if (existing.indexOf(path) !== -1) {\n                this.selection[path] = true;\n            }\n        }\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n        // Reset focus. But wait until the DOM has been updated (hence\n        // `requestAnimationFrame`).\n        requestAnimationFrame(() => {\n            this._focusItem(0);\n        });\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * Column definitions.\n     */\n    DirListing.columns = [\n        {\n            id: 'is_selected',\n            className: CHECKBOX_WRAPPER_CLASS,\n            itemClassName: CHECKBOX_WRAPPER_CLASS,\n            minWidth: 18,\n            resizable: false,\n            sortable: false,\n            grow: 0\n        },\n        {\n            id: 'name',\n            className: NAME_ID_CLASS,\n            itemClassName: ITEM_NAME_COLUMN_CLASS,\n            minWidth: 60,\n            resizable: true,\n            sortable: true,\n            caretSide: 'right',\n            grow: 3\n        },\n        {\n            id: 'last_modified',\n            className: MODIFIED_ID_CLASS,\n            itemClassName: ITEM_MODIFIED_CLASS,\n            minWidth: 60,\n            resizable: true,\n            sortable: true,\n            caretSide: 'left',\n            grow: 1\n        },\n        {\n            id: 'file_size',\n            className: FILE_SIZE_ID_CLASS,\n            itemClassName: ITEM_FILE_SIZE_CLASS,\n            minWidth: 60,\n            resizable: true,\n            sortable: true,\n            caretSide: 'left',\n            grow: 0.5\n        }\n    ];\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        constructor() {\n            /**\n             * Factories for individual parts of the item.\n             */\n            this.itemFactories = {\n                name: () => {\n                    const name = document.createElement('span');\n                    const icon = document.createElement('span');\n                    const text = document.createElement('span');\n                    icon.className = ITEM_ICON_CLASS;\n                    text.className = ITEM_TEXT_CLASS;\n                    name.className = ITEM_NAME_COLUMN_CLASS;\n                    name.appendChild(icon);\n                    name.appendChild(text);\n                    return name;\n                },\n                last_modified: () => {\n                    const modified = document.createElement('span');\n                    modified.className = ITEM_MODIFIED_CLASS;\n                    return modified;\n                },\n                file_size: () => {\n                    const fileSize = document.createElement('span');\n                    fileSize.className = ITEM_FILE_SIZE_CLASS;\n                    return fileSize;\n                },\n                is_selected: () => this.createCheckboxWrapperNode()\n            };\n            /**\n             * Register of most recent arguments for last modified column update.\n             */\n            this._modifiedColumnLastUpdate = new WeakMap();\n        }\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            // Allow the node to scroll while dragging items.\n            content.setAttribute('data-lm-dragscroll', 'true');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            // Set to -1 to allow calling this.node.focus().\n            node.tabIndex = -1;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator, hiddenColumns, columnsSizes) {\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const elementCreators = {\n                name: () => this.createHeaderItemNode(trans.__('Name')),\n                last_modified: () => this._createHeaderItemNodeWithSizes({\n                    small: trans.__('Modified'),\n                    large: trans.__('Last Modified')\n                }),\n                file_size: () => this._createHeaderItemNodeWithSizes({\n                    small: trans.__('Size'),\n                    large: trans.__('File Size')\n                }),\n                is_selected: () => this.createCheckboxWrapperNode({\n                    alwaysVisible: true,\n                    headerNode: true\n                })\n            };\n            const visibleColumns = DirListing.columns.filter(column => column.id === 'name' || !(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has(column.id)));\n            for (const column of visibleColumns) {\n                const createElement = elementCreators[column.id];\n                const element = createElement();\n                element.classList.add(column.className);\n                const isLastVisible = column.id === visibleColumns[visibleColumns.length - 1].id;\n                if (columnsSizes) {\n                    const size = columnsSizes[column.id];\n                    if (!isLastVisible) {\n                        element.style.width = size + 'px';\n                    }\n                }\n                node.appendChild(element);\n                if (Private.isResizable(column) && !isLastVisible) {\n                    const resizer = document.createElement('div');\n                    resizer.classList.add(RESIZE_HANDLE_CLASS);\n                    resizer.dataset.column = column.id;\n                    node.appendChild(resizer);\n                }\n            }\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            const sortableColumns = DirListing.columns.filter(Private.isSortable);\n            for (const column of sortableColumns) {\n                const header = node.querySelector(`.${column.className}`);\n                if (!header) {\n                    // skip if the column is hidden\n                    continue;\n                }\n                if (header.contains(target)) {\n                    state.key = column.id;\n                    const headerIcon = DOMUtils.findElement(header, HEADER_ITEM_ICON_CLASS);\n                    if (header.classList.contains(SELECTED_CLASS)) {\n                        if (!header.classList.contains(DESCENDING_CLASS)) {\n                            state.direction = 'descending';\n                            header.classList.add(DESCENDING_CLASS);\n                            Private.updateCaret(headerIcon, column.caretSide, 'down');\n                        }\n                        else {\n                            header.classList.remove(DESCENDING_CLASS);\n                            Private.updateCaret(headerIcon, column.caretSide, 'up');\n                        }\n                    }\n                    else {\n                        header.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(headerIcon, column.caretSide, 'up');\n                    }\n                    header.classList.add(SELECTED_CLASS);\n                    for (const otherColumn of sortableColumns) {\n                        if (otherColumn.id === column.id) {\n                            continue;\n                        }\n                        const otherHeader = node.querySelector(`.${otherColumn.className}`);\n                        if (!otherHeader) {\n                            // skip if hidden\n                            continue;\n                        }\n                        otherHeader.classList.remove(SELECTED_CLASS);\n                        otherHeader.classList.remove(DESCENDING_CLASS);\n                        const otherHeaderIcon = DOMUtils.findElement(otherHeader, HEADER_ITEM_ICON_CLASS);\n                        Private.updateCaret(otherHeaderIcon, otherColumn.caretSide);\n                    }\n                    return state;\n                }\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode(hiddenColumns, columnsSizes) {\n            const node = document.createElement('li');\n            for (const column of DirListing.columns) {\n                if (column.id != 'name' && (hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has(column.id))) {\n                    continue;\n                }\n                const createElement = this.itemFactories[column.id];\n                const element = createElement();\n                node.appendChild(element);\n                if (columnsSizes) {\n                    const size = columnsSizes[column.id];\n                    element.style.width = size + 'px';\n                }\n            }\n            return node;\n        }\n        /**\n         * Creates a node containing a checkbox.\n         *\n         * We wrap the checkbox in a label element in order to increase its hit\n         * area. This is because the padding of the checkbox itself cannot be\n         * increased via CSS, as the CSS/form compatibility table at the following\n         * url from MDN shows:\n         * https://developer.mozilla.org/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls#check_boxes_and_radio_buttons\n         *\n         * @param [options]\n         * @params options.alwaysVisible Should the checkbox be visible even when\n         * not hovered?\n         * @returns A new DOM node that contains a checkbox.\n         */\n        createCheckboxWrapperNode(options) {\n            // Wrap the checkbox in a label element in order to increase its hit area.\n            const labelWrapper = document.createElement('label');\n            labelWrapper.classList.add(CHECKBOX_WRAPPER_CLASS);\n            const checkbox = document.createElement('input');\n            checkbox.type = 'checkbox';\n            // Prevent the user from clicking (via mouse, keyboard, or touch) the\n            // checkbox since other code handles the mouse and keyboard events and\n            // controls the checked state of the checkbox.\n            if (!(options === null || options === void 0 ? void 0 : options.headerNode)) {\n                checkbox.addEventListener('click', event => {\n                    event.preventDefault();\n                });\n            }\n            // The individual file checkboxes are visible on hover, but the header\n            // check-all checkbox is always visible.\n            if (options === null || options === void 0 ? void 0 : options.alwaysVisible) {\n                labelWrapper.classList.add('jp-mod-visible');\n            }\n            else {\n                // Disable tabbing to all other checkboxes.\n                checkbox.tabIndex = -1;\n            }\n            labelWrapper.appendChild(checkbox);\n            return labelWrapper;\n        }\n        /**\n         * Update an item's last modified date.\n         *\n         * @param modified - Element containing the file's last modified date.\n         *\n         * @param modifiedDate - String representation of the last modified date.\n         *\n         * @param modifiedStyle - The date style for the modified column: narrow, short, or long\n         */\n        updateItemModified(modified, modifiedDate, modifiedStyle) {\n            // Formatting dates is expensive (0.1-0.2ms per call,\n            // so over 150 files can easily already choke the renderer),\n            // let's do the bare minimum check of comparing if an update\n            // is needed using a last update cache:\n            const previousUpdate = this._modifiedColumnLastUpdate.get(modified);\n            if ((previousUpdate === null || previousUpdate === void 0 ? void 0 : previousUpdate.date) === modifiedDate &&\n                (previousUpdate === null || previousUpdate === void 0 ? void 0 : previousUpdate.style) === modifiedStyle) {\n                return;\n            }\n            const parsedDate = new Date(modifiedDate);\n            // Render the date in one of multiple formats, depending on the container's size\n            const modText = Time.formatHuman(parsedDate, modifiedStyle);\n            const modTitle = Time.format(parsedDate);\n            modified.textContent = modText;\n            modified.title = modTitle;\n            this._modifiedColumnLastUpdate.set(modified, {\n                date: modifiedDate,\n                style: modifiedStyle\n            });\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator, hiddenColumns, selected, modifiedStyle, columnsSizes) {\n            if (selected) {\n                node.classList.add(SELECTED_CLASS);\n            }\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const nameColumn = DOMUtils.findElement(node, ITEM_NAME_COLUMN_CLASS);\n            let modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            let fileSize = DOMUtils.findElement(node, ITEM_FILE_SIZE_CLASS);\n            const checkboxWrapper = DOMUtils.findElement(node, CHECKBOX_WRAPPER_CLASS);\n            const showFileCheckboxes = !(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('is_selected'));\n            if (checkboxWrapper && !showFileCheckboxes) {\n                node.removeChild(checkboxWrapper);\n            }\n            else if (showFileCheckboxes && !checkboxWrapper) {\n                const checkboxWrapper = this.createCheckboxWrapperNode();\n                nameColumn.insertAdjacentElement('beforebegin', checkboxWrapper);\n            }\n            const showModified = !(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('last_modified'));\n            if (modified && !showModified) {\n                node.removeChild(modified);\n            }\n            else if (showModified && !modified) {\n                modified = this.itemFactories.last_modified();\n                nameColumn.insertAdjacentElement('afterend', modified);\n            }\n            const showFileSize = !(hiddenColumns === null || hiddenColumns === void 0 ? void 0 : hiddenColumns.has('file_size'));\n            if (fileSize && !showFileSize) {\n                node.removeChild(fileSize);\n            }\n            else if (showFileSize && !fileSize) {\n                fileSize = this.itemFactories.file_size();\n                (modified !== null && modified !== void 0 ? modified : nameColumn).insertAdjacentElement('afterend', fileSize);\n            }\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                const fileSizeText = Private.formatFileSize(model.size, 1, 1024);\n                if (fileSize) {\n                    fileSize.textContent = fileSizeText;\n                }\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            else if (fileSize) {\n                fileSize.textContent = '';\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created)));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified)));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            const indices = !model.indices ? [] : model.indices;\n            let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n            if (text) {\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            // Adds an aria-label to the checkbox element.\n            const checkbox = checkboxWrapper === null || checkboxWrapper === void 0 ? void 0 : checkboxWrapper.querySelector('input[type=\"checkbox\"]');\n            if (checkbox) {\n                let ariaLabel;\n                if (fileType.contentType === 'directory') {\n                    ariaLabel = selected\n                        ? trans.__('Deselect directory \"%1\"', highlightedName)\n                        : trans.__('Select directory \"%1\"', highlightedName);\n                }\n                else {\n                    ariaLabel = selected\n                        ? trans.__('Deselect file \"%1\"', highlightedName)\n                        : trans.__('Select file \"%1\"', highlightedName);\n                }\n                checkbox.setAttribute('aria-label', ariaLabel);\n                checkbox.checked = selected !== null && selected !== void 0 ? selected : false;\n            }\n            this.updateItemSize(node, model, modifiedStyle, columnsSizes);\n        }\n        /**\n         * Update size of item nodes, assuming that model has not changed.\n         */\n        updateItemSize(node, model, modifiedStyle, columnsSizes) {\n            if (columnsSizes) {\n                for (const column of DirListing.columns) {\n                    const element = DOMUtils.findElement(node, column.itemClassName);\n                    if (!element) {\n                        continue;\n                    }\n                    const sizeSpec = columnsSizes[column.id];\n                    const newWidth = sizeSpec === null ? '' : sizeSpec + 'px';\n                    if (newWidth !== element.style.width) {\n                        element.style.width = newWidth;\n                    }\n                }\n            }\n            let modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            if (model.last_modified && modified) {\n                this.updateItemModified(modified, model.last_modified, modifiedStyle !== null && modifiedStyle !== void 0 ? modifiedStyle : 'short');\n            }\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Get the checkbox input element node.\n         *\n         * @param node A node created by [[createItemNode]] or\n         * [[createHeaderItemNode]]\n         *\n         * @returns The checkbox node.\n         */\n        getCheckboxNode(node) {\n            return node.querySelector(`.${CHECKBOX_WRAPPER_CLASS} input[type=checkbox]`);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            // Hide additional columns from the drag image to keep it unobtrusive.\n            const extraColumns = DirListing.columns.filter(column => column.id !== 'name');\n            for (const extraColumn of extraColumns) {\n                const columnElement = DOMUtils.findElement(dragImage, extraColumn.itemClassName);\n                if (!columnElement) {\n                    // We can only remove columns which are rendered.\n                    continue;\n                }\n                dragImage.removeChild(columnElement);\n            }\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n        /**\n         * Create a node for a header item with multiple sizes.\n         */\n        _createHeaderItemNodeWithSizes(labels) {\n            const node = document.createElement('div');\n            node.className = HEADER_ITEM_CLASS;\n            const icon = document.createElement('span');\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            for (let k of Object.keys(labels)) {\n                const text = document.createElement('span');\n                text.classList.add(HEADER_ITEM_TEXT_CLASS, HEADER_ITEM_TEXT_CLASS + '-' + k);\n                text.textContent = labels[k];\n                node.appendChild(text);\n            }\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function userInputForRename(text, edit, original) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise(resolve => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.value = original;\n                        edit.blur();\n                        // Put focus back on the text node. That way the user can, for\n                        // example, press the keyboard shortcut to go back into edit mode,\n                        // and it will work.\n                        text.focus();\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.userInputForRename = userInputForRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state, sortNotebooksFirst = false, translator) {\n        const copy = Array.from(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        /**\n         * Compares two items and returns whether they should have a fixed priority.\n         * The fixed priority enables to always sort the directories above the other files. And to sort the notebook above other files if the `sortNotebooksFirst` is true.\n         */\n        function isPriorityOverridden(a, b) {\n            if (sortNotebooksFirst) {\n                return a.type !== b.type;\n            }\n            return (a.type === 'directory') !== (b.type === 'directory');\n        }\n        /**\n         * Returns the priority of a file.\n         */\n        function getPriority(item) {\n            if (item.type === 'directory') {\n                return 2;\n            }\n            if (item.type === 'notebook' && sortNotebooksFirst) {\n                return 1;\n            }\n            return 0;\n        }\n        /**\n         * Compare two items by their name using `translator.languageCode`, with fallback to `navigator.language`.\n         */\n        function compareByName(a, b) {\n            var _a;\n            // Wokaround for Chromium invalid language code on CI, see\n            // https://github.com/jupyterlab/jupyterlab/issues/17079\n            const navigatorLanguage = navigator.language.split('@')[0];\n            const languageCode = ((_a = translator.languageCode) !== null && _a !== void 0 ? _a : navigatorLanguage).replace('_', '-');\n            try {\n                return a.name.localeCompare(b.name, languageCode, {\n                    numeric: true,\n                    sensitivity: 'base'\n                });\n            }\n            catch (e) {\n                console.warn(`localeCompare failed to compare ${a.name} and ${b.name} under languageCode: ${languageCode}`);\n                return a.name.localeCompare(b.name, navigatorLanguage, {\n                    numeric: true,\n                    sensitivity: 'base'\n                });\n            }\n        }\n        function compare(compare) {\n            return (a, b) => {\n                // Group directory first, then notebooks, then files\n                if (isPriorityOverridden(a, b)) {\n                    return getPriority(b) - getPriority(a);\n                }\n                const compared = compare(a, b);\n                if (compared !== 0) {\n                    return compared * reverse;\n                }\n                // Default sorting is alphabetical ascending\n                return compareByName(a, b);\n            };\n        }\n        if (state.key === 'last_modified') {\n            // Sort by last modified\n            copy.sort(compare((a, b) => {\n                return (new Date(a.last_modified).getTime() -\n                    new Date(b.last_modified).getTime());\n            }));\n        }\n        else if (state.key === 'file_size') {\n            // Sort by size\n            copy.sort(compare((a, b) => {\n                var _a, _b;\n                return ((_a = b.size) !== null && _a !== void 0 ? _a : 0) - ((_b = a.size) !== null && _b !== void 0 ? _b : 0);\n            }));\n        }\n        else {\n            // Sort by name\n            copy.sort(compare((a, b) => {\n                return compareByName(b, a);\n            }));\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Check if the column is resizable.\n     */\n    Private.isResizable = (column) => {\n        return 'resizable' in column && column.resizable;\n    };\n    /**\n     * Check if the column is sortable.\n     */\n    Private.isSortable = (column) => {\n        return 'sortable' in column && column.sortable;\n    };\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 B';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem'\n            });\n            if (float === 'left') {\n                container.style.order = '-1';\n            }\n            else {\n                container.style.order = '';\n            }\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n    async function createDirectory(manager, path, name) {\n        const model = await manager.newUntitled({\n            path: path,\n            type: 'directory'\n        });\n        const tmpDirPath = PathExt.join(path, model.name);\n        const dirPath = PathExt.join(path, name);\n        try {\n            await manager.rename(tmpDirPath, dirPath);\n        }\n        catch (e) {\n            // The `dirPath` already exists, remove the temporary new directory\n            await manager.deleteFile(tmpDirPath);\n        }\n        return dirPath;\n    }\n    Private.createDirectory = createDirectory;\n    function isDirectoryEntry(entry) {\n        return entry.isDirectory;\n    }\n    Private.isDirectoryEntry = isDirectoryEntry;\n    function isFileEntry(entry) {\n        return entry.isFile;\n    }\n    Private.isFileEntry = isFileEntry;\n    function defensiveGetAsEntry(item) {\n        if (item.webkitGetAsEntry) {\n            return item.webkitGetAsEntry();\n        }\n        if ('getAsEntry' in item) {\n            // See https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n            return item['getAsEntry']();\n        }\n        return null;\n    }\n    Private.defensiveGetAsEntry = defensiveGetAsEntry;\n    function readEntries(reader) {\n        return new Promise((resolve, reject) => reader.readEntries(resolve, reject));\n    }\n    function readFile(entry) {\n        return new Promise((resolve, reject) => entry.file(resolve, reject));\n    }\n    Private.readFile = readFile;\n    async function collectEntries(reader) {\n        // Spec requires calling `readEntries` until these are exhausted;\n        // in practice this is only required in Chromium-based browsers for >100 files.\n        // https://issues.chromium.org/issues/41110876\n        const allEntries = [];\n        let done = false;\n        while (!done) {\n            const entries = await readEntries(reader);\n            if (entries.length === 0) {\n                done = true;\n            }\n            else {\n                allEntries.push(...entries);\n            }\n        }\n        return allEntries;\n    }\n    Private.collectEntries = collectEntries;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { FilenameSearcher, SidePanel, Toolbar } from '@jupyterlab/ui-components';\nimport { Panel } from '@lumino/widgets';\nimport { createRef } from 'react';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to file browser panel (gather filter, breadcrumbs and listing).\n */\nconst FILE_BROWSER_PANEL_CLASS = 'jp-FileBrowser-Panel';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser filter toolbar node.\n */\nconst FILTER_TOOLBAR_CLASS = 'jp-FileBrowser-filterToolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends SidePanel {\n    /**\n     * Construct a new file browser.\n     *\n     * @param options - The file browser options.\n     */\n    constructor(options) {\n        var _a;\n        super({ content: new Panel(), translator: options.translator });\n        this._directoryPending = null;\n        this._filePending = null;\n        this._fileFilterRef = createRef();\n        this._allowSingleClick = false;\n        this._showFileCheckboxes = false;\n        this._showFileFilter = false;\n        this._showFileSizeColumn = false;\n        this._showHiddenFiles = false;\n        this._showLastModifiedColumn = true;\n        this._sortNotebooksFirst = false;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this.id = options.id;\n        const translator = (this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator);\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this._manager = model.manager;\n        this.toolbar.node.setAttribute('aria-label', this._trans.__('file browser'));\n        // File browser widgets container\n        this.mainPanel = new Panel();\n        this.mainPanel.addClass(FILE_BROWSER_PANEL_CLASS);\n        this.mainPanel.title.label = this._trans.__('File Browser');\n        this.crumbs = new BreadCrumbs({ model, translator });\n        this.crumbs.addClass(CRUMBS_CLASS);\n        // The filter toolbar appears immediately below the breadcrumbs and above the directory listing.\n        const searcher = FilenameSearcher({\n            updateFilter: (filterFn, query) => {\n                this.model.setFilter(value => {\n                    return filterFn(value.name.toLowerCase());\n                });\n            },\n            useFuzzyFilter: true,\n            placeholder: this._trans.__('Filter files by name'),\n            forceRefresh: false,\n            showIcon: false,\n            inputRef: this._fileFilterRef\n        });\n        searcher.addClass(FILTERBOX_CLASS);\n        this.filterToolbar = new Toolbar();\n        this.filterToolbar.addClass(FILTER_TOOLBAR_CLASS);\n        this.filterToolbar.addItem('fileNameSearcher', searcher);\n        this.filterToolbar.setHidden(!this.showFileFilter);\n        this.listing = this.createDirListing({\n            model,\n            renderer,\n            translator,\n            state: options.state\n        });\n        this.listing.addClass(LISTING_CLASS);\n        this.mainPanel.addWidget(this.crumbs);\n        this.mainPanel.addWidget(this.filterToolbar);\n        this.mainPanel.addWidget(this.listing);\n        this.addWidget(this.mainPanel);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n        // restore listing regardless of the restore option\n        void this.listing.restore(this.id);\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to show the last modified column\n     */\n    get showLastModifiedColumn() {\n        return this._showLastModifiedColumn;\n    }\n    set showLastModifiedColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('last_modified', value);\n            this._showLastModifiedColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to show the full path in the breadcrumbs\n     */\n    get showFullPath() {\n        return this.crumbs.fullPath;\n    }\n    set showFullPath(value) {\n        this.crumbs.fullPath = value;\n    }\n    /**\n     * Whether to show the file size column\n     */\n    get showFileSizeColumn() {\n        return this._showFileSizeColumn;\n    }\n    set showFileSizeColumn(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('file_size', value);\n            this._showFileSizeColumn = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to show hidden files\n     */\n    get showHiddenFiles() {\n        return this._showHiddenFiles;\n    }\n    set showHiddenFiles(value) {\n        this.model.showHiddenFiles(value);\n        this._showHiddenFiles = value;\n    }\n    /**\n     * Whether to show checkboxes next to files and folders\n     */\n    get showFileCheckboxes() {\n        return this._showFileCheckboxes;\n    }\n    set showFileCheckboxes(value) {\n        if (this.listing.setColumnVisibility) {\n            this.listing.setColumnVisibility('is_selected', value);\n            this._showFileCheckboxes = value;\n        }\n        else {\n            console.warn('Listing does not support toggling column visibility');\n        }\n    }\n    /**\n     * Whether to show a text box to filter files by name.\n     */\n    get showFileFilter() {\n        return this._showFileFilter;\n    }\n    set showFileFilter(value) {\n        var _a;\n        // If the old value was true and the new value is false, clear the filter\n        const oldValue = this.showFileFilter;\n        if (oldValue && !value) {\n            // Clear the search box input\n            if (this._fileFilterRef.current) {\n                this._fileFilterRef.current.value = '';\n            }\n            // Set a filter that doesn't exclude anything.\n            this.model.setFilter(value => {\n                return {};\n            });\n            this.model.refresh().catch(console.warn);\n        }\n        this._showFileFilter = value;\n        // Update widget visibility\n        this.filterToolbar.setHidden(!this.showFileFilter);\n        if (this.showFileFilter) {\n            (_a = this._fileFilterRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }\n    /**\n     * Whether to sort notebooks above other files\n     */\n    get sortNotebooksFirst() {\n        return this._sortNotebooksFirst;\n    }\n    set sortNotebooksFirst(value) {\n        if (this.listing.setNotebooksFirstSorting) {\n            this.listing.setNotebooksFirstSorting(value);\n            this._sortNotebooksFirst = value;\n        }\n        else {\n            console.warn('Listing does not support sorting notebooks first');\n        }\n    }\n    /**\n     * Whether to allow single click files and directories\n     */\n    get singleClickNavigation() {\n        return this._allowSingleClick;\n    }\n    set singleClickNavigation(value) {\n        if (this.listing.setAllowSingleClickNavigation) {\n            this.listing.setAllowSingleClickNavigation(value);\n            this._allowSingleClick = value;\n        }\n        else {\n            console.warn('Listing does not support single click navigation');\n        }\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this.listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this.listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this.listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this.listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this.listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this.listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this.listing.paste();\n    }\n    async _createNew(options) {\n        // normalize the path if the file is created from a custom drive\n        if (options.path) {\n            const localPath = this._manager.services.contents.localPath(options.path);\n            options.path = this._toDrivePath(this.model.driveName, localPath);\n        }\n        try {\n            const model = await this._manager.newUntitled(options);\n            await this.listing.selectItemByName(model.name, true);\n            await this.rename();\n            return model;\n        }\n        catch (err) {\n            void showErrorMessage(this._trans.__('Error'), err);\n            throw err;\n        }\n    }\n    /**\n     * Create a new directory\n     */\n    async createNewDirectory() {\n        if (this._directoryPending) {\n            return this._directoryPending;\n        }\n        this._directoryPending = this._createNew({\n            path: this.model.path,\n            type: 'directory'\n        });\n        try {\n            return await this._directoryPending;\n        }\n        finally {\n            this._directoryPending = null;\n        }\n    }\n    /**\n     * Create a new file\n     */\n    async createNewFile(options) {\n        if (this._filePending) {\n            return this._filePending;\n        }\n        this._filePending = this._createNew({\n            path: this.model.path,\n            type: 'file',\n            ext: options.ext\n        });\n        try {\n            return await this._filePending;\n        }\n        finally {\n            this._filePending = null;\n        }\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this.listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this.listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this.listing.download();\n    }\n    /**\n     * cd ..\n     *\n     * Go up one level in the directory tree.\n     */\n    async goUp() {\n        return this.listing.goUp();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this.listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this.listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this.listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this.listing.modelForClick(event);\n    }\n    /**\n     * Create the underlying DirListing instance.\n     *\n     * @param options - The DirListing constructor options.\n     *\n     * @returns The created DirListing instance.\n     */\n    createDirListing(options) {\n        return new DirListing(options);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n    /**\n     * Given a drive name and a local path, return the full\n     * drive path which includes the drive name and the local path.\n     *\n     * @param driveName the name of the drive\n     * @param localPath the local path on the drive.\n     *\n     * @returns the full drive path\n     */\n    _toDrivePath(driveName, localPath) {\n        if (driveName === '') {\n            return localPath;\n        }\n        else {\n            return `${driveName}:${PathExt.removeSlash(localPath)}`;\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ArrayExt, filter } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        this._model = {\n            path: this.rootPath,\n            name: PathExt.basename(this.rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this.onFileChanged, this);\n        services.sessions.runningChanged.connect(this.onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: options.refreshStandby || 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * Get the root path\n     */\n    get rootPath() {\n        return this._driveName ? this._driveName + ':' : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return this._uploads[Symbol.iterator]();\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._items[Symbol.iterator]();\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return this._sessions[Symbol.iterator]();\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(path = '.') {\n        if (path !== '.') {\n            path = this.manager.services.contents.resolvePath(this._model.path, path);\n        }\n        else {\n            path = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (path === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = path;\n        if (oldValue !== path) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(path, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== path) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue: path\n                });\n            }\n            this.onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response && error.response.status === 404 && path !== '/') {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            // need to return to root path if preferred dir is set\n            if (path) {\n                await this.cd('/');\n            }\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     * @param path - The directory into which the file should be uploaded; defaults to current directory.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file, path) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (this._items.find(i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload, path);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked, uploadPath) {\n        // Gather the file model parameters.\n        let path = typeof uploadPath === 'undefined' ? this._model.path : uploadPath;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            size: contents.size,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const prefix = this.driveName.length > 0 ? this.driveName + ':' : '';\n        const value = oldValue &&\n            oldValue.path &&\n            prefix + PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue &&\n                newValue.path &&\n                prefix + PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        for (const model of models) {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        }\n    }\n}\n/**\n * File browser model where hidden files inclusion can be toggled on/off.\n */\nexport class TogglableHiddenFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this._includeHiddenFiles = options.includeHiddenFiles || false;\n    }\n    /**\n     * Create an iterator over the model's items filtering hidden files out if necessary.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return this._includeHiddenFiles\n            ? super.items()\n            : filter(super.items(), value => !value.name.startsWith('.'));\n    }\n    /**\n     * Set the inclusion of hidden files. Triggers a model refresh.\n     */\n    showHiddenFiles(value) {\n        this._includeHiddenFiles = value;\n        void this.refresh();\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends TogglableHiddenFileBrowserModel {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        this._filter =\n            (_a = options.filter) !== null && _a !== void 0 ? _a : (model => {\n                return {};\n            });\n        this._filterDirectories = (_b = options.filterDirectories) !== null && _b !== void 0 ? _b : true;\n    }\n    /**\n     * Whether to filter directories.\n     */\n    get filterDirectories() {\n        return this._filterDirectories;\n    }\n    set filterDirectories(value) {\n        this._filterDirectories = value;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), value => {\n            if (!this._filterDirectories && value.type === 'directory') {\n                return true;\n            }\n            else {\n                const filtered = this._filter(value);\n                value.indices = filtered === null || filtered === void 0 ? void 0 : filtered.indices;\n                return !!filtered;\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, setToolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * The class name added to (optional) label in the file dialog\n */\nconst OPEN_DIALOG_LABEL_CLASS = 'jp-Open-Dialog-label';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    async function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const openDialog = new OpenDialog(options.manager, options.filter, translator, options.defaultPath, options.label);\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: openDialog\n        };\n        await openDialog.ready;\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles({\n            ...options,\n            filter: model => {\n                return model.type === 'directory' ? {} : null;\n            }\n        });\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator, defaultPath, label, filterDirectories) {\n        super();\n        this._ready = new PromiseDelegate();\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        this.addClass(OPEN_DIALOG_CLASS);\n        Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator, defaultPath, filterDirectories)\n            .then(browser => {\n            this._browser = browser;\n            // Add toolbar items\n            setToolbar(this._browser, (browser) => [\n                {\n                    name: 'new-folder',\n                    widget: new ToolbarButton({\n                        icon: newFolderIcon,\n                        onClick: () => {\n                            void browser.createNewDirectory();\n                        },\n                        tooltip: trans.__('New Folder')\n                    })\n                },\n                {\n                    name: 'refresher',\n                    widget: new ToolbarButton({\n                        icon: refreshIcon,\n                        onClick: () => {\n                            browser.model.refresh().catch(reason => {\n                                console.error('Failed to refresh file browser in open dialog.', reason);\n                            });\n                        },\n                        tooltip: trans.__('Refresh File List')\n                    })\n                }\n            ]);\n            // Build the sub widgets\n            const layout = new PanelLayout();\n            if (label) {\n                const labelWidget = new Widget();\n                labelWidget.addClass(OPEN_DIALOG_LABEL_CLASS);\n                labelWidget.node.textContent = label;\n                layout.addWidget(labelWidget);\n            }\n            layout.addWidget(this._browser);\n            /**\n             * Dispose browser model when OpenDialog\n             * is disposed.\n             */\n            this.dispose = () => {\n                if (this.isDisposed) {\n                    return;\n                }\n                this._browser.model.dispose();\n                super.dispose();\n            };\n            // Set Widget content\n            this.layout = layout;\n            this._ready.resolve();\n        })\n            .catch(reason => {\n            console.error('Error while creating file browser in open dialog', reason);\n            this._ready.reject(void 0);\n        });\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = Array.from(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n    /**\n     * A promise that resolves when openDialog is successfully created.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = async (id, manager, filter, options = {}, translator, defaultPath, filterDirectories) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval,\n            filterDirectories\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        if (defaultPath) {\n            await widget.model.cd(defaultPath);\n        }\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * The file browser factory token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory', `A factory object that creates file browsers.\n  Use this if you want to create your own file browser (e.g., for a custom storage backend),\n  or to interact with other file browsers that have been created by extensions.`);\n/**\n * The default file browser token.\n */\nexport const IDefaultFileBrowser = new Token('@jupyterlab/filebrowser:IDefaultFileBrowser', 'A service for the default file browser.');\n/**\n * The token that indicates the default file browser commands are loaded.\n */\nexport const IFileBrowserCommands = new Token('@jupyterlab/filebrowser:IFileBrowserCommands', 'A token to ensure file browser commands are loaded.');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon, ToolbarButton } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            label: options.label,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const finishedItem = ArrayExt.findFirstValue(this._items, val => val.path === uploads.oldValue.path);\n                    if (finishedItem) {\n                        finishedItem.complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeFirstOf(this._items, finishedItem);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"names":["BREADCRUMB_ROOT_CLASS","BREADCRUMB_PREFERRED_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","constructor","options","super","this","_previousState","translator","nullTranslator","_trans","load","_model","model","_fullPath","fullPath","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","hasPreferred","PageConfig","getOption","_hasPreferred","node","appendChild","Crumb","Preferred","Home","refreshed","connect","update","handleEvent","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","value","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","onUpdateRequest","state","path","manager","services","contents","localPath","JSONExt","deepEqual","updateCrumbs","button","target","classList","contains","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","index","ArrayExt","findFirstIndex","destination","title","parentElement","mimeData","hasData","ElementExt","hitTest","clientX","clientY","Current","add","dropTarget","DOMUtils","findElement","remove","dropAction","proposedAction","PathExt","resolve","promises","oldPaths","getData","oldPath","localOldPath","name","basename","newPath","join","push","renameFile","Promise","all","err","breadcrumbs","separators","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","i","elem","document","createElement","className","textContent","elemPath","separator","Parent","parent","home","element","tag","stylesheet","ellipsis","ellipsesIcon","current","items","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_CLASS","HEADER_ITEM_TEXT_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_NAME_COLUMN_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","ITEM_FILE_SIZE_CLASS","CHECKBOX_WRAPPER_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","SELECTED_CLASS","RESIZE_HANDLE_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","ACTIVE_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_resizeData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","_hiddenColumns","Set","_columnSizes","file_size","is_selected","last_modified","_sortNotebooksFirst","_allowSingleClick","_focusIndex","_allUploaded","_width","_state","_contentScrollbarWidth","_contentSizeObserver","ResizeObserver","_onContentResize","bind","_paddingWidth","_handleWidth","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","_updateModifiedSize","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","contentNode","sortState","onItemOpened","selectedItems","filter","sortedItems","Symbol","iterator","sort","rename","_doRename","cut","_copy","copy","paste","undefined","basePath","removeClass","then","_p","message","_n","result","showDialog","body","buttons","Dialog","cancelButton","label","warnButton","defaultButton","isDisposed","accept","_delete","map","focusIndex","lastIndexAfterDelete","Math","max","_focusItem","duplicate","download","Array","from","restore","id","_stateColumnsKey","columns","fetch","sizes","size","entries","_updateColumnSizes","shutdownKernels","paths","sessions","session","firstIndexOf","shutdown","selectNext","keepExisting","selected","keys","_selectItem","scrollIntoViewIfNeeded","selectPrevious","selectByPrefix","prefix","toLowerCase","substr","isSelected","modelForClick","hitTestNodes","clearSelectedItems","selectItemByName","focus","_selectItemByName","force","refresh","Error","MessageLoop","sendMessage","Msg","UpdateRequest","_evtMousedown","_evtMouseup","_evtMousemove","evtKeydown","evtDblClick","evtNativeDrop","_evtScroll","evtDragEnter","evtDragLeave","evtDragOver","evtDrop","_computeContentWidth","content","observe","disconnect","onAfterShow","scrollbarWidth","offsetWidth","clientWidth","width","getBoundingClientRect","parseFloat","window","getComputedStyle","getPropertyValue","handle","querySelector","_a","_b","modified","_modifiedWidth","_modifiedStyle","_updateModifiedStyleAndSize","oldModifiedStyle","updateModified","nodes","forEach","updateItemModified","updateNodes","sizeOnly","updateItemSize","ft","registry","getFileTypeForModel","updateItemNode","setAttribute","kernel","specs","spec","kernelspecs","display_name","pop","createItemNode","checkbox","getCheckboxNode","checked","nameNode","getNameNode","tabIndex","checkAllCheckbox","totalSelected","allSelected","someSelected","indeterminate","dataset","String","trans","onResize","setColumnVisibility","visible","delete","innerHTML","doNotGrowBeforeInclusive","visibleColumns","_visibleColumns","column","total","minWidth","reservedForOtherColumns","other","min","excess","growAllowed","growColumns","c","totalWeight","grow","reduce","a","b","growBy","resizeHandles","getElementsByClassName","resizableColumns","isResizable","style","isVisible","save","has","_setColumnSize","previousSize","before","setNotebooksFirstSorting","isEnabled","previousValue","setAllowSingleClickNavigation","isWithinCheckboxHitArea","header","handleHeaderClick","scrollLeft","blur","clearTimeout","handleFileSelect","ctrlKey","pressX","pressY","resizeHandle","HTMLElement","columnId","find","cursorOverride","Drag","overrideCursor","initialSize","overrides","DisposableDelegate","metaKey","shiftKey","data","dx","abs","dy","_startDrag","handleOpen","emit","openOrReveal","_getNextFocusIndex","nextIndex","_handleArrowY","altKey","nextFocusIndex","_handleMultiSelect","goUp","rootPath","reason","console","warn","keyCode","activeElement","setTimeout","_c","dataTransfer","files","file","promise","upload","uploadEntry","async","entry","isDirectoryEntry","dirPath","createDirectory","directoryReader","createReader","allEntries","collectEntries","childEntry","isFileEntry","readFile","defensiveGetAsEntry","allUploaded","selectedPaths","source","dragImage","createDragImage","MimeData","supportedActions","setData","withContent","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","prevWidget","ref","mode","start","action","isLeftClickOnCheckbox","_allSelectedBetween","j","k","end","fromIndex","shouldAdd","anchor","anteAnchor","step","deleteFile","row","original","newName","userInputForRename","finalFilename","isValidFileName","existing","indexOf","requestAnimationFrame","sender","args","newValue","dirname","itemClassName","resizable","sortable","caretSide","Renderer","itemFactories","icon","text","fileSize","createCheckboxWrapperNode","_modifiedColumnLastUpdate","WeakMap","hiddenColumns","columnsSizes","elementCreators","createHeaderItemNode","_createHeaderItemNodeWithSizes","small","large","alwaysVisible","isLastVisible","resizer","updateCaret","sortableColumns","isSortable","headerIcon","otherColumn","otherHeader","otherHeaderIcon","labelWrapper","modifiedDate","modifiedStyle","previousUpdate","date","parsedDate","Date","modText","Time","formatHuman","modTitle","format","set","fileType","DocumentRegistry","getDefaultTextFileType","iconClass","iconContainer","nameColumn","checkboxWrapper","showFileCheckboxes","insertAdjacentElement","showModified","showFileSize","LabIcon","resolveElement","classes","container","hoverText","fileSizeText","formatFileSize","created","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","highlight","h","mark","VirtualDOM","render","span","ariaLabel","contentType","sizeSpec","newWidth","count","cloneNode","extraColumns","extraColumn","columnElement","iconLabel","labels","readEntries","reader","reject","edit","replaceChild","lastIndexOf","setSelectionRange","onblur","onkeydown","sortNotebooksFirst","getPriority","compareByName","navigatorLanguage","language","languageCode","replace","localeCompare","numeric","sensitivity","e","compare","isPriorityOverridden","compared","getTime","bytes","decimalPoint","dm","floor","log","pow","toFixed","float","caretDownIcon","caretUpIcon","order","newUntitled","tmpDirPath","isDirectory","isFile","webkitGetAsEntry","done","FileBrowser","SidePanel","Panel","_directoryPending","_filePending","_fileFilterRef","createRef","_showFileCheckboxes","_showFileFilter","_showFileSizeColumn","_showHiddenFiles","_showLastModifiedColumn","toolbar","connectionFailure","_onConnectionFailure","mainPanel","crumbs","searcher","FilenameSearcher","updateFilter","filterFn","query","setFilter","useFuzzyFilter","placeholder","forceRefresh","showIcon","inputRef","filterToolbar","Toolbar","addItem","setHidden","showFileFilter","listing","createDirListing","addWidget","navigateToCurrentDirectory","_navigateToCurrentDirectory","showLastModifiedColumn","showFullPath","showFileSizeColumn","showHiddenFiles","singleClickNavigation","_createNew","_toDrivePath","driveName","createNewDirectory","createNewFile","ext","ServerConnection","ResponseError","response","status","removeSlash","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","_pending","_pendingPath","_refreshed","_sessions","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","mimetype","refreshInterval","onFileChanged","runningChanged","onRunningChanged","_unloadEventListener","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","standby","refreshStandby","restored","uploadChanged","uploads","clearData","tick","resolvePath","oldValue","handleContents","running","url","getDownloadUrl","href","click","populate","ready","serverVersion","getNotebookVersion","supportsChunked","largeFile","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadPath","uploadInner","blob","chunk","FileReader","readAsDataURL","onload","onerror","removeFirstWhere","uploadIndex","finalModel","progress","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","TogglableHiddenFileBrowserModel","_includeHiddenFiles","includeHiddenFiles","FilterFileBrowserModel","_filter","_filterDirectories","filterDirectories","filtered","FileDialog","getOpenFiles","openDialog","OpenDialog","defaultPath","dialogOptions","okButton","focusNodeSelector","host","launch","getExistingDirectory","_ready","createFilteredFileBrowser","browser","_browser","setToolbar","ToolbarButton","newFolderIcon","onClick","tooltip","refreshIcon","layout","PanelLayout","labelWidget","getValue","IFileBrowserFactory","Token","IDefaultFileBrowser","IFileBrowserCommands","Uploader","fileUploadIcon","_input","translateToolTip","_onInputChanged","pending","prototype","call","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FileUploadComponent","props","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browserModel","_tracker","currentChanged","complete","VDomModel","browse","idx","val","finishedItem","findFirstValue","removeFirstOf","stateChanged","_browserModel","oldBrowserModel"],"sourceRoot":""}