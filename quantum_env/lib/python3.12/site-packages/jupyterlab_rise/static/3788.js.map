{"version":3,"file":"3788.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/attachmentmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/factories.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/latex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/mimemodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/outputmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/renderers.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/widgets.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lodash.escape/index.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of a notebook attachment model.\n */\nexport class AttachmentModel {\n    /**\n     * Construct a new attachment model.\n     */\n    constructor(options) {\n        // All attachments are untrusted\n        this.trusted = false;\n        this._changed = new Signal(this);\n        this._raw = {};\n        const data = Private.getData(options.value);\n        this._data = new ObservableJSON({ values: data });\n        this._rawData = data;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n    }\n    /**\n     * A signal emitted when the attachment model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the attachment model.\n     */\n    dispose() {\n        this._data.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._rawData;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return {};\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._updateObservable(this._data, options.data);\n            this._rawData = options.data;\n        }\n        this._changed.emit(void 0);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const attachment = {};\n        for (const key in this._raw) {\n            attachment[key] = Private.extract(this._raw, key);\n        }\n        return attachment;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for AttachmentModel statics.\n */\n(function (AttachmentModel) {\n    /**\n     * Get the data for an attachment.\n     *\n     * @param bundle - A kernel attachment MIME bundle.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(bundle) {\n        return Private.getData(bundle);\n    }\n    AttachmentModel.getData = getData;\n})(AttachmentModel || (AttachmentModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook attachment.\n     */\n    function getData(bundle) {\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the bundle options given attachment model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        return { data };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSONExt.deepCopy(item);\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=attachmentmodel.js.map","import * as widgets from './widgets';\n/**\n * A mime renderer factory for raw html.\n */\nexport const htmlRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/html'],\n    defaultRank: 50,\n    createRenderer: options => new widgets.RenderedHTML(options)\n};\n/**\n * A mime renderer factory for images.\n */\nexport const imageRendererFactory = {\n    safe: true,\n    mimeTypes: [\n        'image/bmp',\n        'image/png',\n        'image/jpeg',\n        'image/gif',\n        'image/webp'\n    ],\n    defaultRank: 90,\n    createRenderer: options => new widgets.RenderedImage(options)\n};\n/**\n * A mime renderer factory for LaTeX.\n */\nexport const latexRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/latex'],\n    defaultRank: 70,\n    createRenderer: options => new widgets.RenderedLatex(options)\n};\n/**\n * A mime renderer factory for Markdown.\n */\nexport const markdownRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/markdown'],\n    defaultRank: 60,\n    createRenderer: options => new widgets.RenderedMarkdown(options)\n};\n/**\n * A mime renderer factory for svg.\n */\nexport const svgRendererFactory = {\n    safe: false,\n    mimeTypes: ['image/svg+xml'],\n    defaultRank: 80,\n    createRenderer: options => new widgets.RenderedSVG(options)\n};\n/**\n * A mime renderer factory for rendering stderr outputs\n */\nexport const errorRendererFactory = {\n    safe: true,\n    mimeTypes: ['application/vnd.jupyter.stderr'],\n    defaultRank: 110,\n    createRenderer: options => new widgets.RenderedError(options)\n};\n/**\n * A mime renderer factory for plain and jupyter console text data.\n */\nexport const textRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/plain', 'application/vnd.jupyter.stdout'],\n    defaultRank: 120,\n    createRenderer: options => new widgets.RenderedText(options)\n};\n/**\n * A placeholder factory for rendered JavaScript.\n */\nexport const javaScriptRendererFactory = {\n    safe: false,\n    mimeTypes: ['text/javascript', 'application/javascript'],\n    defaultRank: 110,\n    createRenderer: options => new widgets.RenderedJavaScript(options)\n};\n/**\n * The standard factories provided by the rendermime package.\n */\nexport const standardRendererFactories = [\n    htmlRendererFactory,\n    markdownRendererFactory,\n    latexRendererFactory,\n    svgRendererFactory,\n    imageRendererFactory,\n    javaScriptRendererFactory,\n    errorRendererFactory,\n    textRendererFactory\n];\n//# sourceMappingURL=factories.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n// Some magic for deferring mathematical expressions to MathJax\n// by hiding them from the Markdown parser.\n// Some of the code here is adapted with permission from Davide Cervone\n// under the terms of the Apache2 license governing the MathJax project.\n// Other minor modifications are also due to StackExchange and are used with\n// permission.\nconst inline = '$'; // the inline math delimiter\n// MATHSPLIT contains the pattern for math delimiters and special symbols\n// needed for searching for math in the text input.\nconst MATHSPLIT = /(\\$\\$?|\\\\(?:begin|end)\\{[a-z]*\\*?\\}|\\\\[{}$]|[{}]|(?:\\n\\s*)+|@@\\d+@@|\\\\\\\\(?:\\(|\\)|\\[|\\]))/i;\n/**\n *  Break up the text into its component parts and search\n *    through them for math delimiters, braces, linebreaks, etc.\n *  Math delimiters must match and braces must balance.\n *  Don't allow math to pass through a double linebreak\n *    (which will be a paragraph).\n */\nexport function removeMath(text) {\n    const math = []; // stores math strings for later\n    let start = null;\n    let end = null;\n    let last = null;\n    let braces = 0;\n    let deTilde;\n    // Except for extreme edge cases, this should catch precisely those pieces of the markdown\n    // source that will later be turned into code spans. While MathJax will not TeXify code spans,\n    // we still have to consider them at this point; the following issue has happened several times:\n    //\n    //     `$foo` and `$bar` are variables.  -->  <code>$foo ` and `$bar</code> are variables.\n    const hasCodeSpans = text.includes('`') || text.includes('~~~');\n    if (hasCodeSpans) {\n        text = text\n            .replace(/~/g, '~T')\n            // note: the `fence` (three or more consecutive tildes or backticks)\n            // can be followed by an `info string` but this cannot include backticks,\n            // see specification: https://spec.commonmark.org/0.30/#info-string\n            .replace(/^(?<fence>`{3,}|(~T){3,})[^`\\n]*\\n([\\s\\S]*?)^\\k<fence>`*$/gm, wholematch => wholematch.replace(/\\$/g, '~D'))\n            .replace(/(^|[^\\\\])(`+)([^\\n]*?[^`\\n])\\2(?!`)/gm, wholematch => wholematch.replace(/\\$/g, '~D'));\n        deTilde = (text) => {\n            return text.replace(/~([TD])/g, (wholematch, character) => character === 'T' ? '~' : inline);\n        };\n    }\n    else {\n        deTilde = (text) => {\n            return text;\n        };\n    }\n    let blocks = text.replace(/\\r\\n?/g, '\\n').split(MATHSPLIT);\n    for (let i = 1, m = blocks.length; i < m; i += 2) {\n        const block = blocks[i];\n        if (block.charAt(0) === '@') {\n            //\n            //  Things that look like our math markers will get\n            //  stored and then retrieved along with the math.\n            //\n            blocks[i] = '@@' + math.length + '@@';\n            math.push(block);\n        }\n        else if (start !== null) {\n            //\n            //  If we are in math, look for the end delimiter,\n            //    but don't go past double line breaks, and\n            //    and balance braces within the math.\n            //\n            if (block === end) {\n                if (braces) {\n                    last = i;\n                }\n                else {\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                    start = null;\n                    end = null;\n                    last = null;\n                }\n            }\n            else if (block.match(/\\n.*\\n/)) {\n                if (last !== null) {\n                    i = last;\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                }\n                start = null;\n                end = null;\n                last = null;\n                braces = 0;\n            }\n            else if (block === '{') {\n                braces++;\n            }\n            else if (block === '}' && braces) {\n                braces--;\n            }\n        }\n        else {\n            //\n            //  Look for math start delimiters and when\n            //    found, set up the end delimiter.\n            //\n            if (block === inline || block === '$$') {\n                start = i;\n                end = block;\n                braces = 0;\n            }\n            else if (block === '\\\\\\\\(' || block === '\\\\\\\\[') {\n                start = i;\n                end = block.slice(-1) === '(' ? '\\\\\\\\)' : '\\\\\\\\]';\n                braces = 0;\n            }\n            else if (block.substr(1, 5) === 'begin') {\n                start = i;\n                end = '\\\\end' + block.substr(6);\n                braces = 0;\n            }\n        }\n    }\n    if (start !== null && last !== null) {\n        blocks = processMath(start, last, deTilde, math, blocks);\n        start = null;\n        end = null;\n        last = null;\n    }\n    return { text: deTilde(blocks.join('')), math };\n}\n/**\n * Put back the math strings that were saved,\n * and clear the math array (no need to keep it around).\n */\nexport function replaceMath(text, math) {\n    /**\n     * Replace a math placeholder with its corresponding group.\n     * The math delimiters \"\\\\(\", \"\\\\[\", \"\\\\)\" and \"\\\\]\" are replaced\n     * removing one backslash in order to be interpreted correctly by MathJax.\n     */\n    const process = (match, n) => {\n        let group = math[n];\n        if (group.substr(0, 3) === '\\\\\\\\(' &&\n            group.substr(group.length - 3) === '\\\\\\\\)') {\n            group = '\\\\(' + group.substring(3, group.length - 3) + '\\\\)';\n        }\n        else if (group.substr(0, 3) === '\\\\\\\\[' &&\n            group.substr(group.length - 3) === '\\\\\\\\]') {\n            group = '\\\\[' + group.substring(3, group.length - 3) + '\\\\]';\n        }\n        return group;\n    };\n    // Replace all the math group placeholders in the text\n    // with the saved strings.\n    return text.replace(/@@(\\d+)@@/g, process);\n}\n/**\n * Process math blocks.\n *\n * The math is in blocks i through j, so\n *   collect it into one block and clear the others.\n *  Replace &, <, and > by named entities.\n *  For IE, put <br> at the ends of comments since IE removes \\n.\n *  Clear the current math positions and store the index of the\n *   math, then push the math string onto the storage array.\n *  The preProcess function is called on all blocks if it has been passed in\n */\nfunction processMath(i, j, preProcess, math, blocks) {\n    let block = blocks\n        .slice(i, j + 1)\n        .join('')\n        .replace(/&/g, '&amp;') // use HTML entity for &\n        .replace(/</g, '&lt;') // use HTML entity for <\n        .replace(/>/g, '&gt;'); // use HTML entity for >\n    if (navigator && navigator.appName === 'Microsoft Internet Explorer') {\n        block = block.replace(/(%[^\\n]*)\\n/g, '$1<br/>\\n');\n    }\n    while (j > i) {\n        blocks[j] = '';\n        j--;\n    }\n    blocks[i] = '@@' + math.length + '@@'; // replace the current block text with a unique tag to find later\n    if (preProcess) {\n        block = preProcess(block);\n    }\n    math.push(block);\n    return blocks;\n}\n//# sourceMappingURL=latex.js.map","/**\n * The default mime model implementation.\n */\nexport class MimeModel {\n    /**\n     * Construct a new mime model.\n     */\n    constructor(options = {}) {\n        this.trusted = !!options.trusted;\n        this._data = options.data || {};\n        this._metadata = options.metadata || {};\n        this._callback = options.callback || Private.noOp;\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._metadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        this._data = options.data || this._data;\n        this._metadata = options.metadata || this._metadata;\n        this._callback(options);\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A no-op callback function.\n     */\n    function noOp() {\n        /* no-op */\n    }\n    Private.noOp = noOp;\n})(Private || (Private = {}));\n//# sourceMappingURL=mimemodel.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableJSON, ObservableString } from '@jupyterlab/observables';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of a notebook output model.\n */\nexport class OutputModel {\n    /**\n     * Construct a new output model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._raw = {};\n        this._text = undefined;\n        const { data, metadata, trusted } = Private.getBundleOptions(options);\n        this._rawData = data;\n        if (options.value !== undefined && nbformat.isStream(options.value)) {\n            this._text = new ObservableString(typeof options.value.text === 'string'\n                ? options.value.text\n                : options.value.text.join(''));\n        }\n        this._metadata = new ObservableJSON({ values: metadata });\n        this._rawMetadata = metadata;\n        this.trusted = trusted;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                case 'metadata':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n        this.type = value.output_type;\n        if (nbformat.isExecuteResult(value)) {\n            this.executionCount = value.execution_count;\n        }\n        else {\n            this.executionCount = null;\n        }\n    }\n    /**\n     * A signal emitted when the output model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the output model.\n     */\n    dispose() {\n        var _a;\n        (_a = this._text) === null || _a === void 0 ? void 0 : _a.dispose();\n        this._metadata.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return Private.getData(this.toJSON());\n    }\n    get streamText() {\n        return this._text;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._rawMetadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._rawData = options.data;\n        }\n        if (options.metadata) {\n            this._updateObservable(this._metadata, options.metadata);\n            this._rawMetadata = options.metadata;\n        }\n        this._changed.emit();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const output = {};\n        for (const key in this._raw) {\n            output[key] = Private.extract(this._raw, key);\n        }\n        if (this._text !== undefined) {\n            output['text'] = this._text.text;\n        }\n        switch (this.type) {\n            case 'display_data':\n            case 'execute_result':\n            case 'update_display_data':\n                output['data'] = this._rawData;\n                output['metadata'] = this.metadata;\n                break;\n            default:\n                break;\n        }\n        // Remove transient data.\n        delete output['transient'];\n        return output;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for OutputModel statics.\n */\n(function (OutputModel) {\n    /**\n     * Get the data for an output.\n     *\n     * @param output - A kernel output message payload.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(output) {\n        return Private.getData(output);\n    }\n    OutputModel.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     *\n     * @param output - A kernel output message payload.\n     *\n     * @returns - The metadata for the payload.\n     */\n    function getMetadata(output) {\n        return Private.getMetadata(output);\n    }\n    OutputModel.getMetadata = getMetadata;\n})(OutputModel || (OutputModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook output.\n     */\n    function getData(output) {\n        let bundle = {};\n        if (nbformat.isExecuteResult(output) ||\n            nbformat.isDisplayData(output) ||\n            nbformat.isDisplayUpdate(output)) {\n            bundle = output.data;\n        }\n        else if (nbformat.isStream(output)) {\n            if (output.name === 'stderr') {\n                bundle['application/vnd.jupyter.stderr'] = output.text;\n            }\n            else {\n                bundle['application/vnd.jupyter.stdout'] = output.text;\n            }\n        }\n        else if (nbformat.isError(output)) {\n            bundle['application/vnd.jupyter.error'] = output;\n            const traceback = output.traceback.join('\\n');\n            bundle['application/vnd.jupyter.stderr'] =\n                traceback || `${output.ename}: ${output.evalue}`;\n        }\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     */\n    function getMetadata(output) {\n        const value = Object.create(null);\n        if (nbformat.isExecuteResult(output) || nbformat.isDisplayData(output)) {\n            for (const key in output.metadata) {\n                value[key] = extract(output.metadata, key);\n            }\n        }\n        return value;\n    }\n    Private.getMetadata = getMetadata;\n    /**\n     * Get the bundle options given output model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        const metadata = getMetadata(options.value);\n        const trusted = !!options.trusted;\n        return { data, metadata, trusted };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSON.parse(JSON.stringify(item));\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=outputmodel.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Sanitizer } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { MimeModel } from './mimemodel';\n/**\n * An object which manages mime renderer factories.\n *\n * This object is used to render mime models using registered mime\n * renderers, selecting the preferred mime renderer to render the\n * model into a widget.\n *\n * #### Notes\n * This class is not intended to be subclassed.\n */\nexport class RenderMimeRegistry {\n    /**\n     * Construct a new rendermime.\n     *\n     * @param options - The options for initializing the instance.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        this._id = 0;\n        this._ranks = {};\n        this._types = null;\n        this._factories = {};\n        // Parse the options.\n        this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator;\n        this.resolver = (_b = options.resolver) !== null && _b !== void 0 ? _b : null;\n        this.linkHandler = (_c = options.linkHandler) !== null && _c !== void 0 ? _c : null;\n        this.latexTypesetter = (_d = options.latexTypesetter) !== null && _d !== void 0 ? _d : null;\n        this.markdownParser = (_e = options.markdownParser) !== null && _e !== void 0 ? _e : null;\n        this.sanitizer = (_f = options.sanitizer) !== null && _f !== void 0 ? _f : new Sanitizer();\n        // Add the initial factories.\n        if (options.initialFactories) {\n            for (const factory of options.initialFactories) {\n                this.addFactory(factory);\n            }\n        }\n    }\n    /**\n     * The ordered list of mimeTypes.\n     */\n    get mimeTypes() {\n        return this._types || (this._types = Private.sortedTypes(this._ranks));\n    }\n    /**\n     * Find the preferred mime type for a mime bundle.\n     *\n     * @param bundle - The bundle of mime data.\n     *\n     * @param safe - How to consider safe/unsafe factories. If 'ensure',\n     *   it will only consider safe factories. If 'any', any factory will be\n     *   considered. If 'prefer', unsafe factories will be considered, but\n     *   only after the safe options have been exhausted.\n     *\n     * @returns The preferred mime type from the available factories,\n     *   or `undefined` if the mime type cannot be rendered.\n     */\n    preferredMimeType(bundle, safe = 'ensure') {\n        // Try to find a safe factory first, if preferred.\n        if (safe === 'ensure' || safe === 'prefer') {\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle && this._factories[mt].safe) {\n                    return mt;\n                }\n            }\n        }\n        if (safe !== 'ensure') {\n            // Otherwise, search for the best factory among all factories.\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle) {\n                    return mt;\n                }\n            }\n        }\n        // Otherwise, no matching mime type exists.\n        return undefined;\n    }\n    /**\n     * Create a renderer for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns A new renderer for the given mime type.\n     *\n     * @throws An error if no factory exists for the mime type.\n     */\n    createRenderer(mimeType) {\n        // Throw an error if no factory exists for the mime type.\n        if (!(mimeType in this._factories)) {\n            throw new Error(`No factory for mime type: '${mimeType}'`);\n        }\n        // Invoke the best factory for the given mime type.\n        return this._factories[mimeType].createRenderer({\n            mimeType,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            latexTypesetter: this.latexTypesetter,\n            markdownParser: this.markdownParser,\n            translator: this.translator\n        });\n    }\n    /**\n     * Create a new mime model.  This is a convenience method.\n     *\n     * @options - The options used to create the model.\n     *\n     * @returns A new mime model.\n     */\n    createModel(options = {}) {\n        return new MimeModel(options);\n    }\n    /**\n     * Create a clone of this rendermime instance.\n     *\n     * @param options - The options for configuring the clone.\n     *\n     * @returns A new independent clone of the rendermime.\n     */\n    clone(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        // Create the clone.\n        const clone = new RenderMimeRegistry({\n            resolver: (_b = (_a = options.resolver) !== null && _a !== void 0 ? _a : this.resolver) !== null && _b !== void 0 ? _b : undefined,\n            sanitizer: (_d = (_c = options.sanitizer) !== null && _c !== void 0 ? _c : this.sanitizer) !== null && _d !== void 0 ? _d : undefined,\n            linkHandler: (_f = (_e = options.linkHandler) !== null && _e !== void 0 ? _e : this.linkHandler) !== null && _f !== void 0 ? _f : undefined,\n            latexTypesetter: (_h = (_g = options.latexTypesetter) !== null && _g !== void 0 ? _g : this.latexTypesetter) !== null && _h !== void 0 ? _h : undefined,\n            markdownParser: (_k = (_j = options.markdownParser) !== null && _j !== void 0 ? _j : this.markdownParser) !== null && _k !== void 0 ? _k : undefined,\n            translator: this.translator\n        });\n        // Clone the internal state.\n        clone._factories = { ...this._factories };\n        clone._ranks = { ...this._ranks };\n        clone._id = this._id;\n        // Return the cloned object.\n        return clone;\n    }\n    /**\n     * Get the renderer factory registered for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The factory for the mime type, or `undefined`.\n     */\n    getFactory(mimeType) {\n        return this._factories[mimeType];\n    }\n    /**\n     * Add a renderer factory to the rendermime.\n     *\n     * @param factory - The renderer factory of interest.\n     *\n     * @param rank - The rank of the renderer. A lower rank indicates\n     *   a higher priority for rendering. If not given, the rank will\n     *   defer to the `defaultRank` of the factory.  If no `defaultRank`\n     *   is given, it will default to 100.\n     *\n     * #### Notes\n     * The renderer will replace an existing renderer for the given\n     * mimeType.\n     */\n    addFactory(factory, rank) {\n        if (rank === undefined) {\n            rank = factory.defaultRank;\n            if (rank === undefined) {\n                rank = 100;\n            }\n        }\n        for (const mt of factory.mimeTypes) {\n            this._factories[mt] = factory;\n            this._ranks[mt] = { rank, id: this._id++ };\n        }\n        this._types = null;\n    }\n    /**\n     * Remove a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     */\n    removeMimeType(mimeType) {\n        delete this._factories[mimeType];\n        delete this._ranks[mimeType];\n        this._types = null;\n    }\n    /**\n     * Get the rank for a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The rank of the mime type or undefined.\n     */\n    getRank(mimeType) {\n        const rank = this._ranks[mimeType];\n        return rank && rank.rank;\n    }\n    /**\n     * Set the rank of a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @param rank - The new rank to assign.\n     *\n     * #### Notes\n     * This is a no-op if the mime type is not registered.\n     */\n    setRank(mimeType, rank) {\n        if (!this._ranks[mimeType]) {\n            return;\n        }\n        const id = this._id++;\n        this._ranks[mimeType] = { rank, id };\n        this._types = null;\n    }\n}\n/**\n * The namespace for `RenderMimeRegistry` class statics.\n */\n(function (RenderMimeRegistry) {\n    /**\n     * A default resolver that uses a given reference path and a contents manager.\n     */\n    class UrlResolver {\n        /**\n         * Create a new url resolver.\n         */\n        constructor(options) {\n            this._path = options.path;\n            this._contents = options.contents;\n        }\n        /**\n         * The path of the object, from which local urls can be derived.\n         */\n        get path() {\n            return this._path;\n        }\n        set path(value) {\n            this._path = value;\n        }\n        /**\n         * Resolve a relative url to an absolute url path.\n         */\n        async resolveUrl(url) {\n            if (this.isLocal(url)) {\n                const cwd = encodeURI(PathExt.dirname(this.path));\n                url = PathExt.resolve(cwd, url);\n            }\n            return url;\n        }\n        /**\n         * Get the download url of a given absolute url path.\n         *\n         * #### Notes\n         * The returned URL may include a query parameter.\n         */\n        async getDownloadUrl(urlPath) {\n            if (this.isLocal(urlPath)) {\n                // decode url->path before passing to contents api\n                return this._contents.getDownloadUrl(decodeURIComponent(urlPath));\n            }\n            return urlPath;\n        }\n        /**\n         * Whether the URL should be handled by the resolver\n         * or not.\n         *\n         * @param allowRoot - Whether the paths starting at Unix-style filesystem root (`/`) are permitted.\n         *\n         * #### Notes\n         * This is similar to the `isLocal` check in `URLExt`,\n         * but it also checks whether the path points to any\n         * of the `IDrive`s that may be registered with the contents\n         * manager.\n         */\n        isLocal(url, allowRoot = false) {\n            if (this.isMalformed(url)) {\n                return false;\n            }\n            return (URLExt.isLocal(url, allowRoot) ||\n                !!this._contents.driveName(decodeURI(url)));\n        }\n        /**\n         * Resolve a path from Jupyter kernel to a path:\n         * - relative to `root_dir` (preferably) this is in jupyter-server scope,\n         * - path understood and known by kernel (if such a path exists).\n         * Returns `null` if there is no file matching provided path in neither\n         * kernel nor jupyter-server contents manager.\n         */\n        async resolvePath(path) {\n            // TODO: a clean implementation would be server-side and depends on:\n            // https://github.com/jupyter-server/jupyter_server/issues/1280\n            const rootDir = PageConfig.getOption('rootUri').replace('file://', '');\n            // Workaround: expand `~` path using root dir (if it matches).\n            if (path.startsWith('~/') && rootDir.startsWith('/home/')) {\n                // For now we assume that kernel is in root dir.\n                path = rootDir.split('/').slice(0, 3).join('/') + path.substring(1);\n            }\n            if (path.startsWith(rootDir) || path.startsWith('./')) {\n                try {\n                    const relativePath = path.replace(rootDir, '');\n                    // If file exists on the server we have guessed right\n                    const response = await this._contents.get(relativePath, {\n                        content: false\n                    });\n                    return {\n                        path: response.path,\n                        scope: 'server'\n                    };\n                }\n                catch (error) {\n                    // The file seems like should be on the server but is not.\n                    console.warn(`Could not resolve location of ${path} on server`);\n                    return null;\n                }\n            }\n            // The file is not accessible from jupyter-server but maybe it is\n            // available from DAP `source`; we assume the path is available\n            // from kernel because currently we have no way of checking this\n            // without introducing a cycle (unless we were to set the debugger\n            // service instance on the resolver later).\n            return {\n                path: path,\n                scope: 'kernel'\n            };\n        }\n        /**\n         * Whether the URL can be decoded using `decodeURI`.\n         */\n        isMalformed(url) {\n            try {\n                decodeURI(url);\n                return false;\n            }\n            catch (error) {\n                if (error instanceof URIError) {\n                    return true;\n                }\n                throw error;\n            }\n        }\n    }\n    RenderMimeRegistry.UrlResolver = UrlResolver;\n})(RenderMimeRegistry || (RenderMimeRegistry = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the mime types in the map, ordered by rank.\n     */\n    function sortedTypes(map) {\n        return Object.keys(map).sort((a, b) => {\n            const p1 = map[a];\n            const p2 = map[b];\n            if (p1.rank !== p2.rank) {\n                return p1.rank - p2.rank;\n            }\n            return p1.id - p2.id;\n        });\n    }\n    Private.sortedTypes = sortedTypes;\n})(Private || (Private = {}));\n//# sourceMappingURL=registry.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport escape from 'lodash.escape';\nimport { removeMath, replaceMath } from './latex';\n/**\n * Render HTML into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderHTML(options) {\n    // Unpack the options.\n    let { host, source, trusted, sanitizer, resolver, linkHandler, shouldTypeset, latexTypesetter, translator } = options;\n    translator = translator || nullTranslator;\n    const trans = translator === null || translator === void 0 ? void 0 : translator.load('jupyterlab');\n    let originalSource = source;\n    // Bail early if the source is empty.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Sanitize the source if it is not trusted. This removes all\n    // `<script>` tags as well as other potentially harmful HTML.\n    if (!trusted) {\n        originalSource = `${source}`;\n        source = sanitizer.sanitize(source);\n    }\n    // Set the inner HTML of the host.\n    host.innerHTML = source;\n    if (host.getElementsByTagName('script').length > 0) {\n        // If output it trusted, eval any script tags contained in the HTML.\n        // This is not done automatically by the browser when script tags are\n        // created by setting `innerHTML`.\n        if (trusted) {\n            Private.evalInnerHTMLScriptTags(host);\n        }\n        else {\n            const container = document.createElement('div');\n            const warning = document.createElement('pre');\n            warning.textContent = trans.__('This HTML output contains inline scripts. Are you sure that you want to run arbitrary Javascript within your JupyterLab session?');\n            const runButton = document.createElement('button');\n            runButton.textContent = trans.__('Run');\n            runButton.onclick = event => {\n                host.innerHTML = originalSource;\n                Private.evalInnerHTMLScriptTags(host);\n                if (host.firstChild) {\n                    host.removeChild(host.firstChild);\n                }\n            };\n            container.appendChild(warning);\n            container.appendChild(runButton);\n            host.insertBefore(container, host.firstChild);\n        }\n    }\n    // Handle default behavior of nodes.\n    Private.handleDefaults(host, resolver);\n    // Patch the urls if a resolver is available.\n    let promise;\n    if (resolver) {\n        promise = Private.handleUrls(host, resolver, linkHandler);\n    }\n    else {\n        promise = Promise.resolve(undefined);\n    }\n    // Return the final rendered promise.\n    return promise.then(() => {\n        if (shouldTypeset && latexTypesetter) {\n            latexTypesetter.typeset(host);\n        }\n    });\n}\n/**\n * Render an image into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderImage(options) {\n    // Unpack the options.\n    const { host, mimeType, source, width, height, needsBackground, unconfined } = options;\n    // Clear the content in the host.\n    host.textContent = '';\n    // Create the image element.\n    const img = document.createElement('img');\n    // Set the source of the image.\n    img.src = `data:${mimeType};base64,${source}`;\n    // Set the size of the image if provided.\n    if (typeof height === 'number') {\n        img.height = height;\n    }\n    if (typeof width === 'number') {\n        img.width = width;\n    }\n    if (needsBackground === 'light') {\n        img.classList.add('jp-needs-light-background');\n    }\n    else if (needsBackground === 'dark') {\n        img.classList.add('jp-needs-dark-background');\n    }\n    if (unconfined === true) {\n        img.classList.add('jp-mod-unconfined');\n    }\n    // Add the image to the host.\n    host.appendChild(img);\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render LaTeX into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderLatex(options) {\n    // Unpack the options.\n    const { host, source, shouldTypeset, latexTypesetter } = options;\n    // Set the source on the node.\n    host.textContent = source;\n    // Typeset the node if needed.\n    if (shouldTypeset && latexTypesetter) {\n        latexTypesetter.typeset(host);\n    }\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render Markdown into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport async function renderMarkdown(options) {\n    // Unpack the options.\n    const { host, source, markdownParser, ...others } = options;\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return;\n    }\n    let html = '';\n    if (markdownParser) {\n        // Separate math from normal markdown text.\n        const parts = removeMath(source);\n        // Convert the markdown to HTML.\n        html = await markdownParser.render(parts['text']);\n        // Replace math.\n        html = replaceMath(html, parts['math']);\n    }\n    else {\n        // Fallback if the application does not have any markdown parser.\n        html = `<pre>${source}</pre>`;\n    }\n    // Render HTML.\n    await renderHTML({\n        host,\n        source: html,\n        ...others\n    });\n    // Apply ids to the header nodes.\n    Private.headerAnchors(host);\n}\n/**\n * The namespace for the `renderMarkdown` function statics.\n */\n(function (renderMarkdown) {\n    /**\n     * Create a normalized id for a header element.\n     *\n     * @param header Header element\n     * @returns Normalized id\n     */\n    function createHeaderId(header) {\n        var _a;\n        return ((_a = header.textContent) !== null && _a !== void 0 ? _a : '').replace(/ /g, '-');\n    }\n    renderMarkdown.createHeaderId = createHeaderId;\n})(renderMarkdown || (renderMarkdown = {}));\n/**\n * Render SVG into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderSVG(options) {\n    // Unpack the options.\n    let { host, source, trusted, unconfined } = options;\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Display a message if the source is not trusted.\n    if (!trusted) {\n        host.textContent =\n            'Cannot display an untrusted SVG. Maybe you need to run the cell?';\n        return Promise.resolve(undefined);\n    }\n    // Add missing SVG namespace (if actually missing)\n    const patt = '<svg[^>]+xmlns=[^>]+svg';\n    if (source.search(patt) < 0) {\n        source = source.replace('<svg', '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n    // Render in img so that user can save it easily\n    const img = new Image();\n    img.src = `data:image/svg+xml,${encodeURIComponent(source)}`;\n    host.appendChild(img);\n    if (unconfined === true) {\n        host.classList.add('jp-mod-unconfined');\n    }\n    return Promise.resolve();\n}\nvar ILinker;\n(function (ILinker) {\n    // Taken from Visual Studio Code:\n    // https://github.com/microsoft/vscode/blob/9f709d170b06e991502153f281ec3c012add2e42/src/vs/workbench/contrib/debug/browser/linkDetector.ts#L17-L18\n    const controlCodes = '\\\\u0000-\\\\u0020\\\\u007f-\\\\u009f';\n    ILinker.webLinkRegex = new RegExp('(?<path>(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\\\/\\\\/|data:|www\\\\.)[^\\\\s' +\n        controlCodes +\n        '\"]{2,}[^\\\\s' +\n        controlCodes +\n        '\"\\'(){}\\\\[\\\\],:;.!?])', 'ug');\n    // Taken from Visual Studio Code:\n    // https://github.com/microsoft/vscode/blob/3e407526a1e2ff22cacb69c7e353e81a12f41029/extensions/notebook-renderers/src/linkify.ts#L9\n    const winAbsPathRegex = /(?:[a-zA-Z]:(?:(?:\\\\|\\/)[\\w\\.-]*)+)/;\n    const winRelPathRegex = /(?:(?:\\~|\\.)(?:(?:\\\\|\\/)[\\w\\.-]*)+)/;\n    const winPathRegex = new RegExp(`(${winAbsPathRegex.source}|${winRelPathRegex.source})`);\n    const posixPathRegex = /((?:\\~|\\.)?(?:\\/[\\w\\.-]*)+)/;\n    const lineColumnRegex = /(?:(?:\\:|\", line )(?<line>[\\d]+))?(?:\\:(?<column>[\\d]+))?/;\n    // TODO: this ought to come from kernel (browser may be on a different OS).\n    const isWindows = navigator.userAgent.indexOf('Windows') >= 0;\n    ILinker.pathLinkRegex = new RegExp(`(?<path>${isWindows ? winPathRegex.source : posixPathRegex.source})${lineColumnRegex.source}`, 'g');\n})(ILinker || (ILinker = {}));\n/**\n * Linker for web URLs.\n */\nclass WebLinker {\n    constructor() {\n        this.regex = ILinker.webLinkRegex;\n    }\n    createAnchor(url, label) {\n        const anchor = document.createElement('a');\n        anchor.href = url.startsWith('www.') ? 'https://' + url : url;\n        anchor.rel = 'noopener';\n        anchor.target = '_blank';\n        anchor.appendChild(document.createTextNode(label));\n        return anchor;\n    }\n    processPath(url) {\n        // Special case when the URL ends with \">\" or \"<\"\n        const lastChars = url.slice(-1);\n        const endsWithGtLt = ['>', '<'].indexOf(lastChars) !== -1;\n        const len = endsWithGtLt ? url.length - 1 : url.length;\n        url = url.slice(0, len);\n        return url;\n    }\n    processLabel(url) {\n        return this.processPath(url);\n    }\n}\n/**\n * Linker for path URIs.\n */\nclass PathLinker {\n    constructor() {\n        this.regex = ILinker.pathLinkRegex;\n    }\n    createAnchor(path, label, locators) {\n        const anchor = document.createElement('a');\n        // Store the path in dataset.\n        // Do not set `href` - at this point we do not know if the path is valid and\n        // accessible for application (and we want rendering those as links).\n        anchor.dataset.path = path;\n        // Store line using RFC 5147 fragment locator for text/plain files.\n        // It could be expanded to other formats, e.g. based on file extension.\n        const line = parseInt(locators['line'], 10);\n        let locator = !isNaN(line) ? `line=${line - 1}` : '';\n        anchor.dataset.locator = locator;\n        anchor.appendChild(document.createTextNode(label));\n        return anchor;\n    }\n}\nfunction autolink(content, options) {\n    const linkers = [];\n    if (options.checkWeb) {\n        linkers.push(new WebLinker());\n    }\n    if (options.checkPaths) {\n        linkers.push(new PathLinker());\n    }\n    const nodes = [];\n    // There are two ways to implement competitive regexes:\n    // - two heads (which would need to resolve overlaps), or\n    // - (simpler) divide and recurse (implemented below)\n    const linkify = (content, regexIndex) => {\n        if (regexIndex >= linkers.length) {\n            nodes.push(document.createTextNode(content));\n            return;\n        }\n        const linker = linkers[regexIndex];\n        let match;\n        let currentIndex = 0;\n        const regex = linker.regex;\n        // Reset regex\n        regex.lastIndex = 0;\n        while (null != (match = regex.exec(content))) {\n            const stringBeforeMatch = content.substring(currentIndex, match.index);\n            if (stringBeforeMatch) {\n                linkify(stringBeforeMatch, regexIndex + 1);\n            }\n            const { path, ...locators } = match.groups;\n            const value = linker.processPath ? linker.processPath(path) : path;\n            const label = linker.processLabel\n                ? linker.processLabel(match[0])\n                : match[0];\n            nodes.push(linker.createAnchor(value, label, locators));\n            currentIndex = match.index + label.length;\n        }\n        const stringAfterMatches = content.substring(currentIndex);\n        if (stringAfterMatches) {\n            linkify(stringAfterMatches, regexIndex + 1);\n        }\n    };\n    linkify(content, 0);\n    return nodes;\n}\n/**\n * Split a shallow node (node without nested nodes inside) at a given text content position.\n *\n * @param node the shallow node to be split\n * @param at the position in textContent at which the split should occur\n */\nfunction splitShallowNode(node, at) {\n    var _a, _b;\n    const pre = node.cloneNode();\n    pre.textContent = (_a = node.textContent) === null || _a === void 0 ? void 0 : _a.slice(0, at);\n    const post = node.cloneNode();\n    post.textContent = (_b = node.textContent) === null || _b === void 0 ? void 0 : _b.slice(at);\n    return {\n        pre,\n        post\n    };\n}\n/**\n * Iterate over some nodes, while tracking cumulative start and end position.\n */\nfunction* nodeIter(nodes) {\n    var _a;\n    let start = 0;\n    let end;\n    for (let node of nodes) {\n        end = start + (((_a = node.textContent) === null || _a === void 0 ? void 0 : _a.length) || 0);\n        yield {\n            node,\n            start,\n            end,\n            isText: node.nodeType === Node.TEXT_NODE\n        };\n        start = end;\n    }\n}\n/**\n * Align two collections of nodes.\n *\n * If a text node in one collections spans an element in the other, yield the spanned elements.\n * Otherwise, split the nodes such that yielded pair start and stop on the same position.\n */\nfunction* alignedNodes(a, b) {\n    var _a, _b;\n    let iterA = nodeIter(a);\n    let iterB = nodeIter(b);\n    let nA = iterA.next();\n    let nB = iterB.next();\n    while (!nA.done && !nB.done) {\n        let A = nA.value;\n        let B = nB.value;\n        if (A.isText && A.start <= B.start && A.end >= B.end) {\n            // A is a text element that spans all of B, simply yield B\n            yield [null, B.node];\n            nB = iterB.next();\n        }\n        else if (B.isText && B.start <= A.start && B.end >= A.end) {\n            // B is a text element that spans all of A, simply yield A\n            yield [A.node, null];\n            nA = iterA.next();\n        }\n        else {\n            // There is some intersection, split one, unless they match exactly\n            if (A.end === B.end && A.start === B.start) {\n                yield [A.node, B.node];\n                nA = iterA.next();\n                nB = iterB.next();\n            }\n            else if (A.end > B.end) {\n                /*\n                A |-----[======]---|\n                B |--[======]------|\n                            | <- Split A here\n                        | <- trim B to start from here if needed\n                */\n                let { pre, post } = splitShallowNode(A.node, B.end - A.start);\n                if (B.start < A.start) {\n                    // this node should not be yielded anywhere else, so ok to modify in-place\n                    B.node.textContent = (_a = B.node.textContent) === null || _a === void 0 ? void 0 : _a.slice(A.start - B.start);\n                }\n                yield [pre, B.node];\n                // Modify iteration result in-place:\n                A.node = post;\n                A.start = B.end;\n                nB = iterB.next();\n            }\n            else if (B.end > A.end) {\n                let { pre, post } = splitShallowNode(B.node, A.end - B.start);\n                if (A.start < B.start) {\n                    // this node should not be yielded anywhere else, so ok to modify in-place\n                    A.node.textContent = (_b = A.node.textContent) === null || _b === void 0 ? void 0 : _b.slice(B.start - A.start);\n                }\n                yield [A.node, pre];\n                // Modify iteration result in-place:\n                B.node = post;\n                B.start = A.end;\n                nA = iterA.next();\n            }\n            else {\n                throw new Error(`Unexpected intersection: ${JSON.stringify(A)} ${JSON.stringify(B)}`);\n            }\n        }\n    }\n}\n/**\n * Render text into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderText(options) {\n    renderTextual(options, {\n        checkWeb: true,\n        checkPaths: false\n    });\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Sanitize HTML out using native browser sanitizer.\n *\n * Compared to the `ISanitizer.sanitize` this does not allow to selectively\n * allow to keep certain tags but escapes everything; on the other hand\n * it is much faster as it uses platform-optimized code.\n */\nfunction nativeSanitize(source) {\n    const el = document.createElement('span');\n    el.textContent = source;\n    return el.innerHTML;\n}\n/**\n * Render the textual representation into a host node.\n *\n * Implements the shared logic for `renderText` and `renderError`.\n */\nfunction renderTextual(options, autoLinkOptions) {\n    var _a, _b;\n    // Unpack the options.\n    const { host, sanitizer, source } = options;\n    const ansiPrefixRe = /\\x1b/; // eslint-disable-line no-control-regex\n    const hasAnsiPrefix = ansiPrefixRe.test(source);\n    // Create the HTML content:\n    // If no ANSI codes are present use a fast path for escaping.\n    const content = hasAnsiPrefix\n        ? sanitizer.sanitize(Private.ansiSpan(source), {\n            allowedTags: ['span']\n        })\n        : nativeSanitize(source);\n    // Set the sanitized content for the host node.\n    const pre = document.createElement('pre');\n    pre.innerHTML = content;\n    const preTextContent = pre.textContent;\n    const cacheStoreOptions = [];\n    if (autoLinkOptions.checkWeb) {\n        cacheStoreOptions.push('web');\n    }\n    if (autoLinkOptions.checkPaths) {\n        cacheStoreOptions.push('paths');\n    }\n    const cacheStoreKey = cacheStoreOptions.join('-');\n    let cacheStore = Private.autoLinkCache.get(cacheStoreKey);\n    if (!cacheStore) {\n        cacheStore = new WeakMap();\n        Private.autoLinkCache.set(cacheStoreKey, cacheStore);\n    }\n    let ret;\n    if (preTextContent) {\n        // Note: only text nodes and span elements should be present after sanitization in the `<pre>` element.\n        let linkedNodes;\n        if ((_b = (_a = sanitizer.getAutolink) === null || _a === void 0 ? void 0 : _a.call(sanitizer)) !== null && _b !== void 0 ? _b : true) {\n            const cache = getApplicableLinkCache(cacheStore.get(host), preTextContent);\n            if (cache) {\n                const { cachedNodes: fromCache, addedText } = cache;\n                const newAdditions = autolink(addedText, autoLinkOptions);\n                const lastInCache = fromCache[fromCache.length - 1];\n                const firstNewNode = newAdditions[0];\n                if (lastInCache instanceof Text && firstNewNode instanceof Text) {\n                    const joiningNode = lastInCache;\n                    joiningNode.data += firstNewNode.data;\n                    linkedNodes = [\n                        ...fromCache.slice(0, -1),\n                        joiningNode,\n                        ...newAdditions.slice(1)\n                    ];\n                }\n                else {\n                    linkedNodes = [...fromCache, ...newAdditions];\n                }\n            }\n            else {\n                linkedNodes = autolink(preTextContent, autoLinkOptions);\n            }\n            cacheStore.set(host, {\n                preTextContent,\n                // Clone the nodes before storing them in the cache in case if another component\n                // attempts to modify (e.g. dispose of) them - which is the case for search highlights!\n                linkedNodes: linkedNodes.map(node => node.cloneNode(true))\n            });\n        }\n        else {\n            linkedNodes = [document.createTextNode(content)];\n        }\n        const preNodes = Array.from(pre.childNodes);\n        ret = mergeNodes(preNodes, linkedNodes);\n    }\n    else {\n        ret = document.createElement('pre');\n    }\n    host.appendChild(ret);\n}\n/**\n * Return the information from the cache that can be used given the cache entry and current text.\n * If the cache is invalid given the current text (or cannot be used) `null` is returned.\n */\nfunction getApplicableLinkCache(cachedResult, preTextContent) {\n    if (!cachedResult) {\n        return null;\n    }\n    if (preTextContent.length < cachedResult.preTextContent.length) {\n        // If the new content is shorter than the cached content\n        // we cannot use the cache as we only support appending.\n        return null;\n    }\n    let addedText = preTextContent.substring(cachedResult.preTextContent.length);\n    let cachedNodes = cachedResult.linkedNodes;\n    const lastCachedNode = cachedResult.linkedNodes[cachedResult.linkedNodes.length - 1];\n    // Only use cached nodes if:\n    // - the last cached node is a text node\n    // - the new content starts with a new line\n    // - the old content ends with a new line\n    if (cachedResult.preTextContent.endsWith('\\n') ||\n        addedText.startsWith('\\n')) {\n        // Second or third condition is met, we can use the cached nodes\n        // (this is a no-op, we just continue execution).\n    }\n    else if (lastCachedNode instanceof Text) {\n        // The first condition is met, we can use the cached nodes,\n        // but first we remove the Text node to re-analyse its text.\n        // This is required when we cached `aaa www.one.com bbb www.`\n        // and the incoming addition is `two.com`. We can still\n        // use text node `aaa ` and anchor node `www.one.com`, but\n        // we need to pass `bbb www.` + `two.com` through linkify again.\n        cachedNodes = cachedNodes.slice(0, -1);\n        addedText = lastCachedNode.textContent + addedText;\n    }\n    else {\n        return null;\n    }\n    // Finally check if text has not changed.\n    if (!preTextContent.startsWith(cachedResult.preTextContent)) {\n        return null;\n    }\n    return {\n        cachedNodes,\n        addedText\n    };\n}\n/**\n * Render error into a host node.\n *\n * @param options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderError(options) {\n    // Unpack the options.\n    const { host, linkHandler, resolver } = options;\n    renderTextual(options, {\n        checkWeb: true,\n        checkPaths: true\n    });\n    // Patch the paths if a resolver is available.\n    let promise;\n    if (resolver) {\n        promise = Private.handlePaths(host, resolver, linkHandler);\n    }\n    else {\n        promise = Promise.resolve(undefined);\n    }\n    // Return the rendered promise.\n    return promise;\n}\n/**\n * Merge `<span>` nodes from a `<pre>` element with `<a>` nodes from linker.\n */\nfunction mergeNodes(preNodes, linkedNodes) {\n    const ret = document.createElement('pre');\n    let inAnchorElement = false;\n    const combinedNodes = [];\n    for (let nodes of alignedNodes(preNodes, linkedNodes)) {\n        if (!nodes[0]) {\n            combinedNodes.push(nodes[1]);\n            inAnchorElement = nodes[1].nodeType !== Node.TEXT_NODE;\n            continue;\n        }\n        else if (!nodes[1]) {\n            combinedNodes.push(nodes[0]);\n            inAnchorElement = false;\n            continue;\n        }\n        let [preNode, linkNode] = nodes;\n        const lastCombined = combinedNodes[combinedNodes.length - 1];\n        // If we are already in an anchor element and the anchor element did not change,\n        // we should insert the node from <pre> which is either Text node or coloured span Element\n        // into the anchor content as a child\n        if (inAnchorElement &&\n            linkNode.href ===\n                lastCombined.href) {\n            lastCombined.appendChild(preNode);\n        }\n        else {\n            // the `linkNode` is either Text or AnchorElement;\n            const isAnchor = linkNode.nodeType !== Node.TEXT_NODE;\n            // if we are NOT about to start an anchor element, just add the pre Node\n            if (!isAnchor) {\n                combinedNodes.push(preNode);\n                inAnchorElement = false;\n            }\n            else {\n                // otherwise start a new anchor; the contents of the `linkNode` and `preNode` should be the same,\n                // so we just put the neatly formatted `preNode` inside the anchor node (`linkNode`)\n                // and append that to combined nodes.\n                linkNode.textContent = '';\n                linkNode.appendChild(preNode);\n                combinedNodes.push(linkNode);\n                inAnchorElement = true;\n            }\n        }\n    }\n    // Do not reuse `pre` element. Clearing out previous children is too slow...\n    for (const child of combinedNodes) {\n        ret.appendChild(child);\n    }\n    return ret;\n}\n/**\n * The namespace for module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Cache for auto-linking results to provide better performance when streaming outputs.\n     */\n    Private.autoLinkCache = new Map();\n    /**\n     * Eval the script tags contained in a host populated by `innerHTML`.\n     *\n     * When script tags are created via `innerHTML`, the browser does not\n     * evaluate them when they are added to the page. This function works\n     * around that by creating new equivalent script nodes manually, and\n     * replacing the originals.\n     */\n    function evalInnerHTMLScriptTags(host) {\n        // Create a snapshot of the current script nodes.\n        const scripts = Array.from(host.getElementsByTagName('script'));\n        // Loop over each script node.\n        for (const script of scripts) {\n            // Skip any scripts which no longer have a parent.\n            if (!script.parentNode) {\n                continue;\n            }\n            // Create a new script node which will be clone.\n            const clone = document.createElement('script');\n            // Copy the attributes into the clone.\n            const attrs = script.attributes;\n            for (let i = 0, n = attrs.length; i < n; ++i) {\n                const { name, value } = attrs[i];\n                clone.setAttribute(name, value);\n            }\n            // Copy the text content into the clone.\n            clone.textContent = script.textContent;\n            // Replace the old script in the parent.\n            script.parentNode.replaceChild(clone, script);\n        }\n    }\n    Private.evalInnerHTMLScriptTags = evalInnerHTMLScriptTags;\n    /**\n     * Handle the default behavior of nodes.\n     */\n    function handleDefaults(node, resolver) {\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            const el = anchors[i];\n            // skip when processing a elements inside svg\n            // which are of type SVGAnimatedString\n            if (!(el instanceof HTMLAnchorElement)) {\n                continue;\n            }\n            const path = el.href;\n            const isLocal = resolver && resolver.isLocal\n                ? resolver.isLocal(path)\n                : URLExt.isLocal(path);\n            // set target attribute if not already present\n            if (!el.target) {\n                el.target = isLocal ? '_self' : '_blank';\n            }\n            // set rel as 'noopener' for non-local anchors\n            if (!isLocal) {\n                el.rel = 'noopener';\n            }\n        }\n        // Handle image elements.\n        const imgs = node.getElementsByTagName('img');\n        for (let i = 0; i < imgs.length; i++) {\n            if (!imgs[i].alt) {\n                imgs[i].alt = 'Image';\n            }\n        }\n    }\n    Private.handleDefaults = handleDefaults;\n    /**\n     * Resolve the relative urls in element `src` and `href` attributes.\n     *\n     * @param node - The head html element.\n     *\n     * @param resolver - A url resolver.\n     *\n     * @param linkHandler - An optional link handler for nodes.\n     *\n     * @returns a promise fulfilled when the relative urls have been resolved.\n     */\n    function handleUrls(node, resolver, linkHandler) {\n        // Set up an array to collect promises.\n        const promises = [];\n        // Handle HTML Elements with src attributes.\n        const nodes = node.querySelectorAll('*[src]');\n        for (let i = 0; i < nodes.length; i++) {\n            promises.push(handleAttr(nodes[i], 'src', resolver));\n        }\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            promises.push(handleAnchor(anchors[i], resolver, linkHandler));\n        }\n        // Handle link elements.\n        const links = node.getElementsByTagName('link');\n        for (let i = 0; i < links.length; i++) {\n            promises.push(handleAttr(links[i], 'href', resolver));\n        }\n        // Wait on all promises.\n        return Promise.all(promises).then(() => undefined);\n    }\n    Private.handleUrls = handleUrls;\n    /**\n     * Resolve the paths in `<a>` elements `data` attributes.\n     *\n     * @param node - The head html element.\n     *\n     * @param resolver - A url resolver.\n     *\n     * @param linkHandler - An optional link handler for nodes.\n     *\n     * @returns a promise fulfilled when the relative urls have been resolved.\n     */\n    async function handlePaths(node, resolver, linkHandler) {\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            await handlePathAnchor(anchors[i], resolver, linkHandler);\n        }\n    }\n    Private.handlePaths = handlePaths;\n    /**\n     * Apply ids to headers.\n     */\n    function headerAnchors(node) {\n        const headerNames = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        for (const headerType of headerNames) {\n            const headers = node.getElementsByTagName(headerType);\n            for (let i = 0; i < headers.length; i++) {\n                const header = headers[i];\n                header.id = renderMarkdown.createHeaderId(header);\n                const anchor = document.createElement('a');\n                anchor.target = '_self';\n                anchor.textContent = '¶';\n                anchor.href = '#' + header.id;\n                anchor.classList.add('jp-InternalAnchorLink');\n                header.appendChild(anchor);\n            }\n        }\n    }\n    Private.headerAnchors = headerAnchors;\n    /**\n     * Handle a node with a `src` or `href` attribute.\n     */\n    async function handleAttr(node, name, resolver) {\n        const source = node.getAttribute(name) || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(source)\n            : URLExt.isLocal(source);\n        if (!source || !isLocal) {\n            return;\n        }\n        try {\n            const urlPath = await resolver.resolveUrl(source);\n            let url = await resolver.getDownloadUrl(urlPath);\n            if (URLExt.parse(url).protocol !== 'data:') {\n                // Bust caching for local src attrs.\n                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n            }\n            node.setAttribute(name, url);\n        }\n        catch (err) {\n            // If there was an error getting the url,\n            // just make it an empty link and report the error.\n            node.setAttribute(name, '');\n            throw err;\n        }\n    }\n    /**\n     * Handle an anchor node.\n     */\n    function handleAnchor(anchor, resolver, linkHandler) {\n        // Get the link path without the location prepended.\n        // (e.g. \"./foo.md#Header 1\" vs \"http://localhost:8888/foo.md#Header 1\")\n        let href = anchor.getAttribute('href') || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(href)\n            : URLExt.isLocal(href);\n        // Bail if it is not a file-like url.\n        if (!href || !isLocal) {\n            return Promise.resolve(undefined);\n        }\n        // Remove the hash until we can handle it.\n        const hash = anchor.hash;\n        if (hash) {\n            // Handle internal link in the file.\n            if (hash === href) {\n                anchor.target = '_self';\n                return Promise.resolve(undefined);\n            }\n            // For external links, remove the hash until we have hash handling.\n            href = href.replace(hash, '');\n        }\n        // Get the appropriate file path.\n        return resolver\n            .resolveUrl(href)\n            .then(urlPath => {\n            // decode encoded url from url to api path\n            const path = decodeURIComponent(urlPath);\n            // Handle the click override.\n            if (linkHandler) {\n                linkHandler.handleLink(anchor, path, hash);\n            }\n            // Get the appropriate file download path.\n            return resolver.getDownloadUrl(urlPath);\n        })\n            .then(url => {\n            // Set the visible anchor.\n            anchor.href = url + hash;\n        })\n            .catch(err => {\n            // If there was an error getting the url,\n            // just make it an empty link.\n            anchor.href = '';\n        });\n    }\n    /**\n     * Handle an anchor node.\n     */\n    async function handlePathAnchor(anchor, resolver, linkHandler) {\n        let path = anchor.dataset.path || '';\n        let locator = anchor.dataset.locator ? '#' + anchor.dataset.locator : '';\n        delete anchor.dataset.path;\n        delete anchor.dataset.locator;\n        const allowRoot = true;\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(path, allowRoot)\n            : URLExt.isLocal(path, allowRoot);\n        // Bail if:\n        // - it is not a file-like url,\n        // - the resolver does not support paths\n        // - there is no link handler, or if it does not support paths\n        if (!path ||\n            !isLocal ||\n            !resolver.resolvePath ||\n            !linkHandler ||\n            !linkHandler.handlePath) {\n            anchor.replaceWith(...anchor.childNodes);\n            return Promise.resolve(undefined);\n        }\n        try {\n            // Find given path\n            const resolution = await resolver.resolvePath(path);\n            if (!resolution) {\n                // Bail if the file does not exist\n                console.log('Path resolution bailing: does not exist');\n                return Promise.resolve(undefined);\n            }\n            // Handle the click override.\n            linkHandler.handlePath(anchor, resolution.path, resolution.scope, locator);\n            // Set the visible anchor.\n            anchor.href = resolution.path + locator;\n        }\n        catch (err) {\n            // If there was an error getting the url,\n            // just make it an empty link.\n            console.warn('Path anchor error:', err);\n            anchor.href = '#linking-failed-see-console';\n        }\n    }\n    const ANSI_COLORS = [\n        'ansi-black',\n        'ansi-red',\n        'ansi-green',\n        'ansi-yellow',\n        'ansi-blue',\n        'ansi-magenta',\n        'ansi-cyan',\n        'ansi-white',\n        'ansi-black-intense',\n        'ansi-red-intense',\n        'ansi-green-intense',\n        'ansi-yellow-intense',\n        'ansi-blue-intense',\n        'ansi-magenta-intense',\n        'ansi-cyan-intense',\n        'ansi-white-intense'\n    ];\n    /**\n     * Create HTML tags for a string with given foreground, background etc. and\n     * add them to the `out` array.\n     */\n    function pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out) {\n        if (chunk) {\n            const classes = [];\n            const styles = [];\n            if (bold && typeof fg === 'number' && 0 <= fg && fg < 8) {\n                fg += 8; // Bold text uses \"intense\" colors\n            }\n            if (inverse) {\n                [fg, bg] = [bg, fg];\n            }\n            if (typeof fg === 'number') {\n                classes.push(ANSI_COLORS[fg] + '-fg');\n            }\n            else if (fg.length) {\n                styles.push(`color: rgb(${fg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-fg');\n            }\n            if (typeof bg === 'number') {\n                classes.push(ANSI_COLORS[bg] + '-bg');\n            }\n            else if (bg.length) {\n                styles.push(`background-color: rgb(${bg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-bg');\n            }\n            if (bold) {\n                classes.push('ansi-bold');\n            }\n            if (underline) {\n                classes.push('ansi-underline');\n            }\n            if (classes.length || styles.length) {\n                out.push('<span');\n                if (classes.length) {\n                    out.push(` class=\"${classes.join(' ')}\"`);\n                }\n                if (styles.length) {\n                    out.push(` style=\"${styles.join('; ')}\"`);\n                }\n                out.push('>');\n                out.push(chunk);\n                out.push('</span>');\n            }\n            else {\n                out.push(chunk);\n            }\n        }\n    }\n    /**\n     * Convert ANSI extended colors to R/G/B triple.\n     */\n    function getExtendedColors(numbers) {\n        let r;\n        let g;\n        let b;\n        const n = numbers.shift();\n        if (n === 2 && numbers.length >= 3) {\n            // 24-bit RGB\n            r = numbers.shift();\n            g = numbers.shift();\n            b = numbers.shift();\n            if ([r, g, b].some(c => c < 0 || 255 < c)) {\n                throw new RangeError('Invalid range for RGB colors');\n            }\n        }\n        else if (n === 5 && numbers.length >= 1) {\n            // 256 colors\n            const idx = numbers.shift();\n            if (idx < 0) {\n                throw new RangeError('Color index must be >= 0');\n            }\n            else if (idx < 16) {\n                // 16 default terminal colors\n                return idx;\n            }\n            else if (idx < 232) {\n                // 6x6x6 color cube, see https://stackoverflow.com/a/27165165/500098\n                r = Math.floor((idx - 16) / 36);\n                r = r > 0 ? 55 + r * 40 : 0;\n                g = Math.floor(((idx - 16) % 36) / 6);\n                g = g > 0 ? 55 + g * 40 : 0;\n                b = (idx - 16) % 6;\n                b = b > 0 ? 55 + b * 40 : 0;\n            }\n            else if (idx < 256) {\n                // grayscale, see https://stackoverflow.com/a/27165165/500098\n                r = g = b = (idx - 232) * 10 + 8;\n            }\n            else {\n                throw new RangeError('Color index must be < 256');\n            }\n        }\n        else {\n            throw new RangeError('Invalid extended color specification');\n        }\n        return [r, g, b];\n    }\n    /**\n     * Transform ANSI color escape codes into HTML <span> tags with CSS\n     * classes such as \"ansi-green-intense-fg\".\n     * The actual colors used are set in the CSS file.\n     * This also removes non-color escape sequences.\n     * This is supposed to have the same behavior as nbconvert.filters.ansi2html()\n     */\n    function ansiSpan(str) {\n        const ansiRe = /\\x1b\\[(.*?)([@-~])/g; // eslint-disable-line no-control-regex\n        let fg = [];\n        let bg = [];\n        let bold = false;\n        let underline = false;\n        let inverse = false;\n        let match;\n        const out = [];\n        const numbers = [];\n        let start = 0;\n        str = escape(str);\n        str += '\\x1b[m'; // Ensure markup for trailing text\n        // tslint:disable-next-line\n        while ((match = ansiRe.exec(str))) {\n            if (match[2] === 'm') {\n                const items = match[1].split(';');\n                for (let i = 0; i < items.length; i++) {\n                    const item = items[i];\n                    if (item === '') {\n                        numbers.push(0);\n                    }\n                    else if (item.search(/^\\d+$/) !== -1) {\n                        numbers.push(parseInt(item, 10));\n                    }\n                    else {\n                        // Ignored: Invalid color specification\n                        numbers.length = 0;\n                        break;\n                    }\n                }\n            }\n            else {\n                // Ignored: Not a color code\n            }\n            const chunk = str.substring(start, match.index);\n            pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out);\n            start = ansiRe.lastIndex;\n            while (numbers.length) {\n                const n = numbers.shift();\n                switch (n) {\n                    case 0:\n                        fg = bg = [];\n                        bold = false;\n                        underline = false;\n                        inverse = false;\n                        break;\n                    case 1:\n                    case 5:\n                        bold = true;\n                        break;\n                    case 4:\n                        underline = true;\n                        break;\n                    case 7:\n                        inverse = true;\n                        break;\n                    case 21:\n                    case 22:\n                        bold = false;\n                        break;\n                    case 24:\n                        underline = false;\n                        break;\n                    case 27:\n                        inverse = false;\n                        break;\n                    case 30:\n                    case 31:\n                    case 32:\n                    case 33:\n                    case 34:\n                    case 35:\n                    case 36:\n                    case 37:\n                        fg = n - 30;\n                        break;\n                    case 38:\n                        try {\n                            fg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 39:\n                        fg = [];\n                        break;\n                    case 40:\n                    case 41:\n                    case 42:\n                    case 43:\n                    case 44:\n                    case 45:\n                    case 46:\n                    case 47:\n                        bg = n - 40;\n                        break;\n                    case 48:\n                        try {\n                            bg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 49:\n                        bg = [];\n                        break;\n                    case 90:\n                    case 91:\n                    case 92:\n                    case 93:\n                    case 94:\n                    case 95:\n                    case 96:\n                    case 97:\n                        fg = n - 90 + 8;\n                        break;\n                    case 100:\n                    case 101:\n                    case 102:\n                    case 103:\n                    case 104:\n                    case 105:\n                    case 106:\n                    case 107:\n                        bg = n - 100 + 8;\n                        break;\n                    default:\n                    // Unknown codes are ignored\n                }\n            }\n        }\n        return out.join('');\n    }\n    Private.ansiSpan = ansiSpan;\n})(Private || (Private = {}));\n//# sourceMappingURL=renderers.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The rendermime token.\n */\nexport const IRenderMimeRegistry = new Token('@jupyterlab/rendermime:IRenderMimeRegistry', 'A service for the rendermime registry for the application. Use this to create renderers for various mime-types in your extension. Many times it will be easier to create a \"mime renderer extension\" rather than using this service directly.');\n/**\n * The latex typesetter token.\n */\nexport const ILatexTypesetter = new Token('@jupyterlab/rendermime:ILatexTypesetter', 'A service for the LaTeX typesetter for the application. Use this if you want to typeset math in your extension.');\n/**\n * The markdown parser token.\n */\nexport const IMarkdownParser = new Token('@jupyterlab/rendermime:IMarkdownParser', 'A service for rendering markdown syntax as HTML content.');\n//# sourceMappingURL=tokens.js.map","import { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as renderers from './renderers';\n/**\n * A common base class for mime renderers.\n */\nexport class RenderedCommon extends Widget {\n    /**\n     * Construct a new rendered common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        var _a, _b;\n        super();\n        this.mimeType = options.mimeType;\n        this.sanitizer = options.sanitizer;\n        this.resolver = options.resolver;\n        this.linkHandler = options.linkHandler;\n        this.translator = (_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator;\n        this.latexTypesetter = options.latexTypesetter;\n        this.markdownParser = (_b = options.markdownParser) !== null && _b !== void 0 ? _b : null;\n        this.node.dataset['mimeType'] = this.mimeType;\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @param keepExisting - Whether to keep the existing rendering.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     *\n     * #### Notes\n     * By default, if the DOM node for this widget already has content, it\n     * is emptied before rendering. Subclasses that do not want this behavior\n     * (if, for instance, they are using DOM diffing), should override this\n     * method or call `super.renderModel(model, true)`.\n     */\n    async renderModel(model, keepExisting) {\n        // TODO compare model against old model for early bail?\n        // Empty any existing content in the node from previous renders\n        if (!keepExisting) {\n            while (this.node.firstChild) {\n                this.node.removeChild(this.node.firstChild);\n            }\n        }\n        // Toggle the trusted class on the widget.\n        this.toggleClass('jp-mod-trusted', model.trusted);\n        // Render the actual content.\n        await this.render(model);\n        // Handle the fragment identifier if given.\n        const { fragment } = model.metadata;\n        if (fragment) {\n            this.setFragment(fragment);\n        }\n    }\n    /**\n     * Set the URI fragment identifier.\n     *\n     * @param fragment - The URI fragment identifier.\n     */\n    setFragment(fragment) {\n        /* no-op */\n    }\n}\n/**\n * A common base class for HTML mime renderers.\n */\nexport class RenderedHTMLCommon extends RenderedCommon {\n    /**\n     * Construct a new rendered HTML common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedHTMLCommon');\n    }\n    setFragment(fragment) {\n        let el;\n        try {\n            el = this.node.querySelector(fragment.startsWith('#')\n                ? `#${CSS.escape(fragment.slice(1))}`\n                : fragment);\n        }\n        catch (error) {\n            console.warn('Unable to set URI fragment identifier.', error);\n        }\n        if (el) {\n            el.scrollIntoView();\n        }\n    }\n}\n/**\n * A mime renderer for displaying HTML and math.\n */\nexport class RenderedHTML extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered HTML widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        // A promise which resolves when most recent rendering is complete.\n        this._rendered = Promise.resolve();\n        this.addClass('jp-RenderedHTML');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return (this._rendered = renderers.renderHTML({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            translator: this.translator\n        }));\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        this._rendered\n            .then(() => {\n            if (this.latexTypesetter) {\n                this.latexTypesetter.typeset(this.node);\n            }\n        })\n            .catch(console.warn);\n    }\n}\n/**\n * A mime renderer for displaying LaTeX output.\n */\nexport class RenderedLatex extends RenderedCommon {\n    /**\n     * Construct a new rendered LaTeX widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        // A promise which resolves when most recent rendering is complete.\n        this._rendered = Promise.resolve();\n        this.addClass('jp-RenderedLatex');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return (this._rendered = renderers.renderLatex({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter\n        }));\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        this._rendered\n            .then(() => {\n            if (this.latexTypesetter) {\n                this.latexTypesetter.typeset(this.node);\n            }\n        })\n            .catch(console.warn);\n    }\n}\n/**\n * A mime renderer for displaying images.\n */\nexport class RenderedImage extends RenderedCommon {\n    /**\n     * Construct a new rendered image widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedImage');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return renderers.renderImage({\n            host: this.node,\n            mimeType: this.mimeType,\n            source: String(model.data[this.mimeType]),\n            width: metadata && metadata.width,\n            height: metadata && metadata.height,\n            needsBackground: model.metadata['needs_background'],\n            unconfined: metadata && metadata.unconfined\n        });\n    }\n}\n/**\n * A mime renderer for displaying Markdown with embedded latex.\n */\nexport class RenderedMarkdown extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered markdown widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        // A promise which resolves when most recent rendering is complete.\n        this._rendered = Promise.resolve();\n        this.addClass('jp-RenderedMarkdown');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return (this._rendered = renderers.renderMarkdown({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            markdownParser: this.markdownParser,\n            translator: this.translator\n        }));\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    async renderModel(model) {\n        await super.renderModel(model, true);\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        this._rendered\n            .then(() => {\n            if (this.latexTypesetter) {\n                this.latexTypesetter.typeset(this.node);\n            }\n        })\n            .catch(console.warn);\n    }\n}\n/**\n * A widget for displaying SVG content.\n */\nexport class RenderedSVG extends RenderedCommon {\n    /**\n     * Construct a new rendered SVG widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        // A promise which resolves when most recent rendering is complete.\n        this._rendered = Promise.resolve();\n        this.addClass('jp-RenderedSVG');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return (this._rendered = renderers.renderSVG({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            unconfined: metadata && metadata.unconfined,\n            translator: this.translator\n        }));\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        this._rendered\n            .then(() => {\n            if (this.latexTypesetter) {\n                this.latexTypesetter.typeset(this.node);\n            }\n        })\n            .catch(console.warn);\n    }\n}\n/**\n * A widget for displaying plain text and console text.\n */\nexport class RenderedText extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedText');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: String(model.data[this.mimeType]),\n            translator: this.translator\n        });\n    }\n}\nexport class RenderedError extends RenderedCommon {\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedText');\n    }\n    render(model) {\n        return renderers.renderError({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: String(model.data[this.mimeType]),\n            linkHandler: this.linkHandler,\n            resolver: this.resolver,\n            translator: this.translator\n        });\n    }\n}\n/**\n * A widget for displaying JavaScript output.\n */\nexport class RenderedJavaScript extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedJavaScript');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const trans = this.translator.load('jupyterlab');\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: trans.__('JavaScript output is disabled in JupyterLab'),\n            translator: this.translator\n        });\n    }\n}\n//# sourceMappingURL=widgets.js.map","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"'`]/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '`': '&#96;'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\" in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in IE < 9, they can break out of\n * attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the\n * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nmodule.exports = escape;\n"],"names":["Private","AttachmentModel","constructor","options","this","trusted","_changed","Signal","_raw","data","getData","value","_data","ObservableJSON","values","_rawData","key","extract","changed","dispose","clearData","metadata","setData","_updateObservable","emit","toJSON","attachment","observable","oldKeys","keys","newKeys","Object","indexOf","delete","oldValue","get","newValue","set","bundle","map","create","mimeType","convertBundle","item","undefined","JSONExt","isPrimitive","deepCopy","getBundleOptions","htmlRendererFactory","safe","mimeTypes","defaultRank","createRenderer","imageRendererFactory","latexRendererFactory","markdownRendererFactory","svgRendererFactory","errorRendererFactory","textRendererFactory","javaScriptRendererFactory","standardRendererFactories","inline","MATHSPLIT","removeMath","text","math","deTilde","start","end","last","braces","includes","replace","wholematch","character","blocks","split","i","m","length","block","charAt","push","processMath","match","slice","substr","join","replaceMath","n","group","substring","j","preProcess","navigator","appName","MimeModel","_metadata","_callback","callback","noOp","OutputModel","_text","ObservableString","_rawMetadata","type","output_type","executionCount","execution_count","_a","streamText","output","getMetadata","name","traceback","ename","evalue","JSON","parse","stringify","RenderMimeRegistry","_b","_c","_d","_e","_f","_id","_ranks","_types","_factories","translator","nullTranslator","resolver","linkHandler","latexTypesetter","markdownParser","sanitizer","Sanitizer","initialFactories","factory","addFactory","sortedTypes","preferredMimeType","mt","Error","createModel","clone","_g","_h","_j","_k","getFactory","rank","id","removeMimeType","getRank","setRank","UrlResolver","_path","path","_contents","contents","resolveUrl","url","isLocal","cwd","encodeURI","PathExt","dirname","resolve","getDownloadUrl","urlPath","decodeURIComponent","allowRoot","isMalformed","URLExt","driveName","decodeURI","resolvePath","rootDir","PageConfig","getOption","startsWith","relativePath","content","scope","error","console","warn","URIError","sort","a","b","p1","p2","ILinker","renderHTML","host","source","shouldTypeset","trans","load","promise","originalSource","textContent","Promise","sanitize","innerHTML","getElementsByTagName","evalInnerHTMLScriptTags","container","document","createElement","warning","__","runButton","onclick","event","firstChild","removeChild","appendChild","insertBefore","handleDefaults","handleUrls","then","typeset","renderImage","width","height","needsBackground","unconfined","img","src","classList","add","renderLatex","async","renderMarkdown","others","html","parts","r","render","headerAnchors","renderSVG","search","Image","encodeURIComponent","createHeaderId","header","controlCodes","webLinkRegex","RegExp","winPathRegex","isWindows","userAgent","pathLinkRegex","WebLinker","regex","createAnchor","label","anchor","href","rel","target","createTextNode","processPath","lastChars","len","processLabel","PathLinker","locators","dataset","line","parseInt","locator","isNaN","autolink","linkers","checkWeb","checkPaths","nodes","linkify","regexIndex","linker","currentIndex","lastIndex","exec","stringBeforeMatch","index","groups","stringAfterMatches","splitShallowNode","node","at","pre","cloneNode","post","nodeIter","isText","nodeType","Node","TEXT_NODE","renderText","renderTextual","autoLinkOptions","test","ansiSpan","allowedTags","el","nativeSanitize","preTextContent","cacheStoreOptions","cacheStoreKey","ret","cacheStore","autoLinkCache","WeakMap","linkedNodes","getAutolink","call","cache","cachedResult","addedText","cachedNodes","lastCachedNode","endsWith","Text","getApplicableLinkCache","fromCache","newAdditions","lastInCache","firstNewNode","joiningNode","preNodes","inAnchorElement","combinedNodes","iterA","iterB","nA","next","nB","done","A","B","alignedNodes","preNode","linkNode","lastCombined","child","mergeNodes","Array","from","childNodes","renderError","handlePaths","handleAttr","getAttribute","protocol","Date","getTime","setAttribute","err","handleAnchor","hash","handleLink","catch","handlePathAnchor","handlePath","replaceWith","resolution","log","Map","scripts","script","parentNode","attrs","attributes","replaceChild","anchors","HTMLAnchorElement","imgs","alt","promises","querySelectorAll","links","all","headerNames","headerType","headers","ANSI_COLORS","pushColoredChunk","chunk","fg","bg","bold","underline","inverse","out","classes","styles","getExtendedColors","numbers","g","shift","some","c","RangeError","idx","Math","floor","str","ansiRe","items","e","IRenderMimeRegistry","Token","ILatexTypesetter","IMarkdownParser","RenderedCommon","Widget","super","renderModel","model","keepExisting","toggleClass","fragment","setFragment","RenderedHTMLCommon","addClass","querySelector","CSS","escape","scrollIntoView","RenderedHTML","_rendered","String","isAttached","onAfterAttach","msg","RenderedLatex","RenderedImage","RenderedMarkdown","RenderedSVG","RenderedText","RenderedError","RenderedJavaScript","object","reUnescapedHtml","reHasUnescapedHtml","freeGlobal","freeSelf","self","root","Function","escapeHtmlChar","objectToString","prototype","toString","Symbol","symbolProto","symbolToString","module","exports","string","isObjectLike","isSymbol","result","baseToString"],"sourceRoot":""}