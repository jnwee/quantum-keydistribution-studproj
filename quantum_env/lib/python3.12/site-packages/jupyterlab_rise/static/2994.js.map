{"version":3,"file":"2994.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/topbar.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/index.js"],"sourcesContent":["/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\nimport { createToolbarFactory, IToolbarWidgetRegistry, setToolbar } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { Toolbar } from '@jupyterlab/ui-components';\nconst TOPBAR_FACTORY = 'TopBar';\n/**\n * A plugin adding a toolbar to the top area.\n */\nexport const topbar = {\n    id: '@jupyterlab/application-extension:top-bar',\n    description: 'Adds a toolbar to the top area (next to the main menu bar).',\n    autoStart: true,\n    requires: [ISettingRegistry, IToolbarWidgetRegistry],\n    optional: [ITranslator],\n    activate: (app, settingRegistry, toolbarRegistry, translator) => {\n        const toolbar = new Toolbar();\n        toolbar.id = 'jp-top-bar';\n        // Set toolbar\n        setToolbar(toolbar, createToolbarFactory(toolbarRegistry, settingRegistry, TOPBAR_FACTORY, topbar.id, translator !== null && translator !== void 0 ? translator : nullTranslator), toolbar);\n        app.shell.add(toolbar, 'top', { rank: 900 });\n    }\n};\n//# sourceMappingURL=topbar.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module application-extension\n */\nimport { ConnectionLost, IConnectionLost, ILabShell, ILabStatus, ILayoutRestorer, IRouter, ITreePathUpdater, JupyterFrontEnd, JupyterFrontEndContextMenu, JupyterLab, LabShell, LayoutRestorer, Router } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, IWindowResolver, MenuFactory, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IPropertyInspectorProvider, SideBarPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { ISettingRegistry, SettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { buildIcon, jupyterIcon, RankedMenu, Switch } from '@jupyterlab/ui-components';\nimport { find, some } from '@lumino/algorithm';\nimport { JSONExt, PromiseDelegate } from '@lumino/coreutils';\nimport { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport { topbar } from './topbar';\n/**\n * Default context menu item rank\n */\nexport const DEFAULT_CONTEXT_ITEM_RANK = 100;\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activateNextTab = 'application:activate-next-tab';\n    CommandIDs.activatePreviousTab = 'application:activate-previous-tab';\n    CommandIDs.activateNextTabBar = 'application:activate-next-tab-bar';\n    CommandIDs.activatePreviousTabBar = 'application:activate-previous-tab-bar';\n    CommandIDs.close = 'application:close';\n    CommandIDs.closeOtherTabs = 'application:close-other-tabs';\n    CommandIDs.closeRightTabs = 'application:close-right-tabs';\n    CommandIDs.closeAll = 'application:close-all';\n    CommandIDs.setMode = 'application:set-mode';\n    CommandIDs.showPropertyPanel = 'property-inspector:show-panel';\n    CommandIDs.resetLayout = 'application:reset-layout';\n    CommandIDs.toggleHeader = 'application:toggle-header';\n    CommandIDs.toggleMode = 'application:toggle-mode';\n    CommandIDs.toggleLeftArea = 'application:toggle-left-area';\n    CommandIDs.toggleRightArea = 'application:toggle-right-area';\n    CommandIDs.toggleSideTabBar = 'application:toggle-side-tabbar';\n    CommandIDs.toggleSidebarWidget = 'application:toggle-sidebar-widget';\n    CommandIDs.togglePresentationMode = 'application:toggle-presentation-mode';\n    CommandIDs.toggleFullscreenMode = 'application:toggle-fullscreen-mode';\n    CommandIDs.tree = 'router:tree';\n    CommandIDs.switchSidebar = 'sidebar:switch';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to register the commands for the main application.\n */\nconst mainCommands = {\n    id: '@jupyterlab/application-extension:commands',\n    description: 'Adds commands related to the shell.',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ILabShell, ICommandPalette],\n    activate: (app, translator, labShell, palette) => {\n        var _a;\n        const { commands, shell } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Main Area');\n        // Add Command to override the JLab context menu.\n        commands.addCommand(JupyterFrontEndContextMenu.contextMenu, {\n            label: trans.__('Shift+Right Click for Browser Menu'),\n            isEnabled: () => false,\n            execute: () => void 0\n        });\n        // Returns the widget associated with the most recent contextmenu event.\n        const contextMenuWidget = () => {\n            const test = (node) => !!node.dataset.id;\n            const node = app.contextMenuHitTest(test);\n            if (!node) {\n                // Fall back to active widget if path cannot be obtained from event.\n                return shell.currentWidget;\n            }\n            return (find(shell.widgets('main'), widget => widget.id === node.dataset.id) ||\n                shell.currentWidget);\n        };\n        // Closes an array of widgets.\n        const closeWidgets = (widgets) => {\n            widgets.forEach(widget => widget.close());\n        };\n        // Find the tab area for a widget within a specific dock area.\n        const findTab = (area, widget) => {\n            if (area.type === 'tab-area') {\n                return area.widgets.includes(widget) ? area : null;\n            }\n            if (area.type === 'split-area') {\n                for (const child of area.children) {\n                    const found = findTab(child, widget);\n                    if (found) {\n                        return found;\n                    }\n                }\n            }\n            return null;\n        };\n        // Find the tab area for a widget within the main dock area.\n        const tabAreaFor = (widget) => {\n            var _a;\n            const layout = labShell === null || labShell === void 0 ? void 0 : labShell.saveLayout();\n            const mainArea = layout === null || layout === void 0 ? void 0 : layout.mainArea;\n            if (!mainArea || PageConfig.getOption('mode') !== 'multiple-document') {\n                return null;\n            }\n            const area = (_a = mainArea.dock) === null || _a === void 0 ? void 0 : _a.main;\n            return area ? findTab(area, widget) : null;\n        };\n        // Returns an array of all widgets to the right of a widget in a tab area.\n        const widgetsRightOf = (widget) => {\n            const { id } = widget;\n            const tabArea = tabAreaFor(widget);\n            const widgets = tabArea ? tabArea.widgets || [] : [];\n            const index = widgets.findIndex(widget => widget.id === id);\n            if (index < 0) {\n                return [];\n            }\n            return widgets.slice(index + 1);\n        };\n        // Gets and returns the dataId of currently active tab in the specified sidebar (left or right)\n        // or an empty string\n        const activeSidePanelWidget = (side) => {\n            // default active element is luancher (luancher-0)\n            let activeTab;\n            if (side != 'left' && side != 'right') {\n                throw Error(`Unsupported sidebar: ${side}`);\n            }\n            if (side === 'left') {\n                activeTab = document.querySelector('.lm-TabBar-tab.lm-mod-current');\n            }\n            else {\n                const query = document.querySelectorAll('.lm-TabBar-tab.lm-mod-current');\n                activeTab = query[query.length - 1];\n            }\n            const activeTabDataId = activeTab === null || activeTab === void 0 ? void 0 : activeTab.getAttribute('data-id');\n            if (activeTabDataId) {\n                return activeTabDataId === null || activeTabDataId === void 0 ? void 0 : activeTabDataId.toString();\n            }\n            else {\n                return '';\n            }\n        };\n        // Sets tab focus on the element\n        function setTabFocus(focusElement) {\n            if (focusElement) {\n                focusElement.focus();\n            }\n        }\n        commands.addCommand(CommandIDs.close, {\n            label: () => trans.__('Close Tab'),\n            isEnabled: () => {\n                const widget = contextMenuWidget();\n                return !!widget && widget.title.closable;\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (widget) {\n                    widget.close();\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.closeOtherTabs, {\n            label: () => trans.__('Close All Other Tabs'),\n            isEnabled: () => {\n                // Ensure there are at least two widgets.\n                return some(shell.widgets('main'), (_, i) => i === 1);\n            },\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                const { id } = widget;\n                for (const widget of shell.widgets('main')) {\n                    if (widget.id !== id) {\n                        widget.close();\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.closeRightTabs, {\n            label: () => trans.__('Close Tabs to Right'),\n            isEnabled: () => !!contextMenuWidget() &&\n                widgetsRightOf(contextMenuWidget()).length > 0,\n            execute: () => {\n                const widget = contextMenuWidget();\n                if (!widget) {\n                    return;\n                }\n                closeWidgets(widgetsRightOf(widget));\n            }\n        });\n        (_a = shell.currentChanged) === null || _a === void 0 ? void 0 : _a.connect(() => {\n            [\n                CommandIDs.close,\n                CommandIDs.closeOtherTabs,\n                CommandIDs.closeRightTabs\n            ].forEach(cmd => commands.notifyCommandChanged(cmd));\n        });\n        if (labShell) {\n            commands.addCommand(CommandIDs.activateNextTab, {\n                label: trans.__('Activate Next Tab'),\n                execute: () => {\n                    labShell.activateNextTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTab, {\n                label: trans.__('Activate Previous Tab'),\n                execute: () => {\n                    labShell.activatePreviousTab();\n                }\n            });\n            commands.addCommand(CommandIDs.activateNextTabBar, {\n                label: trans.__('Activate Next Tab Bar'),\n                execute: () => {\n                    labShell.activateNextTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.activatePreviousTabBar, {\n                label: trans.__('Activate Previous Tab Bar'),\n                execute: () => {\n                    labShell.activatePreviousTabBar();\n                }\n            });\n            commands.addCommand(CommandIDs.closeAll, {\n                label: trans.__('Close All Tabs'),\n                execute: () => {\n                    labShell.closeAll();\n                }\n            });\n            commands.addCommand(CommandIDs.toggleHeader, {\n                label: trans.__('Show Header'),\n                execute: () => {\n                    if (labShell.mode === 'single-document') {\n                        labShell.toggleTopInSimpleModeVisibility();\n                    }\n                },\n                isToggled: () => labShell.isTopInSimpleModeVisible(),\n                isVisible: () => labShell.mode === 'single-document'\n            });\n            commands.addCommand(CommandIDs.toggleLeftArea, {\n                label: trans.__('Show Left Sidebar'),\n                execute: () => {\n                    if (labShell.leftCollapsed) {\n                        labShell.expandLeft();\n                    }\n                    else {\n                        labShell.collapseLeft();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.leftCollapsed,\n                isEnabled: () => !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.toggleRightArea, {\n                label: trans.__('Show Right Sidebar'),\n                execute: () => {\n                    if (labShell.rightCollapsed) {\n                        labShell.expandRight();\n                    }\n                    else {\n                        labShell.collapseRight();\n                        if (labShell.currentWidget) {\n                            labShell.activateById(labShell.currentWidget.id);\n                        }\n                    }\n                },\n                isToggled: () => !labShell.rightCollapsed,\n                isEnabled: () => !labShell.isEmpty('right')\n            });\n            commands.addCommand(CommandIDs.toggleSidebarWidget, {\n                label: args => args === undefined ||\n                    args.side === undefined ||\n                    args.index === undefined\n                    ? trans.__('Toggle Sidebar Element')\n                    : args.side === 'right'\n                        ? trans.__('Toggle Element %1 in Right Sidebar', parseInt(args.index, 10) + 1)\n                        : trans.__('Toggle Element %1 in Left Sidebar', parseInt(args.index, 10) + 1),\n                execute: args => {\n                    const index = parseInt(args.index, 10);\n                    if (args.side != 'left' && args.side != 'right') {\n                        throw Error(`Unsupported sidebar: ${args.side}`);\n                    }\n                    const widgets = Array.from(labShell.widgets(args.side));\n                    if (index >= widgets.length) {\n                        return;\n                    }\n                    const widgetId = widgets[index].id;\n                    const focusElement = document.querySelector(\"[data-id='\" + widgetId + \"']\");\n                    if (activeSidePanelWidget(args.side) === widgetId) {\n                        if (args.side == 'left') {\n                            labShell.collapseLeft();\n                            setTabFocus(focusElement);\n                        }\n                        if (args.side == 'right') {\n                            labShell.collapseRight();\n                            setTabFocus(focusElement);\n                        }\n                    }\n                    else {\n                        labShell.activateById(widgetId);\n                        setTabFocus(focusElement);\n                    }\n                }\n            });\n            commands.addCommand(CommandIDs.toggleSideTabBar, {\n                label: args => args.side === 'right'\n                    ? trans.__('Show Right Activity Bar')\n                    : trans.__('Show Left Activity Bar'),\n                execute: args => {\n                    if (args.side === 'right') {\n                        labShell.toggleSideTabBarVisibility('right');\n                    }\n                    else {\n                        labShell.toggleSideTabBarVisibility('left');\n                    }\n                },\n                isToggled: args => args.side === 'right'\n                    ? labShell.isSideTabBarVisible('right')\n                    : labShell.isSideTabBarVisible('left'),\n                isEnabled: args => args.side === 'right'\n                    ? !labShell.isEmpty('right')\n                    : !labShell.isEmpty('left')\n            });\n            commands.addCommand(CommandIDs.togglePresentationMode, {\n                label: () => trans.__('Presentation Mode'),\n                execute: () => {\n                    labShell.presentationMode = !labShell.presentationMode;\n                },\n                isToggled: () => labShell.presentationMode,\n                isVisible: () => true\n            });\n            commands.addCommand(CommandIDs.toggleFullscreenMode, {\n                label: trans.__('Fullscreen Mode'),\n                execute: () => {\n                    if (document.fullscreenElement === null ||\n                        document.fullscreenElement === undefined) {\n                        document.documentElement.requestFullscreen().catch(reason => {\n                            console.error('Failed to enter fullscreen mode.', reason);\n                        });\n                    }\n                    else if (document.fullscreenElement !== null) {\n                        document.exitFullscreen().catch(reason => {\n                            console.error('Failed to exit fullscreen mode.', reason);\n                        });\n                    }\n                },\n                isToggled: () => document.fullscreenElement !== null\n            });\n            commands.addCommand(CommandIDs.setMode, {\n                label: args => args['mode']\n                    ? trans.__('Set %1 mode.', args['mode'])\n                    : trans.__('Set the layout `mode`.'),\n                caption: trans.__('The layout `mode` can be \"single-document\" or \"multiple-document\".'),\n                isVisible: args => {\n                    const mode = args['mode'];\n                    return mode === 'single-document' || mode === 'multiple-document';\n                },\n                execute: args => {\n                    const mode = args['mode'];\n                    if (mode === 'single-document' || mode === 'multiple-document') {\n                        labShell.mode = mode;\n                        return;\n                    }\n                    throw new Error(`Unsupported application shell mode: ${mode}`);\n                }\n            });\n            commands.addCommand(CommandIDs.toggleMode, {\n                label: trans.__('Simple Interface'),\n                isToggled: () => labShell.mode === 'single-document',\n                execute: () => {\n                    const args = labShell.mode === 'multiple-document'\n                        ? { mode: 'single-document' }\n                        : { mode: 'multiple-document' };\n                    return commands.execute(CommandIDs.setMode, args);\n                }\n            });\n            commands.addCommand(CommandIDs.resetLayout, {\n                label: trans.__('Reset Default Layout'),\n                execute: () => {\n                    // Turn off presentation mode\n                    if (labShell.presentationMode) {\n                        commands\n                            .execute(CommandIDs.togglePresentationMode)\n                            .catch(reason => {\n                            console.error('Failed to undo presentation mode.', reason);\n                        });\n                    }\n                    // Turn off fullscreen mode\n                    if (document.fullscreenElement !== null ||\n                        document.fullscreenElement !== undefined) {\n                        commands.execute(CommandIDs.toggleFullscreenMode).catch(reason => {\n                            console.error('Failed to exit fullscreen mode.', reason);\n                        });\n                    }\n                    // Display top header\n                    if (labShell.mode === 'single-document' &&\n                        !labShell.isTopInSimpleModeVisible()) {\n                        commands.execute(CommandIDs.toggleHeader).catch(reason => {\n                            console.error('Failed to display title header.', reason);\n                        });\n                    }\n                    // Display side tabbar\n                    ['left', 'right'].forEach(side => {\n                        if (!labShell.isSideTabBarVisible(side) &&\n                            !labShell.isEmpty(side)) {\n                            commands\n                                .execute(CommandIDs.toggleSideTabBar, { side })\n                                .catch(reason => {\n                                console.error(`Failed to show ${side} activity bar.`, reason);\n                            });\n                        }\n                    });\n                    // Some actions are also trigger indirectly\n                    // - by listening to this command execution.\n                }\n            });\n        }\n        if (palette) {\n            [\n                CommandIDs.activateNextTab,\n                CommandIDs.activatePreviousTab,\n                CommandIDs.activateNextTabBar,\n                CommandIDs.activatePreviousTabBar,\n                CommandIDs.close,\n                CommandIDs.closeAll,\n                CommandIDs.closeOtherTabs,\n                CommandIDs.closeRightTabs,\n                CommandIDs.toggleHeader,\n                CommandIDs.toggleLeftArea,\n                CommandIDs.toggleRightArea,\n                CommandIDs.togglePresentationMode,\n                CommandIDs.toggleFullscreenMode,\n                CommandIDs.toggleMode,\n                CommandIDs.resetLayout\n            ].forEach(command => palette.addItem({ command, category }));\n            ['right', 'left'].forEach(side => {\n                palette.addItem({\n                    command: CommandIDs.toggleSideTabBar,\n                    category,\n                    args: { side }\n                });\n            });\n        }\n    }\n};\n/**\n * The main extension.\n */\nconst main = {\n    id: '@jupyterlab/application-extension:main',\n    description: 'Initializes the application and provides the URL tree path handler.',\n    requires: [\n        IRouter,\n        IWindowResolver,\n        ITranslator,\n        JupyterFrontEnd.ITreeResolver\n    ],\n    optional: [IConnectionLost],\n    provides: ITreePathUpdater,\n    activate: (app, router, resolver, translator, treeResolver, connectionLost) => {\n        const trans = translator.load('jupyterlab');\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${main.id} must be activated in JupyterLab.`);\n        }\n        // These two internal state variables are used to manage the two source\n        // of the tree part of the URL being updated: 1) path of the active document,\n        // 2) path of the default browser if the active main area widget isn't a document.\n        let _docTreePath = '';\n        let _defaultBrowserTreePath = '';\n        function updateTreePath(treePath) {\n            // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n            void treeResolver.paths.then(() => {\n                _defaultBrowserTreePath = treePath;\n                if (!_docTreePath) {\n                    const url = PageConfig.getUrl({ treePath });\n                    const path = URLExt.parse(url).pathname;\n                    router.navigate(path, { skipRouting: true });\n                    // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                    PageConfig.setOption('treePath', treePath);\n                }\n            });\n        }\n        // Requiring the window resolver guarantees that the application extension\n        // only loads if there is a viable window name. Otherwise, the application\n        // will short-circuit and ask the user to navigate away.\n        const workspace = resolver.name;\n        console.debug(`Starting application in workspace: \"${workspace}\"`);\n        // If there were errors registering plugins, tell the user.\n        if (app.registerPluginErrors.length !== 0) {\n            const body = (React.createElement(\"pre\", null, app.registerPluginErrors.map(e => e.message).join('\\n')));\n            void showErrorMessage(trans.__('Error Registering Plugins'), {\n                message: body\n            });\n        }\n        // Watch the mode and update the page URL to /lab or /doc to reflect the\n        // change.\n        app.shell.modeChanged.connect((_, args) => {\n            const url = PageConfig.getUrl({ mode: args });\n            const path = URLExt.parse(url).pathname;\n            router.navigate(path, { skipRouting: true });\n            // Persist this mode change to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('mode', args);\n        });\n        // Wait for tree resolver to finish before updating the path because it use the PageConfig['treePath']\n        void treeResolver.paths.then(() => {\n            // Watch the path of the current widget in the main area and update the page\n            // URL to reflect the change.\n            app.shell.currentPathChanged.connect((_, args) => {\n                const maybeTreePath = args.newValue;\n                const treePath = maybeTreePath || _defaultBrowserTreePath;\n                const url = PageConfig.getUrl({ treePath: treePath });\n                const path = URLExt.parse(url).pathname;\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n                _docTreePath = maybeTreePath;\n            });\n        });\n        // If the connection to the server is lost, handle it with the\n        // connection lost handler.\n        connectionLost = connectionLost || ConnectionLost;\n        app.serviceManager.connectionFailure.connect((manager, error) => connectionLost(manager, error, translator));\n        const builder = app.serviceManager.builder;\n        const build = () => {\n            return builder\n                .build()\n                .then(() => {\n                return showDialog({\n                    title: trans.__('Build Complete'),\n                    body: (React.createElement(\"div\", null,\n                        trans.__('Build successfully completed, reload page?'),\n                        React.createElement(\"br\", null),\n                        trans.__('You will lose any unsaved changes.'))),\n                    buttons: [\n                        Dialog.cancelButton({\n                            label: trans.__('Reload Without Saving'),\n                            actions: ['reload']\n                        }),\n                        Dialog.okButton({ label: trans.__('Save and Reload') })\n                    ],\n                    hasClose: true\n                });\n            })\n                .then(({ button: { accept, actions } }) => {\n                if (accept) {\n                    void app.commands\n                        .execute('docmanager:save')\n                        .then(() => {\n                        router.reload();\n                    })\n                        .catch(err => {\n                        void showErrorMessage(trans.__('Save Failed'), {\n                            message: React.createElement(\"pre\", null, err.message)\n                        });\n                    });\n                }\n                else if (actions.includes('reload')) {\n                    router.reload();\n                }\n            })\n                .catch(err => {\n                void showErrorMessage(trans.__('Build Failed'), {\n                    message: React.createElement(\"pre\", null, err.message)\n                });\n            });\n        };\n        if (builder.isAvailable && builder.shouldCheck) {\n            void builder.getStatus().then(response => {\n                if (response.status === 'building') {\n                    return build();\n                }\n                if (response.status !== 'needed') {\n                    return;\n                }\n                const body = (React.createElement(\"div\", null,\n                    trans.__('JupyterLab build is suggested:'),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"pre\", null, response.message)));\n                void showDialog({\n                    title: trans.__('Build Recommended'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Build') })\n                    ]\n                }).then(result => (result.button.accept ? build() : undefined));\n            });\n        }\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * Plugin to build the context menu from the settings.\n */\nconst contextMenuPlugin = {\n    id: '@jupyterlab/application-extension:context-menu',\n    description: 'Populates the context menu.',\n    autoStart: true,\n    requires: [ISettingRegistry, ITranslator],\n    activate: (app, settingRegistry, translator) => {\n        const trans = translator.load('jupyterlab');\n        function createMenu(options) {\n            const menu = new RankedMenu({ ...options, commands: app.commands });\n            if (options.label) {\n                menu.title.label = trans.__(options.label);\n            }\n            return menu;\n        }\n        // Load the context menu lately so plugins are loaded.\n        app.started\n            .then(() => {\n            return Private.loadSettingsContextMenu(app.contextMenu, settingRegistry, createMenu, translator);\n        })\n            .catch(reason => {\n            console.error('Failed to load context menu items from settings registry.', reason);\n        });\n    }\n};\n/**\n * Check if the application is dirty before closing the browser tab.\n */\nconst dirty = {\n    id: '@jupyterlab/application-extension:dirty',\n    description: 'Adds safeguard dialog when closing the browser tab with unsaved modifications.',\n    autoStart: true,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${dirty.id} must be activated in JupyterLab.`);\n        }\n        const trans = translator.load('jupyterlab');\n        const message = trans.__('Are you sure you want to exit JupyterLab?\\n\\nAny unsaved changes will be lost.');\n        // The spec for the `beforeunload` event is implemented differently by\n        // the different browser vendors. Consequently, the `event.returnValue`\n        // attribute needs to set in addition to a return value being returned.\n        // For more information, see:\n        // https://developer.mozilla.org/en/docs/Web/Events/beforeunload\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n    }\n};\n/**\n * The default layout restorer provider.\n */\nconst layout = {\n    id: '@jupyterlab/application-extension:layout',\n    description: 'Provides the shell layout restorer.',\n    requires: [IStateDB, ILabShell, ISettingRegistry],\n    optional: [ITranslator],\n    activate: (app, state, labShell, settingRegistry, translator) => {\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');\n        const first = app.started;\n        const registry = app.commands;\n        const mode = PageConfig.getOption('mode');\n        const restorer = new LayoutRestorer({\n            connector: state,\n            first,\n            registry,\n            mode\n        });\n        settingRegistry\n            .load(shell.id)\n            .then(settings => {\n            var _a, _b;\n            // Add a layer of customization to support app shell mode\n            const customizedLayout = settings.composite['layout'];\n            // Restore the layout.\n            void labShell\n                .restoreLayout(mode, restorer, {\n                'multiple-document': (_a = customizedLayout.multiple) !== null && _a !== void 0 ? _a : {},\n                'single-document': (_b = customizedLayout.single) !== null && _b !== void 0 ? _b : {}\n            })\n                .then(() => {\n                labShell.layoutModified.connect(() => {\n                    void restorer.save(labShell.saveLayout());\n                });\n                settings.changed.connect(onSettingsChanged);\n                Private.activateSidebarSwitcher(app, labShell, settings, trans);\n            });\n        })\n            .catch(reason => {\n            console.error('Fail to load settings for the layout restorer.');\n            console.error(reason);\n        });\n        return restorer;\n        async function onSettingsChanged(settings) {\n            if (!JSONExt.deepEqual(settings.composite['layout'], {\n                single: labShell.userLayout['single-document'],\n                multiple: labShell.userLayout['multiple-document']\n            })) {\n                const result = await showDialog({\n                    title: trans.__('Information'),\n                    body: trans.__('User layout customization has changed. You may need to reload JupyterLab to see the changes.'),\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Reload') })\n                    ]\n                });\n                if (result.button.accept) {\n                    location.reload();\n                }\n            }\n        }\n    },\n    autoStart: true,\n    provides: ILayoutRestorer\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab/application-extension:router',\n    description: 'Provides the URL router',\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n    autoStart: true,\n    provides: IRouter\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyterlab/application-extension:tree-resolver',\n    description: 'Provides the tree route resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(lab|doc)(/workspaces/[a-zA-Z0-9-_]+)?(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.tree, {\n            execute: async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }\n        }));\n        set.add(router.register({ command: CommandIDs.tree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\n/**\n * The default URL not found extension.\n */\nconst notfound = {\n    id: '@jupyterlab/application-extension:notfound',\n    description: 'Defines the behavior for not found URL (aka route).',\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    activate: (_, paths, router, translator) => {\n        const trans = translator.load('jupyterlab');\n        const bad = paths.urls.notFound;\n        if (!bad) {\n            return;\n        }\n        const base = router.base;\n        const message = trans.__('The path: %1 was not found. JupyterLab redirected to: %2', bad, base);\n        // Change the URL back to the base application URL.\n        router.navigate('');\n        void showErrorMessage(trans.__('Path Not Found'), { message });\n    },\n    autoStart: true\n};\n/**\n * Change the favicon changing based on the busy status;\n */\nconst busy = {\n    id: '@jupyterlab/application-extension:faviconbusy',\n    description: 'Handles the favicon depending on the application status.',\n    requires: [ILabStatus],\n    activate: async (_, status) => {\n        status.busySignal.connect((_, isBusy) => {\n            const favicon = document.querySelector(`link[rel=\"icon\"]${isBusy ? '.idle.favicon' : '.busy.favicon'}`);\n            if (!favicon) {\n                return;\n            }\n            const newFavicon = document.querySelector(`link${isBusy ? '.busy.favicon' : '.idle.favicon'}`);\n            if (!newFavicon) {\n                return;\n            }\n            // If we have the two icons with the special classes, then toggle them.\n            if (favicon !== newFavicon) {\n                favicon.rel = '';\n                newFavicon.rel = 'icon';\n                // Firefox doesn't seem to recognize just changing rel, so we also\n                // reinsert the link into the DOM.\n                newFavicon.parentNode.replaceChild(newFavicon, newFavicon);\n            }\n        });\n    },\n    autoStart: true\n};\n/**\n * The default JupyterLab application shell.\n */\nconst shell = {\n    id: '@jupyterlab/application-extension:shell',\n    description: 'Provides the JupyterLab shell. It has an extended API compared to `app.shell`.',\n    optional: [ISettingRegistry],\n    activate: (app, settingRegistry) => {\n        if (!(app.shell instanceof LabShell)) {\n            throw new Error(`${shell.id} did not find a LabShell instance.`);\n        }\n        if (settingRegistry) {\n            void settingRegistry.load(shell.id).then(settings => {\n                app.shell.updateConfig(settings.composite);\n                settings.changed.connect(() => {\n                    app.shell.updateConfig(settings.composite);\n                });\n            });\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: ILabShell\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlab/application-extension:status',\n    description: 'Provides the application status.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${status.id} must be activated in JupyterLab.`);\n        }\n        return app.status;\n    },\n    autoStart: true,\n    provides: ILabStatus\n};\n/**\n * The default JupyterLab application-specific information provider.\n *\n * #### Notes\n * This plugin should only be used by plugins that specifically need to access\n * JupyterLab application information, e.g., listing extensions that have been\n * loaded or deferred within JupyterLab.\n */\nconst info = {\n    id: '@jupyterlab/application-extension:info',\n    description: 'Provides the application information.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${info.id} must be activated in JupyterLab.`);\n        }\n        return app.info;\n    },\n    autoStart: true,\n    provides: JupyterLab.IInfo\n};\n/**\n * The default JupyterLab paths dictionary provider.\n */\nconst paths = {\n    id: '@jupyterlab/application-extension:paths',\n    description: 'Provides the application paths.',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default property inspector provider.\n */\nconst propertyInspector = {\n    id: '@jupyterlab/application-extension:property-inspector',\n    description: 'Provides the property inspector.',\n    autoStart: true,\n    requires: [ILabShell, ITranslator],\n    optional: [ILayoutRestorer],\n    provides: IPropertyInspectorProvider,\n    activate: (app, labshell, translator, restorer) => {\n        const trans = translator.load('jupyterlab');\n        const widget = new SideBarPropertyInspectorProvider({\n            shell: labshell,\n            translator\n        });\n        widget.title.icon = buildIcon;\n        widget.title.caption = trans.__('Property Inspector');\n        widget.id = 'jp-property-inspector';\n        labshell.add(widget, 'right', { rank: 100, type: 'Property Inspector' });\n        app.commands.addCommand(CommandIDs.showPropertyPanel, {\n            label: trans.__('Property Inspector'),\n            execute: () => {\n                labshell.activateById(widget.id);\n            }\n        });\n        if (restorer) {\n            restorer.add(widget, 'jp-property-inspector');\n        }\n        return widget;\n    }\n};\nconst jupyterLogo = {\n    id: '@jupyterlab/application-extension:logo',\n    description: 'Sets the application logo.',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, shell) => {\n        const logo = new Widget();\n        jupyterIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * The simple interface mode switch in the status bar.\n */\nconst modeSwitchPlugin = {\n    id: '@jupyterlab/application-extension:mode-switch',\n    description: 'Adds the interface mode switch',\n    requires: [ILabShell, ITranslator],\n    optional: [IStatusBar, ISettingRegistry],\n    activate: (app, labShell, translator, statusBar, settingRegistry) => {\n        if (statusBar === null) {\n            // Bail early\n            return;\n        }\n        const trans = translator.load('jupyterlab');\n        const modeSwitch = new Switch();\n        modeSwitch.id = 'jp-single-document-mode';\n        modeSwitch.valueChanged.connect((_, args) => {\n            labShell.mode = args.newValue ? 'single-document' : 'multiple-document';\n        });\n        labShell.modeChanged.connect((_, mode) => {\n            modeSwitch.value = mode === 'single-document';\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(shell.id);\n            const updateSettings = (settings) => {\n                const startMode = settings.get('startMode').composite;\n                if (startMode) {\n                    labShell.mode =\n                        startMode === 'single' ? 'single-document' : 'multiple-document';\n                }\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n        // Show the current file browser shortcut in its title.\n        const updateModeSwitchTitle = () => {\n            const binding = app.commands.keyBindings.find(b => b.command === 'application:toggle-mode');\n            if (binding) {\n                const ks = binding.keys.map(CommandRegistry.formatKeystroke).join(', ');\n                modeSwitch.caption = trans.__('Simple Interface (%1)', ks);\n            }\n            else {\n                modeSwitch.caption = trans.__('Simple Interface');\n            }\n        };\n        updateModeSwitchTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateModeSwitchTitle();\n        });\n        modeSwitch.label = trans.__('Simple');\n        statusBar.registerStatusItem(modeSwitchPlugin.id, {\n            priority: 1,\n            item: modeSwitch,\n            align: 'left',\n            rank: -1\n        });\n    },\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    contextMenuPlugin,\n    dirty,\n    main,\n    mainCommands,\n    layout,\n    router,\n    tree,\n    notfound,\n    busy,\n    shell,\n    status,\n    info,\n    modeSwitchPlugin,\n    paths,\n    propertyInspector,\n    jupyterLogo,\n    topbar\n];\nexport default plugins;\nvar Private;\n(function (Private) {\n    async function displayInformation(trans) {\n        const result = await showDialog({\n            title: trans.__('Information'),\n            body: trans.__('Context menu customization has changed. You will need to reload JupyterLab to see the changes.'),\n            buttons: [\n                Dialog.cancelButton(),\n                Dialog.okButton({ label: trans.__('Reload') })\n            ]\n        });\n        if (result.button.accept) {\n            location.reload();\n        }\n    }\n    async function loadSettingsContextMenu(contextMenu, registry, menuFactory, translator) {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const pluginId = contextMenuPlugin.id;\n        let canonical = null;\n        let loaded = {};\n        /**\n         * Populate the plugin's schema defaults.\n         *\n         * We keep track of disabled entries in case the plugin is loaded\n         * after the menu initialization.\n         */\n        function populate(schema) {\n            var _a, _b;\n            loaded = {};\n            const pluginDefaults = Object.keys(registry.plugins)\n                .map(plugin => {\n                var _a, _b;\n                const items = (_b = (_a = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : [];\n                loaded[plugin] = items;\n                return items;\n            })\n                .concat([(_b = (_a = schema['jupyter.lab.menus']) === null || _a === void 0 ? void 0 : _a.context) !== null && _b !== void 0 ? _b : []])\n                .reduceRight((acc, val) => SettingRegistry.reconcileItems(acc, val, true), []);\n            // Apply default value as last step to take into account overrides.json\n            // The standard default being [] as the plugin must use `jupyter.lab.menus.context`\n            // to define their default value.\n            schema.properties.contextMenu.default = SettingRegistry.reconcileItems(pluginDefaults, schema.properties.contextMenu.default, true)\n                // flatten one level\n                .sort((a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.rank) !== null && _b !== void 0 ? _b : Infinity); });\n        }\n        // Transform the plugin object to return different schema than the default.\n        registry.transform(pluginId, {\n            compose: plugin => {\n                var _a, _b, _c, _d;\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                const defaults = (_c = (_b = (_a = canonical.properties) === null || _a === void 0 ? void 0 : _a.contextMenu) === null || _b === void 0 ? void 0 : _b.default) !== null && _c !== void 0 ? _c : [];\n                const user = {\n                    ...plugin.data.user,\n                    contextMenu: (_d = plugin.data.user.contextMenu) !== null && _d !== void 0 ? _d : []\n                };\n                const composite = {\n                    ...plugin.data.composite,\n                    contextMenu: SettingRegistry.reconcileItems(defaults, user.contextMenu, false)\n                };\n                plugin.data = { composite, user };\n                return plugin;\n            },\n            fetch: plugin => {\n                // Only override the canonical schema the first time.\n                if (!canonical) {\n                    canonical = JSONExt.deepCopy(plugin.schema);\n                    populate(canonical);\n                }\n                return {\n                    data: plugin.data,\n                    id: plugin.id,\n                    raw: plugin.raw,\n                    schema: canonical,\n                    version: plugin.version\n                };\n            }\n        });\n        // Repopulate the canonical variable after the setting registry has\n        // preloaded all initial plugins.\n        const settings = await registry.load(pluginId);\n        const contextItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n        // Create menu item for non-disabled element\n        SettingRegistry.filterDisabledItems(contextItems).forEach(item => {\n            MenuFactory.addContextItem({\n                // We have to set the default rank because Lumino is sorting the visible items\n                rank: DEFAULT_CONTEXT_ITEM_RANK,\n                ...item\n            }, contextMenu, menuFactory);\n        });\n        settings.changed.connect(() => {\n            var _a;\n            // As extension may change the context menu through API,\n            // prompt the user to reload if the menu has been updated.\n            const newItems = (_a = settings.composite.contextMenu) !== null && _a !== void 0 ? _a : [];\n            if (!JSONExt.deepEqual(contextItems, newItems)) {\n                void displayInformation(trans);\n            }\n        });\n        registry.pluginChanged.connect(async (sender, plugin) => {\n            var _a, _b, _c, _d;\n            if (plugin !== pluginId) {\n                // If the plugin changed its menu.\n                const oldItems = (_a = loaded[plugin]) !== null && _a !== void 0 ? _a : [];\n                const newItems = (_c = (_b = registry.plugins[plugin].schema['jupyter.lab.menus']) === null || _b === void 0 ? void 0 : _b.context) !== null && _c !== void 0 ? _c : [];\n                if (!JSONExt.deepEqual(oldItems, newItems)) {\n                    if (loaded[plugin]) {\n                        // The plugin has changed, request the user to reload the UI\n                        await displayInformation(trans);\n                    }\n                    else {\n                        // The plugin was not yet loaded when the menu was built => update the menu\n                        loaded[plugin] = JSONExt.deepCopy(newItems);\n                        // Merge potential disabled state\n                        const toAdd = (_d = SettingRegistry.reconcileItems(newItems, contextItems, false, false)) !== null && _d !== void 0 ? _d : [];\n                        SettingRegistry.filterDisabledItems(toAdd).forEach(item => {\n                            MenuFactory.addContextItem({\n                                // We have to set the default rank because Lumino is sorting the visible items\n                                rank: DEFAULT_CONTEXT_ITEM_RANK,\n                                ...item\n                            }, contextMenu, menuFactory);\n                        });\n                    }\n                }\n            }\n        });\n    }\n    Private.loadSettingsContextMenu = loadSettingsContextMenu;\n    function activateSidebarSwitcher(app, labShell, settings, trans) {\n        // Add a command to switch a side panels's side\n        app.commands.addCommand(CommandIDs.switchSidebar, {\n            label: trans.__('Switch Sidebar Side'),\n            execute: () => {\n                // First, try to find the correct panel based on the application\n                // context menu click. Bail if we don't find a sidebar for the widget.\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                if (!contextNode) {\n                    return;\n                }\n                const id = contextNode.dataset['id'];\n                const leftPanel = document.getElementById('jp-left-stack');\n                const node = document.getElementById(id);\n                let newLayout = null;\n                // Move the panel to the other side.\n                if (leftPanel && node && leftPanel.contains(node)) {\n                    const widget = find(labShell.widgets('left'), w => w.id === id);\n                    if (widget) {\n                        newLayout = labShell.move(widget, 'right');\n                        labShell.activateById(widget.id);\n                    }\n                }\n                else {\n                    const widget = find(labShell.widgets('right'), w => w.id === id);\n                    if (widget) {\n                        newLayout = labShell.move(widget, 'left');\n                        labShell.activateById(widget.id);\n                    }\n                }\n                if (newLayout) {\n                    settings\n                        .set('layout', {\n                        single: newLayout['single-document'],\n                        multiple: newLayout['multiple-document']\n                    })\n                        .catch(reason => {\n                        console.error('Failed to save user layout customization.', reason);\n                    });\n                }\n            }\n        });\n        app.commands.commandExecuted.connect((registry, executed) => {\n            if (executed.id === CommandIDs.resetLayout) {\n                settings.remove('layout').catch(reason => {\n                    console.error('Failed to remove user layout customization.', reason);\n                });\n            }\n        });\n    }\n    Private.activateSidebarSwitcher = activateSidebarSwitcher;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["topbar","id","description","autoStart","requires","ISettingRegistry","IToolbarWidgetRegistry","optional","ITranslator","activate","app","settingRegistry","toolbarRegistry","translator","toolbar","Toolbar","setToolbar","createToolbarFactory","nullTranslator","shell","add","rank","DEFAULT_CONTEXT_ITEM_RANK","CommandIDs","activateNextTab","activatePreviousTab","activateNextTabBar","activatePreviousTabBar","close","closeOtherTabs","closeRightTabs","closeAll","setMode","showPropertyPanel","resetLayout","toggleHeader","toggleMode","toggleLeftArea","toggleRightArea","toggleSideTabBar","toggleSidebarWidget","togglePresentationMode","toggleFullscreenMode","tree","switchSidebar","mainCommands","ILabShell","ICommandPalette","labShell","palette","_a","commands","trans","load","category","__","addCommand","JupyterFrontEndContextMenu","contextMenu","label","isEnabled","execute","contextMenuWidget","node","contextMenuHitTest","dataset","find","widgets","widget","currentWidget","findTab","area","type","includes","child","children","found","widgetsRightOf","tabArea","layout","saveLayout","mainArea","PageConfig","getOption","dock","main","tabAreaFor","index","findIndex","slice","setTabFocus","focusElement","focus","title","closable","some","_","i","length","forEach","currentChanged","connect","cmd","notifyCommandChanged","mode","toggleTopInSimpleModeVisibility","isToggled","isTopInSimpleModeVisible","isVisible","leftCollapsed","expandLeft","collapseLeft","activateById","isEmpty","rightCollapsed","expandRight","collapseRight","args","undefined","side","parseInt","Error","Array","from","widgetId","document","querySelector","activeTab","query","querySelectorAll","activeTabDataId","getAttribute","toString","activeSidePanelWidget","toggleSideTabBarVisibility","isSideTabBarVisible","presentationMode","fullscreenElement","documentElement","requestFullscreen","catch","reason","console","error","exitFullscreen","caption","command","addItem","IRouter","IWindowResolver","JupyterFrontEnd","ITreeResolver","IConnectionLost","provides","ITreePathUpdater","router","resolver","treeResolver","connectionLost","JupyterLab","_docTreePath","_defaultBrowserTreePath","workspace","name","debug","registerPluginErrors","body","map","e","message","join","showErrorMessage","modeChanged","url","getUrl","path","URLExt","parse","pathname","navigate","skipRouting","setOption","paths","then","currentPathChanged","maybeTreePath","newValue","treePath","ConnectionLost","serviceManager","connectionFailure","manager","builder","build","showDialog","buttons","Dialog","cancelButton","actions","okButton","hasClose","button","accept","reload","err","isAvailable","shouldCheck","getStatus","response","status","result","contextMenuPlugin","createMenu","options","menu","RankedMenu","started","Private","loadSettingsContextMenu","dirty","window","addEventListener","event","isDirty","returnValue","IStateDB","state","first","registry","restorer","LayoutRestorer","connector","settings","_b","customizedLayout","composite","restoreLayout","multiple","single","layoutModified","save","changed","onSettingsChanged","activateSidebarSwitcher","async","JSONExt","deepEqual","userLayout","location","ILayoutRestorer","IPaths","base","urls","Router","route","set","DisposableSet","delegate","PromiseDelegate","treePattern","RegExp","isDisposed","queryStringToObject","search","browser","dispose","resolve","file","register","pattern","listener","routed","DisposableDelegate","disconnect","promise","notfound","bad","notFound","busy","ILabStatus","busySignal","isBusy","favicon","newFavicon","rel","parentNode","replaceChild","LabShell","updateConfig","info","IInfo","propertyInspector","IPropertyInspectorProvider","labshell","SideBarPropertyInspectorProvider","icon","buildIcon","jupyterLogo","logo","Widget","jupyterIcon","element","container","elementPosition","margin","height","width","modeSwitchPlugin","IStatusBar","statusBar","modeSwitch","Switch","valueChanged","value","loadSettings","updateSettings","startMode","get","Promise","all","restored","updateModeSwitchTitle","binding","keyBindings","b","ks","keys","CommandRegistry","formatKeystroke","keyBindingChanged","registerStatusItem","priority","item","align","displayInformation","menuFactory","pluginId","canonical","loaded","populate","schema","pluginDefaults","Object","plugins","plugin","items","context","concat","reduceRight","acc","val","SettingRegistry","reconcileItems","properties","default","sort","a","Infinity","transform","compose","_c","_d","deepCopy","defaults","user","data","fetch","raw","version","contextItems","filterDisabledItems","MenuFactory","addContextItem","newItems","pluginChanged","sender","oldItems","toAdd","contextNode","leftPanel","getElementById","newLayout","contains","w","move","commandExecuted","executed","remove"],"sourceRoot":""}