{"version":3,"file":"3924.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/reveal.js/dist/theme/ lazy ^\\.\\/.*\\.css$ namespace object","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/app/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/plugins/rise.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/plugins/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application/lib/index.js"],"sourcesContent":["var map = {\n\t\"./beige.css\": [\n\t\t73020,\n\t\t3020\n\t],\n\t\"./black.css\": [\n\t\t78929,\n\t\t8929\n\t],\n\t\"./blood.css\": [\n\t\t76820,\n\t\t6820\n\t],\n\t\"./fonts/league-gothic/league-gothic.css\": [\n\t\t930,\n\t\t930\n\t],\n\t\"./fonts/source-sans-pro/source-sans-pro.css\": [\n\t\t52162,\n\t\t2162\n\t],\n\t\"./league.css\": [\n\t\t19641,\n\t\t9641\n\t],\n\t\"./moon.css\": [\n\t\t93153,\n\t\t3153\n\t],\n\t\"./night.css\": [\n\t\t27945,\n\t\t326\n\t],\n\t\"./serif.css\": [\n\t\t31159,\n\t\t1159\n\t],\n\t\"./simple.css\": [\n\t\t1336,\n\t\t1336\n\t],\n\t\"./sky.css\": [\n\t\t59115,\n\t\t9115\n\t],\n\t\"./solarized.css\": [\n\t\t69186,\n\t\t3157\n\t],\n\t\"./white.css\": [\n\t\t88383,\n\t\t8383\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 85851;\nmodule.exports = webpackAsyncContext;","import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { createRendermimePlugins } from '@jupyterlab/application/lib/mimerenderers';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, Widget } from '@lumino/widgets';\n/**\n * The Rise application shell token.\n */\nexport const IRiseShell = new Token('jupyterlab-rise-application:IRiseShell');\nexport class RiseShell extends Widget {\n    constructor() {\n        super();\n        this._updated = new Signal(this);\n        this.layout = new BoxLayout();\n        this.id = 'main';\n        this._currentWidget = null;\n    }\n    /**\n     * Signal emitted when the shell is updated.\n     */\n    get updated() {\n        return this._updated;\n    }\n    /**\n     * Activates a widget inside the application shell.\n     *\n     * @param id - The ID of the widget being activated.\n     */\n    activateById(id) {\n        // pass no-op\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     *\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     *\n     * @param options - Optional flags the shell might use when opening the\n     * widget, as defined in the `DocumentRegistry`.\n     */\n    add(widget, area, options) {\n        if (this.layout.widgets.length > 0 || area !== 'rise') {\n            // Bail\n            return;\n        }\n        BoxLayout.setStretch(widget, 1);\n        this.layout.addWidget(widget);\n        this._currentWidget = widget;\n    }\n    /**\n     * The focused widget in the application shell.\n     *\n     * #### Notes\n     * Different shell implementations have latitude to decide what \"current\"\n     * or \"focused\" mean, depending on their user interface characteristics.\n     */\n    get currentWidget() {\n        return this._currentWidget;\n    }\n    /**\n     * Returns an iterator for the widgets inside the application shell.\n     *\n     * @param area - Optional regions in the shell whose widgets are iterated.\n     */\n    *widgets(area) {\n        yield* this.layout.widgets;\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     *\n     * #### Notes\n     * The default implementation of this handler is a no-op.\n     */\n    onUpdateRequest(msg) {\n        super.onUpdateRequest(msg);\n        this._updated.emit();\n    }\n}\nexport class RiseApp extends JupyterFrontEnd {\n    /**\n     * Construct a new RetroApp object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        super({ ...options, shell: (_a = options.shell) !== null && _a !== void 0 ? _a : new RiseShell() });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Rise';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = (_b = PageConfig.getOption('appVersion')) !== null && _b !== void 0 ? _b : 'unknown';\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl')\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir')\n            }\n        };\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n//# sourceMappingURL=index.js.map","import { Dialog, ICommandPalette, showDialog } from '@jupyterlab/apputils';\nimport { IEditorLanguageRegistry } from '@jupyterlab/codemirror';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n// TODO Fix shortcut in slideshow mode\n// TODO add commands to the palette\n// TODO should we define our own factory?\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.riseSmartExec = 'RISE:smart-exec';\n    CommandIDs.riseFirstSlide = 'RISE:firstSlide';\n    CommandIDs.riseLastSlide = 'RISE:lastSlide';\n    CommandIDs.riseToggleOverview = 'RISE:toggleOverview';\n    CommandIDs.riseToggleAllButtons = 'RISE:toggleAllRiseButtons';\n    CommandIDs.riseFullScreen = 'RISE:fullscreenHelp';\n    CommandIDs.riseHelp = 'RISE:riseHelp';\n    CommandIDs.riseChalkboardClear = 'RISE:chalkboard-clear';\n    CommandIDs.riseChalkboardReset = 'RISE:chalkboard-reset';\n    CommandIDs.riseChalkboardToggle = 'RISE:chalkboard-toggleChalkboard';\n    CommandIDs.riseChalkboardToggleNotes = 'RISE:chalkboard-toggleNotesCanvas';\n    CommandIDs.riseChalkboardColorPrev = 'RISE:chalkboard-colorPrev';\n    CommandIDs.riseChalkboardColorNext = 'RISE:chalkboard-colorNext';\n    CommandIDs.riseChalkboardDownload = 'RISE:chalkboard-download';\n    CommandIDs.riseNotesOpen = 'RISE:notes-open';\n    CommandIDs.riseShowConfig = 'RISE:show-configuration';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Open the notebook with RISE.\n */\nexport const plugin = {\n    id: 'rise-extension:opener',\n    autoStart: true,\n    requires: [IDocumentManager, IEditorLanguageRegistry],\n    optional: [ISettingRegistry, ITranslator, ICommandPalette],\n    activate: (app, documentManager, laguages, settingRegistry, translator, palette) => {\n        // Uncomment in dev mode to send logs to the parent window\n        //Private.setupLog();\n        var _a, _b;\n        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('rise');\n        // Get the active cell index from query argument\n        const url = new URL(window.location.toString());\n        const activeCellIndex = parseInt((_a = url.searchParams.get('activeCellIndex')) !== null && _a !== void 0 ? _a : '0', 10);\n        // Remove active cell from argument\n        url.searchParams.delete('activeCellIndex');\n        url.searchParams.delete('fullscreen');\n        window.history.pushState(null, '', url.toString());\n        Promise.all([\n            // Load settings of the JupyterLab extension - so the settings can be edited in JLab.\n            (_b = settingRegistry === null || settingRegistry === void 0 ? void 0 : settingRegistry.load('jupyterlab-rise:plugin')) !== null && _b !== void 0 ? _b : Promise.resolve(null),\n            app.started,\n            app.restored\n        ]).then(async ([settings]) => {\n            var _a;\n            const notebookPath = PageConfig.getOption('notebookPath');\n            const notebookPanel = ((_a = documentManager.open(notebookPath, 'Notebook')) !== null && _a !== void 0 ? _a : \n            // If the file cannot be opened with the Notebook factory, try jupytext\n            documentManager.open(notebookPath, 'Jupytext Notebook'));\n            // With the new windowing, some cells are not visible and we need\n            // to deactivate the windowing and wait for each cell to be ready.\n            notebookPanel.content.notebookConfig = {\n                ...notebookPanel.content.notebookConfig,\n                windowingMode: 'none'\n            };\n            Rise.registerCommands(app.commands, notebookPanel, trans);\n            if (palette) {\n                [\n                    CommandIDs.riseFullScreen,\n                    CommandIDs.riseHelp,\n                    CommandIDs.riseNotesOpen,\n                    CommandIDs.riseFirstSlide,\n                    CommandIDs.riseLastSlide,\n                    CommandIDs.riseShowConfig,\n                    CommandIDs.riseChalkboardToggle,\n                    CommandIDs.riseChalkboardClear,\n                    CommandIDs.riseChalkboardReset,\n                    CommandIDs.riseChalkboardColorNext,\n                    CommandIDs.riseChalkboardColorPrev\n                ].forEach(command => {\n                    palette.addItem({\n                        command,\n                        category: 'Rise'\n                    });\n                });\n            }\n            const initializeReveal = (_, change) => {\n                if (change.name === 'dirty' &&\n                    change.newValue === false &&\n                    // if rendered = null || true\n                    !!change.oldValue) {\n                    console.log(`Convert notebook ${notebookPath} to slideshow.`);\n                    // Set the active cell index\n                    notebookPanel.content.activeCellIndex = activeCellIndex;\n                    // We wait for the notebook to be loaded to get the settings from the metadata.\n                    Rise.loadConfiguration(settings, notebookPanel.model);\n                    Rise.revealMode(notebookPanel, app.commands, trans).catch(reason => {\n                        console.error('Fail to update the notebook with Reveal.JS.', reason);\n                    });\n                    Signal.disconnectAll(this);\n                }\n            };\n            // Wait until the context is fully loaded\n            notebookPanel.context.ready.then(async () => {\n                var _a, _b;\n                await Promise.all(notebookPanel.content.widgets.map(cell => cell.ready));\n                await laguages.getLanguage(notebookPanel.content.codeMimetype);\n                initializeReveal(null, {\n                    name: 'dirty',\n                    newValue: (_b = (_a = notebookPanel.model) === null || _a === void 0 ? void 0 : _a.dirty) !== null && _b !== void 0 ? _b : true,\n                    oldValue: true\n                });\n            });\n            // Remove the toolbar - fail due to the dynamic load of the toolbar items\n            // notebookPanel.toolbar.dispose();\n            notebookPanel.toolbar.hide();\n            app.shell.add(notebookPanel, 'rise');\n        });\n    }\n};\nvar Rise;\n(function (Rise) {\n    // see packages/lab/schema/plugin.json\n    const HARDWIRED_CONFIG = {\n        // behaviour\n        autolaunch: false,\n        start_slideshow_at: 'selected',\n        auto_select: 'code',\n        auto_select_fragment: true,\n        show_buttons_on_startup: true,\n        // aspect\n        header: undefined,\n        footer: undefined,\n        backimage: undefined,\n        overlay: undefined,\n        // timeouts\n        // wait for that amont before calling ensure_focused on the\n        // selected cell\n        restore_timeout: 500,\n        // wait for that amount before actually selected auto-selected fragment\n        // when going too short, like 250, size of selected cell get odd\n        auto_select_timeout: 450,\n        // wait for that amount before calling sync() again\n        // this is a workaround that fixes #504\n        sync_timeout: 250,\n        // reveal native settings passed as-is\n        // see also the 'inherited' variable below in Revealer\n        theme: 'simple',\n        transition: 'linear',\n        // xxx there might be a need to tweak this one when set\n        // by the configurator, as e.g. 'false' or 'true' will result\n        // in a string and not a boolean\n        slideNumber: true,\n        width: '100%',\n        height: '100%',\n        controls: true,\n        progress: true,\n        history: true,\n        scroll: false,\n        center: true,\n        margin: 0.1,\n        minScale: 1.0,\n        // turn off reveal's help overlay that is by default bound to question mark / ?\n        help: false,\n        // plugins\n        enable_chalkboard: false,\n        enable_leap_motion: false\n    };\n    let complete_config = { ...HARDWIRED_CONFIG };\n    function loadConfiguration(settings = null, notebookModel = null) {\n        var _a, _b, _c;\n        const applicationSettings = (_a = settings === null || settings === void 0 ? void 0 : settings.composite) !== null && _a !== void 0 ? _a : {};\n        complete_config = {\n            ...HARDWIRED_CONFIG,\n            ...applicationSettings,\n            ...((_b = notebookModel === null || notebookModel === void 0 ? void 0 : notebookModel.getMetadata('livereveal')) !== null && _b !== void 0 ? _b : {}),\n            ...((_c = notebookModel === null || notebookModel === void 0 ? void 0 : notebookModel.getMetadata('rise')) !== null && _c !== void 0 ? _c : {})\n        };\n    }\n    Rise.loadConfiguration = loadConfiguration;\n    /* Register commands */\n    function smartExec(panel) {\n        NotebookActions.runAndAdvance(panel.content, panel.context.sessionContext);\n        // TODO\n        // is it really the selected cell that matters ?\n        // let smart_exec = Jupyter.notebook.get_selected_cell().smart_exec;\n        // if (smart_exec == 'smart_exec_slide') {\n        //   Jupyter.notebook.execute_selected_cells();\n        // } else if (smart_exec == \"smart_exec_fragment\") {\n        //   // let's see if the next fragment is visible or not\n        //   let cell = Jupyter.notebook.get_selected_cell();\n        //   let fragment_div = cell.smart_exec_next_fragment;\n        //   let visible = $(fragment_div).hasClass('visible');\n        //   if (visible) {\n        //     Jupyter.notebook.execute_cell_and_select_below();\n        //   } else {\n        //     Jupyter.notebook.execute_selected_cells();\n        //   }\n        // } else {\n        //   Jupyter.notebook.execute_cell_and_select_below();\n        // }\n    }\n    function registerCommands(commands, panel, trans) {\n        // register main action\n        commands.addCommand(CommandIDs.riseSmartExec, {\n            caption: trans.__('execute cell, and move to the next if on the same slide'),\n            execute: () => smartExec(panel)\n        });\n        // mostly for debug / information\n        commands.addCommand(CommandIDs.riseShowConfig, {\n            label: trans.__('Dump RISE configuration'),\n            caption: trans.__('Output RISE configuration in console, for debugging mostly'),\n            execute: () => {\n                console.log('RISE configuration', complete_config);\n            }\n        });\n        // action for reveal.js and reveal.js plug-in bindings\n        // this a the dictionary structure as generated by nbextension_configurator\n        // with the corresponding API calls to RISE/reveal.js and/or its plug-ins\n        const reveal_actions = {};\n        // RISE/reveal.js API calls\n        reveal_actions[CommandIDs.riseFirstSlide] = () => Reveal.slide(0); // jump to first slide\n        reveal_actions[CommandIDs.riseLastSlide] = () => Reveal.slide(Number.MAX_VALUE); // jump to last slide\n        reveal_actions[CommandIDs.riseToggleOverview] = () => Reveal.toggleOverview(); // toggle overview\n        reveal_actions[CommandIDs.riseToggleAllButtons] = toggleAllRiseButtons; // show/hide buttons\n        reveal_actions[CommandIDs.riseFullScreen] = () => {\n            fullscreenHelp();\n        }; // show fullscreen help\n        reveal_actions[CommandIDs.riseHelp] = () => {\n            displayRiseHelp(commands, trans);\n        }; // '?' show our help\n        // API calls for RevealChalkboard plug-in\n        reveal_actions[CommandIDs.riseChalkboardClear] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.clear(); }; // clear full size chalkboard\n        reveal_actions[CommandIDs.riseChalkboardReset] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.reset(); }; // reset chalkboard data on current slide\n        reveal_actions[CommandIDs.riseChalkboardToggle] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.toggleChalkboard(); }; // toggle full size chalkboard\n        reveal_actions[CommandIDs.riseChalkboardToggleNotes] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.toggleNotesCanvas(); }; // toggle notes (slide-local)\n        reveal_actions[CommandIDs.riseChalkboardColorNext] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.colorNext(); }; // next color\n        reveal_actions[CommandIDs.riseChalkboardColorPrev] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.colorPrev(); }; // previous color\n        reveal_actions[CommandIDs.riseChalkboardDownload] = () => { var _a; return (_a = window.RevealChalkboard) === null || _a === void 0 ? void 0 : _a.download(); }; //  download recorded chalkboard drawing\n        // API calls for RevealNotes plug-in\n        reveal_actions[CommandIDs.riseNotesOpen] = () => {\n            // TODO this is broken because it looks for reveal.js/plugin/notes/notes.html\n            //   A manual path can be passed to open\n            // open speaker notes window\n            Reveal.getPlugin('notes').open();\n            // [PageConfig.getOption('fullStaticUrl'), 'notes.html'].join('/')\n        };\n        const helpStrings = getHelpDescription(trans);\n        // register all reveal.js actions\n        for (const action of Object.keys(reveal_actions)) {\n            const api_call = reveal_actions[action];\n            commands.addCommand(action, {\n                label: helpStrings[action],\n                caption: helpStrings[action],\n                execute: api_call\n            });\n            // console.log(`Registered jupyter action \\\"${action}\\\" to API call: ${api_call}`);\n        }\n    }\n    Rise.registerCommands = registerCommands;\n    /* Slideshow code */\n    let Reveal;\n    function get_slide_type(cell) {\n        const slideshow = cell.getMetadata('slideshow') || {};\n        const slide_type = slideshow['slide_type'];\n        //console.log(slide_type);\n        return slide_type === undefined || slide_type === '-' ? '' : slide_type;\n    }\n    /*\n    function is_slide(cell: ICellModel): boolean {\n      return get_slide_type(cell) === 'slide';\n    }\n    function is_subslide(cell: ICellModel): boolean {\n      return get_slide_type(cell) === 'subslide';\n    }\n    function is_fragment(cell: ICellModel): boolean {\n      return get_slide_type(cell) === 'fragment';\n    }\n    function is_skip(cell: ICellModel): boolean {\n      return get_slide_type(cell) === 'skip';\n    }\n    function is_notes(cell: ICellModel): boolean {\n      return get_slide_type(cell) === 'notes';\n    }\n    */\n    /* Use the slideshow metadata to rearrange cell DOM elements into the\n       * structure expected by reveal.js\n       *\n       * in the process, each cell receives a 'smart_exec' tag that says\n       * how to behave when the cell gets executed with Shift-Enter\n       * this tag can be either\n       * 'smart_exec_slide' : just do exec, which is what RISE did on all cells at first\n       this is for the last cell on a (sub)slide\n       i.e. if next cell is slide or subslide\n       * 'smart_exec_fragment' : do exec + show next fragment\n       if next cell is a fragment\n       * 'smart_exec_next' : do the usual exec + select next like in classic notebook\n       */\n    function markupSlides(notebook) {\n        if (!notebook.model) {\n            // Bail early if the model is not valid\n            return [0, 0];\n        }\n        let slide_counter = -1;\n        let subslide_counter = -1;\n        function new_slide(prev_slide_section) {\n            slide_counter++;\n            subslide_counter = -1;\n            const new_section = document.createElement('section');\n            // first slide\n            if (!prev_slide_section) {\n                notebook.node.insertBefore(new_section, notebook.node.firstChild);\n            }\n            else {\n                notebook.node.insertBefore(new_section, prev_slide_section.nextSibling);\n            }\n            return new_section;\n        }\n        function new_subslide(slide_section) {\n            subslide_counter++;\n            const new_section = document.createElement('section');\n            new_section.id = `slide-${slide_counter}-${subslide_counter}`;\n            slide_section.appendChild(new_section);\n            return new_section;\n        }\n        function new_fragment(subslide_section) {\n            const new_fragment = document.createElement('div');\n            new_fragment.classList.add('fragment');\n            subslide_section.appendChild(new_fragment);\n            return new_fragment;\n        }\n        // Containers for the first slide.\n        let slide_section = new_slide(null);\n        let subslide_section = new_subslide(slide_section);\n        let current_fragment = subslide_section;\n        const selected_cell_idx = notebook.activeCellIndex;\n        let selected_cell_slide = [0, 0];\n        /* Special handling for the first slide: it will work even if the user\n         * doesn't start with a 'Slide' cell. But if the user does explicitly\n         * start with slide/subslide, we don't want a blank first slide. So we\n         * don't create a new slide/subslide until there is visible content on\n         * the first slide.\n         */\n        let content_on_slide1 = false;\n        const cells = notebook.model.cells;\n        for (let i = 0; i < cells.length; i++) {\n            const cell = cells.get(i);\n            const slide_type = get_slide_type(cell);\n            // we already have one section inserted here on startup\n            const cell_node = notebook.viewportNode.firstElementChild;\n            if (content_on_slide1) {\n                if (slide_type === 'slide') {\n                    // Start new slide\n                    slide_section = new_slide(slide_section);\n                    // In each subslide, we insert cells directly into the\n                    // <section> until we reach a fragment, when we create a div.\n                    current_fragment = subslide_section = new_subslide(slide_section);\n                }\n                else if (slide_type === 'subslide') {\n                    // Start new subslide\n                    current_fragment = subslide_section = new_subslide(slide_section);\n                }\n                else if (slide_type === 'fragment') {\n                    // record the <div class='fragment'> element corresponding\n                    // to each fragment cell in the 'fragment_div' attribute\n                    current_fragment = new_fragment(subslide_section);\n                }\n            }\n            else if (slide_type !== 'notes' && slide_type !== 'skip') {\n                // Subsequent cells should be able to start new slides\n                content_on_slide1 = true;\n            }\n            // Record that this slide contains the selected cell\n            // this is where we need i as set in the loop over cells\n            if (i === selected_cell_idx) {\n                selected_cell_slide = [slide_counter, subslide_counter];\n            }\n            if (slide_type === 'notes') {\n                // Notes are wrapped in an <aside> element\n                const aside = document.createElement('aside');\n                aside.classList.add('notes');\n                aside.append(cell_node);\n                subslide_section.appendChild(aside);\n            }\n            else {\n                current_fragment.appendChild(cell_node);\n            }\n            // Hide skipped cells\n            if (slide_type === 'skip') {\n                cell_node.classList.add('reveal-skip');\n            }\n        }\n        /* set on all cells a smart_exec tag that says how smart exec\n         * should behave on that cell\n         * the fragment cell also get a smart_exec_next_fragment\n         * attribute that points at the <div class='fragment'>\n         * corresponding to the (usually immediately) next cell\n         * that is a fragment cell\n         */\n        // TODO smart execution\n        // for (let i = 0; i < cells.length; i++) {\n        //   const cell = cells.get(i);\n        //   // default is 'pinned' because this applies to the last cell\n        //   let tag = 'smart_exec_slide';\n        //   for (let j = i + 1; j < cells.length; j++) {\n        //     const next_cell = cells.get(j);\n        //     const next_type = get_slide_type(next_cell);\n        //     if (next_type === 'slide' || next_type === 'subslide') {\n        //       tag = 'smart_exec_slide';\n        //       break;\n        //     } else if (next_type === 'fragment') {\n        //       tag = 'smart_exec_fragment';\n        //       /* these cells are the last before a fragment\n        //        * and when running smart-exec we'll want to know\n        //        * if that fragment is visible, so we keep a link to\n        //        * the <div class='fragment'> element of that (next)\n        //        * fragment cell\n        //        */\n        //       cell.smart_exec_next_fragment = next_cell.fragment_div;\n        //       break;\n        //     } else if (next_type === '') {\n        //       tag = 'smart_exec_next';\n        //       break;\n        //     }\n        //   }\n        //   cell.smart_exec = tag;\n        // }\n        return selected_cell_slide;\n    }\n    /*\n      using Reveal.getCurrentSlide() it is possible to get a lot of data\n      about where we are in the slideshow\n  \n      the following function inspects this and returns a triple\n      [slide, subslide, fragments]\n  \n      slide and subslide both start at 0 (1st slide numbered 0)\n  \n      fragments is the number of <fragments> tags currently showed\n      that is to say, **in addition** to the slide beginning\n      note that a jupyter cell cannot be a slide *and* a fragment at the same time\n      the first slide however may be different as the first cell may be a fragment\n      which I chose not to support for now\n      bottom line: is fragments also starts at 0\n  \n      ---------- historical note\n  \n      in a previous implementation - for traditional notebooks -\n      we used to get slide and subslide from window.location.href\n      however this in jupyter lab may be no longer possible\n  \n      in addition this is the way to go for getting info on the current fragment\n    */\n    function reveal_current_position() {\n        const current_slide = Reveal.getCurrentSlide();\n        if (!current_slide) {\n            return [0, 0, 0];\n        }\n        // href of the form slide-2-3\n        const href = current_slide.id;\n        const chunks = href.split('-');\n        const slide = Number(chunks[1]);\n        const subslide = Number(chunks[2]);\n        const fragments = current_slide.querySelectorAll('div.fragment.visible').length;\n        return [slide, subslide, fragments];\n    }\n    function is_slide(cell) {\n        return get_slide_type(cell) === 'slide';\n    }\n    function is_subslide(cell) {\n        return get_slide_type(cell) === 'subslide';\n    }\n    function is_fragment(cell) {\n        return get_slide_type(cell) === 'fragment';\n    }\n    function is_skip(cell) {\n        return get_slide_type(cell) === 'skip';\n    }\n    function is_notes(cell) {\n        return get_slide_type(cell) === 'notes';\n    }\n    /* Just before exiting reveal mode, we run this function\n     * whose job is to find the notebook index\n     * for the first cell in the current (sub)slide\n     * this allows to restore the notebook at the correct location,\n     * i.e. with that cell being selected\n     *\n     * if cell_type is not set, returns the first cell in slide\n     * otherwise, it returns the first cell of that type in slide\n     *\n     * if auto_select_fragment is set to true, search is restricted to the current fragment\n     * otherwise, the whole slide is considered\n     *\n     * returns null if no match is found\n     */\n    function reveal_cell_index(notebook, cell_type = null, auto_select_fragment = false) {\n        if (!notebook) {\n            return null;\n        }\n        /* scan all cells until we find one that matches current reveal location\n         * need to deal carefully with beginning of that process because\n         * (.) we do not impose a starting 'slide', and\n         * (.) the first cell(s) might be of type 'skip'\n         *     which then must not be counted\n         */\n        const [slide, subslide, fragment] = reveal_current_position();\n        // start at slide -1 because we don't impose a starting 'slide'\n        let [slide_counter, subslide_counter, fragment_counter] = [-1, 0, 0];\n        const cells = notebook.cells;\n        for (let index = 0; index < cells.length; index++) {\n            const cell = cells.get(index);\n            // ignore skip cells no matter what\n            if (is_skip(cell) || is_notes(cell)) {\n                continue;\n            }\n            // a slide always increments, even at the start, since we begin at -1\n            if (is_slide(cell)) {\n                slide_counter += 1;\n                subslide_counter = 0;\n            }\n            // if we see anything else then we're on a visible slide\n            // that has to be at least 0\n            slide_counter = Math.max(slide_counter, 0);\n            if (is_subslide(cell)) {\n                subslide_counter += 1;\n            }\n            if (slide_counter === slide && subslide_counter === subslide) {\n                // keep count of fragments but only on current slide\n                if (is_fragment(cell)) {\n                    fragment_counter += 1;\n                }\n                /* we're on the right slide\n                 * now: do we need to also worry about focusing on the right fragment ?\n                 * if auto_select_fragment is true, we only consider cells in the fragment\n                 * otherwise, the whole (sub)slide is considered valid\n                 */\n                const fragment_match = auto_select_fragment\n                    ? fragment_counter === fragment\n                    : true;\n                // we still need to match cell types\n                if (fragment_match && (cell_type === null || cell.type === cell_type)) {\n                    return index;\n                }\n            }\n        }\n        // for consistency with previous implementations\n        return null;\n    }\n    function autoSelectHook(notebook) {\n        const auto_select = complete_config.auto_select;\n        const cell_type = auto_select === 'code'\n            ? 'code'\n            : auto_select === 'first'\n                ? null\n                : undefined;\n        /* turned off altogether */\n        if (cell_type === undefined) {\n            return;\n        }\n        const auto_select_fragment = complete_config.auto_select_fragment;\n        setTimeout(() => {\n            const current_cell_index = reveal_cell_index(notebook.model, cell_type, auto_select_fragment);\n            // select and focus on current cell\n            if (current_cell_index) {\n                notebook.activeCellIndex = current_cell_index;\n            }\n        }, complete_config.auto_select_timeout);\n    }\n    /* Set the #slide-x-y part of the URL to control where the slideshow will start.\n     * N.B. We do this instead of using Reveal.slide() after reveal initializes,\n     * because that leaves one slide clearly visible on screen for a moment before\n     * changing to the one we want. By changing the URL before setting up reveal,\n     * the slideshow really starts on the desired slide.\n     */\n    function setStartingSlide(selected) {\n        const start_slideshow = complete_config.start_slideshow_at;\n        if (start_slideshow === 'selected') {\n            // Start from the selected cell\n            Reveal.slide(selected[0], selected[1]);\n        }\n        else {\n            // Start from the beginning\n            Reveal.slide(0, 0);\n        }\n        setScrollingSlide();\n        // workaround for #504\n        // when editing if you swap out of reveal, and then\n        // come back in, with 5.6 most of the time display\n        // becomes empty or the contents is way too low\n        // this patch makes the situation much better,\n        // although it is clearly suboptimal to have\n        // to resort to that sort of dirty patch\n        setTimeout(() => Reveal.sync(), complete_config.sync_timeout);\n    }\n    /* Setup the scrolling in the current slide if the config option is activated\n     *  and the content is greater than 0.95 * slide height\n     */\n    function setScrollingSlide() {\n        var _a, _b;\n        const scroll = complete_config.scroll;\n        const panel = document.querySelector('.reveal');\n        const sections = (_b = (_a = document.querySelector('section.present')) === null || _a === void 0 ? void 0 : _a.querySelectorAll('section')) !== null && _b !== void 0 ? _b : [];\n        if (scroll === true && panel) {\n            const height = panel.getBoundingClientRect().height * 0.95;\n            [...sections]\n                .filter(section => {\n                return section.getBoundingClientRect().height > height;\n            })\n                .forEach(section => {\n                section.style.height = 'calc(95vh)';\n                section.style.overflowY = 'scroll';\n                section.style.marginTop = '20px';\n            });\n        }\n    }\n    /* Setup a MutationObserver to call Reveal.sync when an output is generated.\n     * This fixes issue #188: https://github.com/jupyterlab-contrib/rise/issues/188\n     */\n    let outputObserver = null;\n    function setupOutputObserver() {\n        var _a;\n        function mutationHandler(mutationRecords) {\n            mutationRecords.forEach(mutation => {\n                if (mutation.addedNodes && mutation.addedNodes.length) {\n                    Reveal.sync();\n                    setScrollingSlide();\n                }\n            });\n        }\n        const outputs = document.querySelectorAll('.output');\n        const MutationObserver = \n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        (_a = window.MutationObserver) !== null && _a !== void 0 ? _a : window.WebKitMutationObserver;\n        outputObserver = new MutationObserver(mutationHandler);\n        const observerOptions = {\n            childList: true,\n            characterData: false,\n            attributes: false,\n            subtree: false\n        };\n        [...outputs].forEach(output => {\n            outputObserver === null || outputObserver === void 0 ? void 0 : outputObserver.observe(output, observerOptions);\n        });\n    }\n    function addHeaderFooterOverlay() {\n        var _a;\n        const overlay = complete_config.overlay;\n        const header = complete_config.header;\n        const footer = complete_config.footer;\n        const backimage = complete_config.backimage;\n        // minimum styling to make these 3 things look\n        // like what their name says they should look\n        const header_style = 'position: absolute; top: 0px;';\n        const footer_style = 'position: absolute; bottom: 0px;';\n        const backimage_style = 'width: 100%; height: 100%;';\n        let overlay_body = '';\n        if (overlay) {\n            overlay_body = overlay;\n        }\n        else {\n            if (header) {\n                overlay_body += `<div id='rise-header' style='${header_style}'>${header}</div>`;\n            }\n            if (backimage) {\n                overlay_body += `<img id='rise-backimage' style='${backimage_style}' src='${backimage}' />`;\n            }\n            if (footer) {\n                overlay_body += `<div id='rise-footer' style='${footer_style}'>${footer}</div>`;\n            }\n        }\n        (_a = document\n            .querySelector('div.reveal')) === null || _a === void 0 ? void 0 : _a.insertAdjacentHTML('beforeend', `<div id='rise-overlay'>${overlay_body}</div>`);\n    }\n    function toggleAllRiseButtons() {\n        for (const selector of ['#help-b', '#toggle-chalkboard', '#toggle-notes']) {\n            const element = document.querySelector(selector);\n            if (element) {\n                element.style.visibility =\n                    element.style.visibility === 'hidden' ? 'visible' : 'hidden';\n            }\n        }\n    }\n    async function fullscreenHelp() {\n        var _a;\n        if (!document.fullscreenElement) {\n            await ((_a = document.querySelector('div.reveal')) === null || _a === void 0 ? void 0 : _a.requestFullscreen());\n        }\n        else {\n            if (document.exitFullscreen) {\n                await document.exitFullscreen();\n            }\n        }\n    }\n    let isRevealInitialized = false;\n    async function Revealer(panel, selected_slide) {\n        document.body.classList.add('rise-enabled');\n        // Allow the panel to receive focus, to send it to the notebook.\n        // NOTES:\n        // Clicking in the notebook panel seems to fallback on reveal background,\n        // which gives the focus to the body element (at least it is the one targeted\n        // when using `document.activeElement`), without triggering the onfocus event.\n        panel.node.tabIndex = -1;\n        // Add the main reveal.js classes\n        const notebook = panel.content;\n        panel.addClass('reveal');\n        notebook.addClass('slides');\n        // Move the focus to the notebook when the iframe get the focus.\n        document.body.onfocus = event => {\n            const target = event.target;\n            if (target instanceof Window) {\n                notebook.node.focus();\n            }\n        };\n        // Move the focus to the notebook when the panel get the focus.\n        panel.node.onfocus = event => {\n            const target = event.target;\n            if (!notebook.node.contains(target)) {\n                notebook.node.focus();\n            }\n        };\n        // Header\n        // Available themes are in static/css/theme\n        const theme = complete_config.theme;\n        document.body.classList.add(`theme-${theme}`);\n        // Asynchronously load reveal theme\n        await import(`reveal.js/dist/theme/${theme}.css`);\n        /* this policy of trying ./rise.css and then <notebook>.css\n         * should be redefinable in the config\n         */\n        // https://github.com/jupyterlab-contrib/rise/issues/509\n        // Attempt to load rise.css\n        const curdir = PathExt.dirname(panel.sessionContext.path);\n        const riseCssUrl = new URL(PathExt.join('files', curdir, 'rise.css'), PageConfig.getBaseUrl());\n        document.head.insertAdjacentHTML('beforeend', `<link rel=\"stylesheet\" href=\"${riseCssUrl.href}\" id=\"rise-custom-css\" />`);\n        const name = PathExt.basename(panel.sessionContext.path);\n        const dot_index = name.lastIndexOf('.');\n        const stem = dot_index === -1 ? name : name.substr(0, dot_index);\n        // associated css\n        const nameCssUrl = new URL(PathExt.join('files', curdir, `${stem}.css`), PageConfig.getBaseUrl());\n        // Attempt to load css with the same path as notebook\n        document.head.insertAdjacentHTML('beforeend', `<link rel=\"stylesheet\" href=\"${nameCssUrl.href}\" id=\"rise-notebook-css\" />`);\n        // Asynchronously import reveal\n        const RevealLib = (await import('reveal.js')).default;\n        // Full list of configuration options available here:\n        // https://github.com/hakimel/reveal.js#configuration\n        // all these settings are passed along to reveal as-is\n        // xxx it might be just better to copy the whole complete_config instead\n        // of selecting some names, which would allow users to transparently use\n        // all reveal's features\n        const inherited = [\n            'controls',\n            'progress',\n            'history',\n            'width',\n            'height',\n            'margin',\n            'minScale',\n            'transition',\n            'slideNumber',\n            'center',\n            'help'\n        ];\n        const options = {\n            //parallaxBackgroundImage: 'https://raw.github.com/damianavila/par_IPy_slides_example/gh-pages/figs/star_wars_stormtroopers_darth_vader.jpg',\n            //parallaxBackgroundSize: '2560px 1600px',\n            // turn off reveal native help\n            help: false,\n            // key bindings configurable are now defined in the reveal_default_bindings dict -\n            // this should only be used to unbind keys\n            // note that toggleAllRiseButtons is bound to comma here as jupyter does not\n            // allow to bind anything to comma!\n            keyboard: {\n                13: null,\n                27: null,\n                35: null,\n                36: null,\n                38: null,\n                40: null,\n                66: null,\n                70: null,\n                72: null,\n                74: null,\n                75: null,\n                76: null,\n                78: null,\n                79: null,\n                80: null,\n                84: null,\n                87: null,\n                // is it ok?\n                188: toggleAllRiseButtons // comma, hard-wired to toggleAllRiseButtons\n            },\n            plugins: []\n        };\n        // Import notes plugin\n        const Notes = (await import(\n        // @ts-expect-error Import non typed package\n        'reveal.js/plugin/notes/notes.esm.js')).default;\n        options.plugins.push(Notes);\n        for (const setting of inherited) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            options[setting] = complete_config[setting];\n        }\n        ////////// set up the leap motion integration if configured\n        // TODO leap plugin does not exist\n        // const enable_leap_motion = complete_config.enable_leap_motion;\n        // if (enable_leap_motion) {\n        //   // @ts-expect-error Import non typed package\n        //   await import('rise-reveal/export/reveal.js/plugin/leap/leap.js');\n        //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        //   // @ts-ignore\n        //   options.leap = enable_leap_motion;\n        // }\n        //$.extend(options.keyboard, reveal_bindings);\n        ////////// set up chalkboard if configured\n        const enable_chalkboard = complete_config.enable_chalkboard;\n        if (enable_chalkboard) {\n            if ('chalkboard' in complete_config) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                options['chalkboard'] = complete_config['chalkboard'];\n            }\n            await import(\n            // @ts-expect-error Import non typed package\n            'reveal.js-plugins/chalkboard/plugin.js');\n            // @ts-expect-error Import non typed CSS package\n            await import('reveal.js-plugins/chalkboard/style.css');\n            // await import('reveal.js-plugins/chalkboard/img/*.png')\n            // @ts-expect-error Unknown global RevealChalkboard\n            options.plugins.push(window.RevealChalkboard);\n        }\n        if (isRevealInitialized) {\n            Reveal.configure(options);\n            //console.log(\"Reveal is already initialized and is being configured\");\n        }\n        else {\n            await RevealLib.initialize(options);\n            Reveal = RevealLib;\n            //console.log(\"Reveal initialized\");\n            isRevealInitialized = true;\n        }\n        Reveal.addEventListener('ready', event => {\n            Unselecter(panel.content);\n            // check and set the scrolling slide when you start the whole thing\n            setScrollingSlide();\n            autoSelectHook(panel.content);\n        });\n        Reveal.addEventListener('slidechanged', event => {\n            Unselecter(panel.content);\n            // check and set the scrolling slide every time the slide change\n            setScrollingSlide();\n            autoSelectHook(panel.content);\n        });\n        Reveal.addEventListener('fragmentshown', event => {\n            autoSelectHook(panel.content);\n        });\n        Reveal.addEventListener('fragmenthidden', event => {\n            autoSelectHook(panel.content);\n        });\n        // Sync when an output is generated.\n        setupOutputObserver();\n        // Setup the starting slide\n        setStartingSlide(selected_slide);\n        addHeaderFooterOverlay();\n        if (!complete_config.show_buttons_on_startup) {\n            /* safer, and nicer too, to wait for reveal extensions to start */\n            setTimeout(toggleAllRiseButtons, 2000);\n        }\n        panel.content.activeCellChanged.connect((sender, cell) => {\n            // Move to active cell\n            if (!cell) {\n                return;\n            }\n            const slides = Reveal.getSlides();\n            const slide = slides.find(s => s.contains(cell.node));\n            if (slide) {\n                const i = Reveal.getIndices(slide);\n                Reveal.slide(i.h, i.v, i.f);\n            }\n        });\n    }\n    function Unselecter(notebook) {\n        notebook.deselectAll();\n    }\n    async function revealMode(panel, commands, trans) {\n        const notebook = panel.content;\n        // Preparing the new reveal-compatible structure\n        const selected_slide = markupSlides(notebook);\n        // Adding the reveal stuff\n        Revealer(panel, selected_slide);\n        // Minor modifications for usability\n        addHelpButton(panel, commands, trans);\n    }\n    Rise.revealMode = revealMode;\n    async function displayRiseHelp(commands, trans) {\n        const helpStrings = getHelpDescription(trans);\n        /**\n         * Build help list item\n         *\n         * @param commandID Command ID linked to a shortcut\n         * @returns HTML string\n         */\n        function helpListItem(commandID) {\n            const binding = commands.keyBindings.find(b => b.command === commandID);\n            const ks = binding\n                ? CommandRegistry.formatKeystroke(binding.keys.join(' '))\n                : '';\n            return `<li><kbd>${ks}</kbd> : ${helpStrings[commandID]}</li>`;\n        }\n        const node = document.createElement('div');\n        node.insertAdjacentHTML('afterbegin', `<p>\n  <ul>\n    ${helpListItem(CommandIDs.riseHelp)}\n    <li><kbd>${CommandRegistry.formatKeystroke('Alt R')}</kbd>: ${trans.__('enter/exit RISE')}</li>\n    <li><kbd>${CommandRegistry.formatKeystroke('Space')}</kbd>: ${trans.__('next')}</li>\n    <li><kbd>${CommandRegistry.formatKeystroke('Shift Space')}</kbd>: ${trans.__('previous')}</li>\n    <li><kbd>${CommandRegistry.formatKeystroke('Shift Enter')}</kbd>: ${trans.__('eval and select next cell if visible')}</li>\n    ${helpListItem(CommandIDs.riseFirstSlide)}\n    ${helpListItem(CommandIDs.riseLastSlide)}\n    ${helpListItem(CommandIDs.riseToggleOverview)}\n    ${helpListItem(CommandIDs.riseNotesOpen)}\n    <li><kbd>${CommandRegistry.formatKeystroke(',')}</kbd>: ${helpStrings[CommandIDs.riseToggleAllButtons]}</li>\n    <li><kbd>${CommandRegistry.formatKeystroke('/')}</kbd>: ${trans.__('black screen')}</li>\n    <li><strong>${trans.__('less useful')}:</strong></li>\n    <ul>\n      <li><kbd>${CommandRegistry.formatKeystroke('PageUp')}</kbd>: ${trans.__('up')}</li>\n      <li><kbd>${CommandRegistry.formatKeystroke('PageDown')}</kbd>: ${trans.__('down')}</li>\n      <li><kbd>${CommandRegistry.formatKeystroke('ArrowLeft')}</kbd>: ${trans.__('left')} <em>(${trans.__('note: Space preferred')})</em></li>\n      <li><kbd>${CommandRegistry.formatKeystroke('ArrowRight')}</kbd>: ${trans.__('right')} <em>(${trans.__('note: Shift Space preferred')})</em></li>\n    </ul>\n    <li><strong>${trans.__('with chalkboard enabled')}:</strong></li>\n    <ul>\n      ${helpListItem(CommandIDs.riseChalkboardToggle)}\n      ${helpListItem(CommandIDs.riseChalkboardToggleNotes)}\n      ${helpListItem(CommandIDs.riseChalkboardColorNext)}\n      ${helpListItem(CommandIDs.riseChalkboardColorPrev)}\n      ${helpListItem(CommandIDs.riseChalkboardDownload)}\n      ${helpListItem(CommandIDs.riseChalkboardReset)}\n      ${helpListItem(CommandIDs.riseChalkboardClear)}\n    </ul>\n  </ul>\n  ${trans.__('NOTE: of course you have to use these shortcuts in command mode.')}\n</p>`);\n        await showDialog({\n            title: trans.__('Reveal Shortcuts Help'),\n            body: new Widget({ node }),\n            buttons: [Dialog.warnButton({ label: trans.__('OK') })]\n        });\n    }\n    function addHelpButton(panel, commands, trans) {\n        const helpButton = document.createElement('i');\n        helpButton.setAttribute('id', 'help-b');\n        helpButton.setAttribute('title', trans.__('Reveal Shortcuts Help'));\n        helpButton.classList.add('fa-question', 'fa-4x', 'fa');\n        helpButton.addEventListener('click', () => {\n            displayRiseHelp(commands, trans);\n        });\n        panel.node.insertAdjacentElement('afterend', helpButton);\n    }\n    const reveal_helpstr = {};\n    function getHelpDescription(trans) {\n        if (Object.keys(reveal_helpstr).length === 0) {\n            // RISE/reveal.js API calls\n            reveal_helpstr[CommandIDs.riseFirstSlide] = trans.__('jump to first slide');\n            reveal_helpstr[CommandIDs.riseLastSlide] = trans.__('jump to last slide');\n            reveal_helpstr[CommandIDs.riseToggleOverview] =\n                trans.__('toggle overview');\n            reveal_helpstr[CommandIDs.riseToggleAllButtons] =\n                trans.__('show/hide buttons');\n            reveal_helpstr[CommandIDs.riseFullScreen] = trans.__('show fullscreen help');\n            reveal_helpstr[CommandIDs.riseHelp] = trans.__('show this help dialog');\n            // API calls for RevealChalkboard plug-in\n            reveal_helpstr[CommandIDs.riseChalkboardClear] = trans.__('clear full size chalkboard');\n            reveal_helpstr[CommandIDs.riseChalkboardReset] = trans.__('reset chalkboard data on current slide');\n            reveal_helpstr[CommandIDs.riseChalkboardToggle] = trans.__('toggle full size chalkboard');\n            reveal_helpstr[CommandIDs.riseChalkboardToggleNotes] = trans.__('toggle notes (slide-local)');\n            reveal_helpstr[CommandIDs.riseChalkboardColorNext] = trans.__('cycle to next pen color');\n            reveal_helpstr[CommandIDs.riseChalkboardColorPrev] = trans.__('cycle to previous pen color');\n            reveal_helpstr[CommandIDs.riseChalkboardDownload] = trans.__('download recorded chalkboard drawing');\n            // API calls for RevealNotes plug-in\n            reveal_helpstr[CommandIDs.riseNotesOpen] = trans.__('open speaker notes window');\n        }\n        return reveal_helpstr;\n    }\n})(Rise || (Rise = {}));\n// @ts-expect-error 'Private' may never be read\nvar Private;\n(function (Private) {\n    function setupLog() {\n        const _debug = console.debug;\n        const _info = console.info;\n        const _warn = console.warn;\n        const _error = console.error;\n        function post(payload) {\n            var _a, _b;\n            try {\n                (_a = window.top) === null || _a === void 0 ? void 0 : _a.postMessage(payload, '/');\n            }\n            catch (err) {\n                (_b = window.top) === null || _b === void 0 ? void 0 : _b.postMessage({\n                    level: 'debug',\n                    msg: [\n                        '[RISE]:',\n                        'Issue cloning object when posting log message, JSON stringify version is:',\n                        JSON.stringify(payload)\n                    ]\n                }, '/');\n            }\n        }\n        console.debug = (...args) => {\n            post({ level: 'debug', msg: ['[RISE]:', ...args] });\n            _debug(...args);\n        };\n        console.info = console.info = (...args) => {\n            post({ level: 'info', msg: ['[RISE]:', ...args] });\n            _info(...args);\n        };\n        console.warn = (...args) => {\n            post({ level: 'warn', msg: ['[RISE]:', ...args] });\n            _warn(...args);\n        };\n        console.error = (...args) => {\n            post({ level: 'error', msg: ['[RISE]:', ...args] });\n            _error(...args);\n        };\n    }\n    Private.setupLog = setupLog;\n})(Private || (Private = {}));\n//# sourceMappingURL=rise.js.map","/* eslint-disable no-inner-declarations */\nimport { JupyterFrontEnd } from '@jupyterlab/application';\nimport { RiseApp } from '../app';\nimport { plugin } from './rise';\n/**\n * The default paths for a Rise app.\n */\nconst paths = {\n    id: 'rise-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof RiseApp)) {\n            throw new Error(`${paths.id} must be activated in Rise.`);\n        }\n        return app.paths;\n    }\n};\nexport default [paths, plugin];\n//# sourceMappingURL=index.js.map","import * as plugins from './plugins';\nexport * from './app';\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","IRiseShell","Token","RiseShell","Widget","constructor","super","this","_updated","Signal","layout","BoxLayout","_currentWidget","updated","activateById","add","widget","area","options","widgets","length","setStretch","addWidget","currentWidget","onUpdateRequest","msg","emit","RiseApp","JupyterFrontEnd","_a","_b","shell","name","namespace","version","PageConfig","getOption","mimeExtensions","plugin","registerPlugin","paths","urls","base","notFound","app","static","settings","themes","doc","translations","directories","appSettings","schemas","templates","userSettings","serverRoot","workspaces","registerPluginModule","mod","data","default","prototype","hasOwnProperty","call","Array","isArray","forEach","item","error","console","registerPluginModules","mods","CommandIDs","riseSmartExec","riseFirstSlide","riseLastSlide","riseToggleOverview","riseToggleAllButtons","riseFullScreen","riseHelp","riseChalkboardClear","riseChalkboardReset","riseChalkboardToggle","riseChalkboardToggleNotes","riseChalkboardColorPrev","riseChalkboardColorNext","riseChalkboardDownload","riseNotesOpen","riseShowConfig","autoStart","requires","IDocumentManager","IEditorLanguageRegistry","optional","ISettingRegistry","ITranslator","ICommandPalette","activate","documentManager","laguages","settingRegistry","translator","palette","trans","nullTranslator","load","url","URL","window","location","toString","activeCellIndex","parseInt","searchParams","get","delete","history","pushState","all","started","restored","async","notebookPath","notebookPanel","open","content","notebookConfig","windowingMode","Rise","registerCommands","commands","command","addItem","category","context","ready","change","cell","getLanguage","codeMimetype","newValue","model","dirty","oldValue","log","loadConfiguration","revealMode","catch","reason","disconnectAll","toolbar","hide","Private","HARDWIRED_CONFIG","autolaunch","start_slideshow_at","auto_select","auto_select_fragment","show_buttons_on_startup","header","undefined","footer","backimage","overlay","restore_timeout","auto_select_timeout","sync_timeout","theme","transition","slideNumber","width","height","controls","progress","scroll","center","margin","minScale","help","enable_chalkboard","enable_leap_motion","Reveal","complete_config","get_slide_type","slide_type","getMetadata","is_slide","is_subslide","is_fragment","is_skip","is_notes","autoSelectHook","notebook","cell_type","setTimeout","current_cell_index","slide","subslide","fragment","current_slide","getCurrentSlide","chunks","split","Number","querySelectorAll","reveal_current_position","slide_counter","subslide_counter","fragment_counter","cells","index","Math","max","type","reveal_cell_index","setScrollingSlide","panel","document","querySelector","sections","getBoundingClientRect","filter","section","style","overflowY","marginTop","notebookModel","_c","applicationSettings","composite","addCommand","caption","__","execute","NotebookActions","runAndAdvance","sessionContext","smartExec","label","reveal_actions","MAX_VALUE","toggleOverview","toggleAllRiseButtons","fullscreenElement","exitFullscreen","requestFullscreen","fullscreenHelp","displayRiseHelp","RevealChalkboard","clear","reset","toggleChalkboard","toggleNotesCanvas","colorNext","colorPrev","download","getPlugin","helpStrings","getHelpDescription","action","api_call","outputObserver","selector","element","visibility","isRevealInitialized","Unselecter","deselectAll","helpListItem","commandID","binding","keyBindings","find","b","CommandRegistry","formatKeystroke","join","node","createElement","insertAdjacentHTML","showDialog","title","body","buttons","Dialog","warnButton","selected_slide","classList","tabIndex","addClass","onfocus","event","target","Window","focus","contains","curdir","PathExt","dirname","path","riseCssUrl","getBaseUrl","head","href","basename","dot_index","lastIndexOf","stem","substr","nameCssUrl","RevealLib","inherited","keyboard","plugins","Notes","push","setting","selected","configure","initialize","addEventListener","outputs","MutationObserver","WebKitMutationObserver","mutationRecords","mutation","addedNodes","sync","observerOptions","childList","characterData","attributes","subtree","output","observe","setupOutputObserver","overlay_body","addHeaderFooterOverlay","activeCellChanged","connect","sender","getSlides","s","i","getIndices","h","v","f","Revealer","new_slide","prev_slide_section","new_section","insertBefore","nextSibling","firstChild","new_subslide","slide_section","appendChild","new_fragment","subslide_section","current_fragment","selected_cell_idx","selected_cell_slide","content_on_slide1","cell_node","viewportNode","firstElementChild","aside","append","markupSlides","helpButton","setAttribute","insertAdjacentElement","addHelpButton","reveal_helpstr","setupLog","_debug","debug","_info","info","_warn","warn","_error","post","payload","top","postMessage","err","level","JSON","stringify","args","provides","IPaths"],"sourceRoot":""}