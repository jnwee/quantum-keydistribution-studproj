{"version":3,"file":"2298.bundle.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { map } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._lastStreamName = '';\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._streamIndex = 0;\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            for (const value of options.values) {\n                const index = this._add(value) - 1;\n                const item = this.list.get(index);\n                item.changed.connect(this._onGenericChange, this);\n            }\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when an item changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the list of items changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            const oldItem = this.list.get(i);\n            const value = oldItem.toJSON();\n            const item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n            oldItem.dispose();\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    removeStreamOutput(number) {\n        const prev = this.list.get(this.length - 1);\n        const curText = prev.streamText;\n        const length = curText.text.length;\n        const options = { silent: true };\n        curText.remove(length - number, length, options);\n    }\n    appendStreamOutput(text) {\n        const prev = this.list.get(this.length - 1);\n        const curText = prev.streamText;\n        const length = curText.text.length;\n        const options = { silent: true };\n        curText.insert(length, text, options);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Remove an output at a given index.\n     */\n    remove(index) {\n        var _a;\n        (_a = this.list.remove(index)) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStreamName = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        for (const item of this.list) {\n            item.dispose();\n        }\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        for (const value of values) {\n            this._add(value);\n        }\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return Array.from(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     *\n     * @returns The list length\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            value.name === this._lastStreamName &&\n            this.length > 0 &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // We append the new text to the current text.\n            // This creates a text change event.\n            const prev = this.list.get(this.length - 1);\n            const curText = prev.streamText;\n            const newText = typeof value.text === 'string' ? value.text : value.text.join('');\n            this._streamIndex = Private.addText(this._streamIndex, curText, newText);\n            return this.length;\n        }\n        if (nbformat.isStream(value)) {\n            if (typeof value.text !== 'string') {\n                value.text = value.text.join('');\n            }\n            const { text, index } = Private.processText(0, value.text);\n            this._streamIndex = index;\n            value.text = text;\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Add the item to our list and return the new length.\n        const length = this.list.push(item);\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStreamName = value.name;\n        }\n        else {\n            this._lastStreamName = '';\n        }\n        return length;\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                args.newValues.forEach(item => {\n                    item.changed.connect(this._onGenericChange, this);\n                });\n                break;\n            case 'remove':\n                args.oldValues.forEach(item => {\n                    item.changed.disconnect(this._onGenericChange, this);\n                });\n                break;\n            case 'set':\n                args.newValues.forEach(item => {\n                    item.changed.connect(this._onGenericChange, this);\n                });\n                args.oldValues.forEach(item => {\n                    item.changed.disconnect(this._onGenericChange, this);\n                });\n                break;\n        }\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange(itemModel) {\n        let idx;\n        let item = null;\n        for (idx = 0; idx < this.list.length; idx++) {\n            item = this.list.get(idx);\n            if (item === itemModel) {\n                break;\n            }\n        }\n        if (item != null) {\n            this._stateChanged.emit(idx);\n            this._changed.emit({\n                type: 'set',\n                newIndex: idx,\n                oldIndex: idx,\n                oldValues: [item],\n                newValues: [item]\n            });\n        }\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Like `indexOf` but allowing to use a regular expression.\n     */\n    function indexOfAny(text, re, i) {\n        const index = text.slice(i).search(re);\n        return index >= 0 ? index + i : index;\n    }\n    /*\n     * Handle backspaces in `newText` and concatenates to `text`, if any.\n     */\n    function processText(index, newText, text) {\n        if (text === undefined) {\n            text = '';\n        }\n        if (!(newText.includes('\\b') ||\n            newText.includes('\\r') ||\n            newText.includes('\\n'))) {\n            text =\n                text.slice(0, index) + newText + text.slice(index + newText.length);\n            return { text, index: index + newText.length };\n        }\n        let idx0 = index;\n        let idx1 = -1;\n        let lastEnd = 0;\n        const regex = /[\\n\\b\\r]/;\n        // TODO: once we upgrade eslint to 9.1.0 we can toggle `allExceptWhileTrue`\n        // option and remove the ignore rule below.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            idx1 = indexOfAny(newText, regex, lastEnd);\n            // Insert characters at current position.\n            const prefix = newText.slice(lastEnd, idx1 === -1 ? newText.length : idx1);\n            text = text.slice(0, idx0) + prefix + text.slice(idx0 + prefix.length);\n            lastEnd = idx1 + 1;\n            if (idx1 === -1) {\n                break;\n            }\n            idx0 += prefix.length;\n            const newChar = newText[idx1];\n            if (newChar === '\\b') {\n                // Backspace: delete previous character if there is one and if it's not a line feed.\n                if (idx0 > 0 && text[idx0 - 1] !== '\\n') {\n                    text = text.slice(0, idx0 - 1) + text.slice(idx0 + 1);\n                    idx0--;\n                }\n            }\n            else if (newChar === '\\r') {\n                // Carriage return: go back to beginning of line.\n                let done = false;\n                while (!done) {\n                    if (idx0 === 0) {\n                        done = true;\n                    }\n                    else if (text[idx0 - 1] === '\\n') {\n                        done = true;\n                    }\n                    else {\n                        idx0--;\n                    }\n                }\n            }\n            else if (newChar === '\\n') {\n                // Insert new line at end of text.\n                text = text + '\\n';\n                idx0 = text.length;\n            }\n            else {\n                throw Error(`This should not happen`);\n            }\n        }\n        return { text, index: idx0 };\n    }\n    Private.processText = processText;\n    /*\n     * Concatenate a string to an observable string, handling backspaces.\n     */\n    function addText(prevIndex, curText, newText) {\n        const { text, index } = processText(prevIndex, newText, curText.text);\n        // Compute the difference between current text and new text.\n        let done = false;\n        let idx = 0;\n        while (!done) {\n            if (idx === text.length) {\n                if (idx === curText.text.length) {\n                    done = true;\n                }\n                else {\n                    curText.remove(idx, curText.text.length);\n                    done = true;\n                }\n            }\n            else if (idx === curText.text.length) {\n                if (idx !== text.length) {\n                    curText.insert(curText.text.length, text.slice(idx));\n                    done = true;\n                }\n            }\n            else if (text[idx] !== curText.text[idx]) {\n                curText.remove(idx, curText.text.length);\n                curText.insert(idx, text.slice(idx));\n                done = true;\n            }\n            else {\n                idx++;\n            }\n        }\n        return index;\n    }\n    Private.addText = addText;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\nconst OUTPUT_AREA_STDIN_HIDING_CLASS = 'jp-OutputArea-stdin-hiding';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/**\n * The overlay that can be clicked to switch between output scrolling modes.\n */\nconst OUTPUT_PROMPT_OVERLAY = 'jp-OutputArea-promptOverlay';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        /**\n         * A public signal used to indicate the number of displayed outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = { ...msg.content, output_type: msgType };\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = { ...msg.content, output_type: 'display_data' };\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                case 'status': {\n                    const executionState = msg.content\n                        .execution_state;\n                    if (executionState === 'idle') {\n                        // If status is idle, the kernel is no longer blocked by the input\n                        this._pendingInput = false;\n                    }\n                    break;\n                }\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._displayIdMap = new Map();\n        this._minHeightTimeout = null;\n        this._inputRequested = new Signal(this);\n        this._toggleScrolling = new Signal(this);\n        this._initialize = new Signal(this);\n        this._outputTracker = new WidgetTracker({\n            namespace: UUID.uuid4()\n        });\n        this._inputHistoryScope = 'global';\n        this._pendingInput = false;\n        super.layout = new PanelLayout();\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.contentFactory =\n            (_a = options.contentFactory) !== null && _a !== void 0 ? _a : OutputArea.defaultContentFactory;\n        this.rendermime = options.rendermime;\n        this._maxNumberOutputs = (_b = options.maxNumberOutputs) !== null && _b !== void 0 ? _b : Infinity;\n        this._translator = (_c = options.translator) !== null && _c !== void 0 ? _c : nullTranslator;\n        this._inputHistoryScope = (_d = options.inputHistoryScope) !== null && _d !== void 0 ? _d : 'global';\n        const model = (this.model = options.model);\n        for (let i = 0; i < Math.min(model.length, this._maxNumberOutputs + 1); i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n        if (options.promptOverlay) {\n            this._addPromptOverlay();\n        }\n    }\n    /**\n     * Narrow the type of OutputArea's layout prop\n     */\n    get layout() {\n        return super.layout;\n    }\n    /**\n     * A read-only sequence of the children widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        value.done\n            .finally(() => {\n            this._pendingInput = false;\n        })\n            .catch(() => {\n            // No-op, required because `finally` re-raises any rejections,\n            // even if caught on the `done` promise level before.\n        });\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * Signal emitted when an output area is requesting an input. The signal\n     * carries the input widget that this class creates in response to the input\n     * request.\n     */\n    get inputRequested() {\n        return this._inputRequested;\n    }\n    /**\n     * A flag indicating if the output area has pending input.\n     */\n    get pendingInput() {\n        return this._pendingInput;\n    }\n    /**\n     * The maximum number of output items to display on top and bottom of cell output.\n     *\n     * ### Notes\n     * It is set to Infinity if no trim is applied.\n     */\n    get maxNumberOutputs() {\n        return this._maxNumberOutputs;\n    }\n    set maxNumberOutputs(limit) {\n        if (limit <= 0) {\n            console.warn(`OutputArea.maxNumberOutputs must be strictly positive.`);\n            return;\n        }\n        const lastShown = this._maxNumberOutputs;\n        this._maxNumberOutputs = limit;\n        if (lastShown < limit) {\n            this._showTrimmedOutputs(lastShown);\n        }\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        this._outputTracker.dispose();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                const output = args.newValues[0];\n                this._insertOutput(args.newIndex, output);\n                if (output.type === 'stream') {\n                    // A stream output has been added, follow changes to the text.\n                    output.streamText.changed.connect((sender, event) => {\n                        this._setOutput(args.newIndex, output);\n                    });\n                }\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                break;\n            default:\n                break;\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Emitted when user requests toggling of the output scrolling mode.\n     */\n    get toggleScrolling() {\n        return this._toggleScrolling;\n    }\n    get initialize() {\n        return this._initialize;\n    }\n    /**\n     * Add overlay allowing to toggle scrolling.\n     */\n    _addPromptOverlay() {\n        const overlay = document.createElement('div');\n        overlay.className = OUTPUT_PROMPT_OVERLAY;\n        overlay.addEventListener('click', () => {\n            this._toggleScrolling.emit();\n        });\n        this.node.appendChild(overlay);\n        requestAnimationFrame(() => {\n            this._initialize.emit();\n        });\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender, change) {\n        const outputLength = Math.min(this.model.length, this._maxNumberOutputs);\n        if (change) {\n            if (change >= this._maxNumberOutputs) {\n                // Bail early\n                return;\n            }\n            this._setOutput(change, this.model.get(change));\n        }\n        else {\n            for (let i = 0; i < outputLength; i++) {\n                this._setOutput(i, this.model.get(i));\n            }\n        }\n        this.outputLengthChanged.emit(outputLength);\n    }\n    /**\n     * Clear the widget outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        // Indicate that input is pending\n        this._pendingInput = true;\n        const input = factory.createStdin({\n            parent_header: msg.header,\n            prompt: stdinPrompt,\n            password,\n            future,\n            translator: this._translator,\n            inputHistoryScope: this._inputHistoryScope\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        // Increase number of outputs to display the result up to the input request.\n        if (this.model.length >= this.maxNumberOutputs) {\n            this.maxNumberOutputs = this.model.length;\n        }\n        this._inputRequested.emit(input);\n        // Get the input node to ensure focus after updating the model upon user reply.\n        const inputNode = input.node.getElementsByTagName('input')[0];\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Increase number of outputs to display the result of stdin if needed.\n            if (this.model.length >= this.maxNumberOutputs) {\n                this.maxNumberOutputs = this.model.length + 1;\n            }\n            panel.addClass(OUTPUT_AREA_STDIN_HIDING_CLASS);\n            // Use stdin as the stream so it does not get combined with stdout.\n            // Note: because it modifies DOM it may (will) shift focus away from the input node.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            // Refocus the input node after it lost focus due to update of the model.\n            inputNode.focus();\n            // Indicate that input is no longer pending\n            this._pendingInput = false;\n            // Keep the input in view for a little while; this (along refocusing)\n            // ensures that we can avoid the cell editor stealing the focus, and\n            // leading to user inadvertently modifying editor content when executing\n            // consecutive commands in short succession.\n            window.setTimeout(() => {\n                // Tack currently focused element to ensure that it remains on it\n                // after disposal of the panel with the old input\n                // (which modifies DOM and can lead to focus jump).\n                const focusedElement = document.activeElement;\n                // Dispose the old panel with no longer needed input box.\n                panel.dispose();\n                // Refocus the element that was focused before.\n                if (focusedElement && focusedElement instanceof HTMLElement) {\n                    focusedElement.focus();\n                }\n            }, 500);\n        });\n        // Note: the `input.value` promise must be listened to before we attach the panel\n        this.layout.addWidget(panel);\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        if (index >= this._maxNumberOutputs) {\n            return;\n        }\n        const panel = this.layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets.filter(it => 'renderModel' in it).pop()\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            this.layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index > this._maxNumberOutputs) {\n            return;\n        }\n        const layout = this.layout;\n        if (index === this._maxNumberOutputs) {\n            const warning = new Private.TrimmedOutputs(this._maxNumberOutputs, () => {\n                const lastShown = this._maxNumberOutputs;\n                this._maxNumberOutputs = Infinity;\n                this._showTrimmedOutputs(lastShown);\n            });\n            layout.insertWidget(index, this._wrappedOutput(warning));\n        }\n        else {\n            let output = this.createOutputItem(model);\n            if (output) {\n                output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n            }\n            else {\n                output = new Widget();\n            }\n            if (!this._outputTracker.has(output)) {\n                void this._outputTracker.add(output);\n            }\n            layout.insertWidget(index, output);\n        }\n    }\n    /**\n     * A widget tracker for individual output widgets in the output area.\n     */\n    get outputTracker() {\n        return this._outputTracker;\n    }\n    /**\n     * Dispose information message and show output models from the given\n     * index to maxNumberOutputs\n     *\n     * @param lastShown Starting model index to insert.\n     */\n    _showTrimmedOutputs(lastShown) {\n        // Dispose information widget\n        this.widgets[lastShown].dispose();\n        for (let idx = lastShown; idx < this.model.length; idx++) {\n            this._insertOutput(idx, this.model.get(idx));\n        }\n        this.outputLengthChanged.emit(Math.min(this.model.length, this._maxNumberOutputs));\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        return this._wrappedOutput(output, model.executionCount);\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            const trans = this._translator.load('jupyterlab');\n            pre.textContent = trans.__('Javascript Error: %1', error.message);\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n    /**\n     * Wrap a output widget within a output panel\n     *\n     * @param output Output widget to wrap\n     * @param executionCount Execution count\n     * @returns The output panel\n     */\n    _wrappedOutput(output, executionCount = null) {\n        const panel = new Private.OutputPanel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        const panel = new Private.OutputPanel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    static _historyIx(key, ix) {\n        const history = Stdin._history.get(key);\n        if (!history) {\n            return undefined;\n        }\n        const len = history.length;\n        // wrap nonpositive ix to nonnegative ix\n        if (ix <= 0) {\n            return len + ix;\n        }\n    }\n    static _historyAt(key, ix) {\n        const history = Stdin._history.get(key);\n        if (!history) {\n            return undefined;\n        }\n        const len = history.length;\n        const ixpos = Stdin._historyIx(key, ix);\n        if (ixpos !== undefined && ixpos < len) {\n            return history[ixpos];\n        }\n        // return undefined if ix is out of bounds\n    }\n    static _historyPush(key, line) {\n        const history = Stdin._history.get(key);\n        history.push(line);\n        if (history.length > 1000) {\n            // truncate line history if it's too long\n            history.shift();\n        }\n    }\n    static _historySearch(key, pat, ix, reverse = true) {\n        const history = Stdin._history.get(key);\n        const len = history.length;\n        const ixpos = Stdin._historyIx(key, ix);\n        const substrFound = (x) => x.search(pat) !== -1;\n        if (ixpos === undefined) {\n            return;\n        }\n        if (reverse) {\n            if (ixpos === 0) {\n                // reverse search fails if already at start of history\n                return;\n            }\n            const ixFound = history.slice(0, ixpos).findLastIndex(substrFound);\n            if (ixFound !== -1) {\n                // wrap ix to negative\n                return ixFound - len;\n            }\n        }\n        else {\n            if (ixpos >= len - 1) {\n                // forward search fails if already at end of history\n                return;\n            }\n            const ixFound = history.slice(ixpos + 1).findIndex(substrFound);\n            if (ixFound !== -1) {\n                // wrap ix to negative and adjust for slice\n                return ixFound - len + ixpos + 1;\n            }\n        }\n    }\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this._resolved = false;\n        this.addClass(STDIN_CLASS);\n        this._future = options.future;\n        this._historyIndex = 0;\n        this._historyKey =\n            options.inputHistoryScope === 'session'\n                ? options.parent_header.session\n                : '';\n        this._historyPat = '';\n        this._parentHeader = options.parent_header;\n        this._password = options.password;\n        this._trans = ((_a = options.translator) !== null && _a !== void 0 ? _a : nullTranslator).load('jupyterlab');\n        this._value = options.prompt + ' ';\n        this._input = this.node.getElementsByTagName('input')[0];\n        // make users aware of the line history feature\n        if (!this._password) {\n            this._input.placeholder = this._trans.__('↑↓ for history. Search history with c-↑/c-↓');\n        }\n        else {\n            this._input.placeholder = '';\n        }\n        // initialize line history\n        if (!Stdin._history.has(this._historyKey)) {\n            Stdin._history.set(this._historyKey, []);\n        }\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (this._resolved) {\n            // Do not handle any more key events if the promise was resolved.\n            event.preventDefault();\n            return;\n        }\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.key === 'Enter') {\n                this.resetSearch();\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                }, this._parentHeader);\n                if (this._password) {\n                    this._value += '········';\n                }\n                else {\n                    this._value += input.value;\n                    Stdin._historyPush(this._historyKey, input.value);\n                }\n                this._resolved = true;\n                this._promise.resolve(void 0);\n            }\n            else if (event.key === 'Escape') {\n                // currently this gets clobbered by the documentsearch:end command at the notebook level\n                this.resetSearch();\n                input.blur();\n            }\n            else if (event.ctrlKey &&\n                (event.key === 'ArrowUp' || event.key === 'ArrowDown')) {\n                // if _historyPat is blank, use input as search pattern. Otherwise, reuse the current search pattern\n                if (this._historyPat === '') {\n                    this._historyPat = input.value;\n                }\n                const reverse = event.key === 'ArrowUp';\n                const searchHistoryIx = Stdin._historySearch(this._historyKey, this._historyPat, this._historyIndex, reverse);\n                if (searchHistoryIx !== undefined) {\n                    const historyLine = Stdin._historyAt(this._historyKey, searchHistoryIx);\n                    if (historyLine !== undefined) {\n                        if (this._historyIndex === 0) {\n                            this._valueCache = input.value;\n                        }\n                        this._setInputValue(historyLine);\n                        this._historyIndex = searchHistoryIx;\n                        // The default action for ArrowUp is moving to first character\n                        // but we want to keep the cursor at the end.\n                        event.preventDefault();\n                    }\n                }\n            }\n            else if (event.key === 'ArrowUp') {\n                this.resetSearch();\n                const historyLine = Stdin._historyAt(this._historyKey, this._historyIndex - 1);\n                if (historyLine) {\n                    if (this._historyIndex === 0) {\n                        this._valueCache = input.value;\n                    }\n                    this._setInputValue(historyLine);\n                    --this._historyIndex;\n                    // The default action for ArrowUp is moving to first character\n                    // but we want to keep the cursor at the end.\n                    event.preventDefault();\n                }\n            }\n            else if (event.key === 'ArrowDown') {\n                this.resetSearch();\n                if (this._historyIndex === 0) {\n                    // do nothing\n                }\n                else if (this._historyIndex === -1) {\n                    this._setInputValue(this._valueCache);\n                    ++this._historyIndex;\n                }\n                else {\n                    const historyLine = Stdin._historyAt(this._historyKey, this._historyIndex + 1);\n                    if (historyLine) {\n                        this._setInputValue(historyLine);\n                        ++this._historyIndex;\n                    }\n                }\n            }\n        }\n    }\n    resetSearch() {\n        this._historyPat = '';\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n    _setInputValue(value) {\n        this._input.value = value;\n        // Set cursor at the end; this is usually not necessary when input is\n        // focused but having the explicit placement ensures consistency.\n        this._input.setSelectionRange(value.length, value.length);\n    }\n}\nStdin._history = new Map();\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n    /**\n     * A `Panel` that's focused by a `contextmenu` event.\n     */\n    class OutputPanel extends Panel {\n        /**\n         * Construct a new `OutputPanel` widget.\n         */\n        constructor(options) {\n            super(options);\n        }\n        /**\n         * A callback that focuses on the widget.\n         */\n        _onContext(_) {\n            this.node.focus();\n        }\n        /**\n         * Handle `after-attach` messages sent to the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('contextmenu', this._onContext.bind(this));\n        }\n        /**\n         * Handle `before-detach` messages sent to the widget.\n         */\n        onBeforeDetach(msg) {\n            super.onAfterDetach(msg);\n            this.node.removeEventListener('contextmenu', this._onContext.bind(this));\n        }\n    }\n    Private.OutputPanel = OutputPanel;\n    /**\n     * Trimmed outputs information widget.\n     */\n    class TrimmedOutputs extends Widget {\n        /**\n         * Widget constructor\n         *\n         * ### Notes\n         * The widget will be disposed on click after calling the callback.\n         *\n         * @param maxNumberOutputs Maximal number of outputs to display\n         * @param _onClick Callback on click event on the widget\n         */\n        constructor(maxNumberOutputs, onClick) {\n            const node = document.createElement('div');\n            const title = `The first ${maxNumberOutputs} are displayed`;\n            const msg = 'Show more outputs';\n            node.insertAdjacentHTML('afterbegin', `<a title=${title}>\n          <pre>${msg}</pre>\n        </a>`);\n            super({\n                node\n            });\n            this._onClick = onClick;\n            this.addClass('jp-TrimmedOutputs');\n            this.addClass('jp-RenderedHTMLCommon');\n        }\n        /**\n         * Handle the DOM events for widget.\n         *\n         * @param event - The DOM event sent to the widget.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the widget's DOM node. It should\n         * not be called directly by user code.\n         */\n        handleEvent(event) {\n            if (event.type === 'click') {\n                this._onClick(event);\n            }\n        }\n        /**\n         * Handle `after-attach` messages for the widget.\n         */\n        onAfterAttach(msg) {\n            super.onAfterAttach(msg);\n            this.node.addEventListener('click', this);\n        }\n        /**\n         * A message handler invoked on a `'before-detach'`\n         * message\n         */\n        onBeforeDetach(msg) {\n            super.onBeforeDetach(msg);\n            this.node.removeEventListener('click', this);\n        }\n    }\n    Private.TrimmedOutputs = TrimmedOutputs;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"names":["Private","OutputAreaModel","constructor","options","this","clearNext","_lastStreamName","_trusted","_isDisposed","_stateChanged","Signal","_changed","_streamIndex","trusted","contentFactory","defaultContentFactory","list","ObservableList","values","value","index","_add","get","changed","connect","_onGenericChange","_onListChanged","stateChanged","length","i","oldItem","toJSON","item","_createItem","set","dispose","isDisposed","clearData","JSONExt","deepCopy","normalize","removeStreamOutput","number","curText","streamText","text","remove","silent","appendStreamOutput","insert","add","output","clear","_a","wait","fromJSON","Array","from","map","name","shouldCombine","lastModel","newText","join","addText","processText","push","createOutputModel","sender","args","type","newValues","forEach","oldValues","disconnect","emit","itemModel","idx","newIndex","oldIndex","ContentFactory","OutputModel","indexOfAny","re","slice","search","undefined","includes","idx0","idx1","lastEnd","regex","prefix","newChar","done","Error","isArray","prevIndex","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","_b","_c","_d","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","output_type","_displayIdMap","execution_state","_pendingInput","_onExecuteReply","status","payload","pages","filter","source","data","JSON","parse","stringify","metadata","Map","_minHeightTimeout","_inputRequested","_toggleScrolling","_initialize","_outputTracker","WidgetTracker","namespace","UUID","uuid4","_inputHistoryScope","layout","PanelLayout","addClass","rendermime","_maxNumberOutputs","maxNumberOutputs","Infinity","_translator","translator","nullTranslator","inputHistoryScope","Math","min","_insertOutput","onModelChanged","onStateChanged","promptOverlay","_addPromptOverlay","widgets","future","_future","finally","catch","_clear","onIOPub","onReply","onStdin","KernelMessage","isInputRequestMsg","onInputRequest","inputRequested","pendingInput","limit","console","warn","lastShown","_showTrimmedOutputs","event","_setOutput","startIndex","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","toggleScrolling","initialize","overlay","document","createElement","className","addEventListener","node","appendChild","requestAnimationFrame","count","indices","rangeEnd","splice","change","outputLength","rect","getBoundingClientRect","style","minHeight","height","window","clearTimeout","setTimeout","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","parent_header","inputNode","getElementsByTagName","then","focus","focusedElement","activeElement","HTMLElement","renderer","it","pop","mimeType","preferredMimeType","currentPreferredMimetype","isIsolated","IsolatedRenderer","renderModel","warning","TrimmedOutputs","insertWidget","_wrappedOutput","createOutputItem","toggleClass","executionCount","has","outputTracker","createRenderedMimetype","createRenderer","error","pre","trans","load","textContent","__","message","setAttribute","OutputPanel","SimplifiedOutputArea","execute","async","code","sessionContext","stopOnError","tags","indexOf","stop_on_error","kernel","session","requestExecute","mimeMd","OutputPrompt","Stdin","_executionCount","_historyIx","key","ix","history","_history","len","_historyAt","ixpos","_historyPush","line","shift","_historySearch","pat","reverse","substrFound","x","ixFound","findLastIndex","findIndex","createInputWidgetNode","_promise","PromiseDelegate","_resolved","_historyIndex","_historyKey","_historyPat","_parentHeader","_password","_trans","_value","_input","placeholder","promise","handleEvent","preventDefault","resetSearch","sendInputReply","resolve","blur","ctrlKey","historyLine","_valueCache","_setInputValue","searchHistoryIx","onAfterAttach","onBeforeDetach","removeEventListener","setSelectionRange","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","ResizeObserver","observe","AttachedProperty","create","owner","_onContext","_","bind","onAfterDetach","onClick","title","insertAdjacentHTML","_onClick"],"sourceRoot":""}